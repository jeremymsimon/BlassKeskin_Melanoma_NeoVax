[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blass & Keskin (2025): Melanoma NeoVax analysis: PBMC bulk TCRseq",
    "section": "",
    "text": "Introduction\nThis is a book that contains all code to reproduce figures related to bulkTCRseq analysis of PBMC data associated with Blass & Keskin, et al (2025)\nNote that while the code is identical, this book was rendered after final manuscript figures were generated and thus minor differences may arise, particularly for steps that are non-deterministic or rely on random number generators.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#enhanced-adjuvanticity-of-a-personal-neoantigen-vaccine-generates-potent-immunity-in-melanoma",
    "href": "index.html#enhanced-adjuvanticity-of-a-personal-neoantigen-vaccine-generates-potent-immunity-in-melanoma",
    "title": "Blass & Keskin (2025): Melanoma NeoVax analysis: PBMC bulk TCRseq",
    "section": "Enhanced adjuvanticity of a personal neoantigen vaccine generates potent immunity in melanoma",
    "text": "Enhanced adjuvanticity of a personal neoantigen vaccine generates potent immunity in melanoma\nEryn Blass, Derin B. Keskin, Chloe R. Tu, Cleo Forman, Allison Vanasse, Haley E. Sax, Bohoon Shim, Vipheaviny Chea, Nawoo Kim, Isabel Carulli, Jackson Southard, Haoxiang Lyu, Wesley Lu, Micah Rickles-Young, Alexander B. Afeyan, Oriol Olive, Ambica Mehndiratta, Haley Greenslade, Keerthi Shetty, Joanna Baginska, Ilana Gomez-Diaz, Allison Nau, Kathleen L. Pfaff, Andrew Gans, Elizabeth I Buchbinder, Tamara A. Sussman, Megan L Insco, Charles H. Yoon, Scott J. Rodig, Sachet A. Shukla, Shuqiang Li, Jon C. Aster, David A. Braun, Carrie Cibulskis, Nir Hacohen, Donna S. Neuberg, A Giobbie-Hurder, Kenneth J. Livak, Edward F. Fritsch, Giacomo Oliveira, Jeremy M. Simon, Catherine J. Wu, Patrick A. Ott\n\nAbstract\nPersonalized neoantigen-targeting vaccines have great promise, but current delivery strategies are suboptimal. Since antigen availability and effective T cell priming are critical for maximal immunogenicity, we tested a synthetic long peptide vaccine formulated with Montanide, poly-ICLC, and locally administered ipilimumab in addition to systemic nivolumab in 10 patients with melanoma. These personalized vaccines generated de novo ex vivo T cell responses against the majority of immunizing neoepitopes in all 9 fully vaccinated patients, and ex vivo CD8+ T cell responses in 6 of 9. Vaccination induced hundreds of circulating and intratumoral T cell receptor (TCR) clonotypes that were distinct from those arising after PD-1 inhibition. By linking the vaccine neoantigen specificity of T cell clonotypes with single cell phenotypes in tumors, we demonstrate remodeling of the intratumoral T cell repertoire following vaccination. These observations show that multi-pronged immune adjuvanticity can boost T cell responses to neoantigen-targeting vaccines",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "Assign_Colors.html",
    "href": "Assign_Colors.html",
    "title": "1  Save scTCR and bulkTCR colorschemes",
    "section": "",
    "text": "1.1 Set up workspace\n# Libraries\nlibrary(Seurat)\n\nLoading required package: SeuratObject\n\n\nLoading required package: sp\n\n\n\nAttaching package: 'SeuratObject'\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, t\n\nlibrary(colorblindr)\n\nLoading required package: colorspace\n\n\nLoading required package: ggplot2\n\nlibrary(RColorBrewer)\nlibrary(paletteer)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ lubridate 1.9.4     ✔ tibble    3.2.1\n✔ purrr     1.0.4     ✔ tidyr     1.3.1\n✔ readr     2.1.5     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Save scTCR and bulkTCR colorschemes</span>"
    ]
  },
  {
    "objectID": "Assign_Colors.html#assign-custom-color-scheme",
    "href": "Assign_Colors.html#assign-custom-color-scheme",
    "title": "1  Save scTCR and bulkTCR colorschemes",
    "section": "1.2 Assign custom color scheme",
    "text": "1.2 Assign custom color scheme\n\nprojectils_fill &lt;- scale_fill_manual(values = c(\"CD4.NaiveLike\" = \"#F7FBFF\", \"CD4.Memory\" = \"#DEEBF7\", \"CD4.Tfh\" = \"#C6DBEF\", \"CD4.Th17\" = \"#9ECAE1\", \"CD4.CTL_GNLY\" = \"#6BAED6\", \"CD4.CTL_EOMES\" = \"#4292C6\", \"CD4.CTL_Exh\" = \"#2171B5\", \"CD4.Treg\" = \"#084594\", \"CD8.NaiveLike\" = \"#FEE5D9\", \"CD8.MAIT\" = \"#FCBBA1\", \"CD8.CM\" = \"#FC9272\", \"CD8.EM\" = \"#FB6A4A\", \"CD8.TEMRA\" = \"#EF3B2C\", \"CD8.TPEX\" = \"#CB181D\", \"CD8.TEX\" = \"#99000D\"))\n\nprojectils_color &lt;- scale_color_manual(values = c(\"CD4.NaiveLike\" = \"#F7FBFF\", \"CD4.Memory\" = \"#DEEBF7\", \"CD4.Tfh\" = \"#C6DBEF\", \"CD4.Th17\" = \"#9ECAE1\", \"CD4.CTL_GNLY\" = \"#6BAED6\", \"CD4.CTL_EOMES\" = \"#4292C6\", \"CD4.CTL_Exh\" = \"#2171B5\", \"CD4.Treg\" = \"#084594\", \"CD8.NaiveLike\" = \"#FEE5D9\", \"CD8.MAIT\" = \"#FCBBA1\", \"CD8.CM\" = \"#FC9272\", \"CD8.EM\" = \"#FB6A4A\", \"CD8.TEMRA\" = \"#EF3B2C\", \"CD8.TPEX\" = \"#CB181D\", \"CD8.TEX\" = \"#99000D\"))",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Save scTCR and bulkTCR colorschemes</span>"
    ]
  },
  {
    "objectID": "Assign_Colors.html#relevel-functional.cluster-factor-before-plotting",
    "href": "Assign_Colors.html#relevel-functional.cluster-factor-before-plotting",
    "title": "1  Save scTCR and bulkTCR colorschemes",
    "section": "1.3 Relevel functional.cluster factor before plotting",
    "text": "1.3 Relevel functional.cluster factor before plotting\n\nprojectils_celltypes &lt;- c(\"CD4.NaiveLike\", \"CD4.Memory\", \"CD4.Tfh\", \"CD4.Th17\", \"CD4.CTL_GNLY\", \"CD4.CTL_EOMES\", \"CD4.CTL_Exh\", \"CD4.Treg\", \"CD8.NaiveLike\",\"CD8.MAIT\", \"CD8.CM\", \"CD8.EM\", \"CD8.TEMRA\", \"CD8.TPEX\", \"CD8.TEX\")\n\nprojectils_celltypes &lt;- factor(projectils_celltypes, levels = c(\"CD4.NaiveLike\", \"CD4.Memory\", \"CD4.Tfh\", \"CD4.Th17\", \"CD4.CTL_GNLY\", \"CD4.CTL_EOMES\", \"CD4.CTL_Exh\", \"CD4.Treg\", \"CD8.NaiveLike\",\"CD8.MAIT\", \"CD8.CM\", \"CD8.EM\", \"CD8.TEMRA\", \"CD8.TPEX\", \"CD8.TEX\"))",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Save scTCR and bulkTCR colorschemes</span>"
    ]
  },
  {
    "objectID": "Assign_Colors.html#check-plots-are-working",
    "href": "Assign_Colors.html#check-plots-are-working",
    "title": "1  Save scTCR and bulkTCR colorschemes",
    "section": "1.4 Check plots are working",
    "text": "1.4 Check plots are working\n\n# A plot with all the data\np &lt;- projectils_celltypes %&gt;%\n  as.data.frame(functional.cluster = projectils_celltypes) %&gt;%\n  ggplot(aes(x = 1, fill = projectils_celltypes)) + \n  geom_bar() + \n  projectils_fill\np",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Save scTCR and bulkTCR colorschemes</span>"
    ]
  },
  {
    "objectID": "Assign_Colors.html#check-colors-for-colorblindness",
    "href": "Assign_Colors.html#check-colors-for-colorblindness",
    "title": "1  Save scTCR and bulkTCR colorschemes",
    "section": "1.5 Check colors for colorblindness",
    "text": "1.5 Check colors for colorblindness\n\ncvd_grid(p)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Save scTCR and bulkTCR colorschemes</span>"
    ]
  },
  {
    "objectID": "Assign_Colors.html#save-color-and-fill-environment-variables",
    "href": "Assign_Colors.html#save-color-and-fill-environment-variables",
    "title": "1  Save scTCR and bulkTCR colorschemes",
    "section": "1.6 Save color and fill environment variables",
    "text": "1.6 Save color and fill environment variables\n\nsaveRDS(projectils_fill, \"Part0_ProjecTILs_Fill.rds\")\nsaveRDS(projectils_color, \"Part0_ProjecTILs_Color.rds\")",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Save scTCR and bulkTCR colorschemes</span>"
    ]
  },
  {
    "objectID": "Assign_Colors.html#load-ifng-tumor-and-skin-single-cell-data",
    "href": "Assign_Colors.html#load-ifng-tumor-and-skin-single-cell-data",
    "title": "1  Save scTCR and bulkTCR colorschemes",
    "section": "1.7 Load ifng, tumor and skin single cell data",
    "text": "1.7 Load ifng, tumor and skin single cell data\n\npatients &lt;- c(\"P101\", \"P103\", \"P104\", \"P105\", \"P106\", \"P108\", \"P109\", \"P110\", \"P111\")",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Save scTCR and bulkTCR colorschemes</span>"
    ]
  },
  {
    "objectID": "Assign_Colors.html#create-factors",
    "href": "Assign_Colors.html#create-factors",
    "title": "1  Save scTCR and bulkTCR colorschemes",
    "section": "1.8 Create factors",
    "text": "1.8 Create factors\n\npatients &lt;- data.frame(Patient = patients) %&gt;%\n  mutate(Patient = factor(Patient))",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Save scTCR and bulkTCR colorschemes</span>"
    ]
  },
  {
    "objectID": "Assign_Colors.html#assign-custom-color-scheme-1",
    "href": "Assign_Colors.html#assign-custom-color-scheme-1",
    "title": "1  Save scTCR and bulkTCR colorschemes",
    "section": "1.9 Assign custom color scheme",
    "text": "1.9 Assign custom color scheme\n\ncolors &lt;- c( \"#59A14F\",  \"#B07AA1FF\", \"#76B7B2FF\", \"#FBB258FF\", \"#DC050C\", \"#F6AAC9FF\", \"#5ca2e5\", \"#615ebf\", \"#826250\") \n\nnames(colors) &lt;- levels(patients$Patient)\npatient_fill &lt;- scale_fill_manual(values = colors)\npatient_color &lt;- scale_color_manual(values = colors)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Save scTCR and bulkTCR colorschemes</span>"
    ]
  },
  {
    "objectID": "Assign_Colors.html#check-plots-are-working-1",
    "href": "Assign_Colors.html#check-plots-are-working-1",
    "title": "1  Save scTCR and bulkTCR colorschemes",
    "section": "1.10 Check plots are working",
    "text": "1.10 Check plots are working\n\n# A plot with all the data\np &lt;- ggplot(patients, aes(x = 1,fill = Patient)) + \n  geom_bar() + \n  patient_fill\np + ggtitle(\"BulkTCR Patients\")\n\n\n\n\n\n\n\n# A plot with the single cell patients: P101, P103, P104 and P108\np2 &lt;- patients[c(1,2,3,6), 1, drop = FALSE] %&gt;%\n  ggplot(aes(x = 1,fill = Patient)) + \n  geom_bar() + \n  patient_fill\np2 + ggtitle(\"scRNA Patients\")",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Save scTCR and bulkTCR colorschemes</span>"
    ]
  },
  {
    "objectID": "Assign_Colors.html#check-colors-for-colorblindness-1",
    "href": "Assign_Colors.html#check-colors-for-colorblindness-1",
    "title": "1  Save scTCR and bulkTCR colorschemes",
    "section": "1.11 Check colors for colorblindness",
    "text": "1.11 Check colors for colorblindness\n\ncvd_grid(p)\n\n\n\n\n\n\n\ncvd_grid(p2)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Save scTCR and bulkTCR colorschemes</span>"
    ]
  },
  {
    "objectID": "Assign_Colors.html#save-color-and-fill-environment-variables-1",
    "href": "Assign_Colors.html#save-color-and-fill-environment-variables-1",
    "title": "1  Save scTCR and bulkTCR colorschemes",
    "section": "1.12 Save color and fill environment variables",
    "text": "1.12 Save color and fill environment variables\n\nsaveRDS(patient_fill, \"Part0_Patient_Fill.rds\")\nsaveRDS(patient_color, \"Part0_Patient_Color.rds\")",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Save scTCR and bulkTCR colorschemes</span>"
    ]
  },
  {
    "objectID": "Assign_Colors.html#get-session-info",
    "href": "Assign_Colors.html#get-session-info",
    "title": "1  Save scTCR and bulkTCR colorschemes",
    "section": "1.13 Get session info",
    "text": "1.13 Get session info\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Rocky Linux 8.10 (Green Obsidian)\n\nMatrix products: default\nBLAS/LAPACK: /usr/lib64/libopenblasp-r0.3.15.so;  LAPACK version 3.9.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: America/New_York\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] lubridate_1.9.4    forcats_1.0.0      stringr_1.5.1      purrr_1.0.4       \n [5] readr_2.1.5        tidyr_1.3.1        tibble_3.2.1       tidyverse_2.0.0   \n [9] dplyr_1.1.4        paletteer_1.6.0    RColorBrewer_1.1-3 colorblindr_0.1.0 \n[13] ggplot2_3.5.1      colorspace_2.1-1   Seurat_5.1.0       SeuratObject_5.0.2\n[17] sp_2.2-0          \n\nloaded via a namespace (and not attached):\n  [1] deldir_2.0-4           pbapply_1.7-2          gridExtra_2.3         \n  [4] rematch2_2.1.2         rlang_1.1.5            magrittr_2.0.3        \n  [7] RcppAnnoy_0.0.22       spatstat.geom_3.3-2    matrixStats_1.5.0     \n [10] ggridges_0.5.6         compiler_4.3.2         png_0.1-8             \n [13] vctrs_0.6.5            reshape2_1.4.4         pkgconfig_2.0.3       \n [16] fastmap_1.2.0          labeling_0.4.3         promises_1.3.2        \n [19] rmarkdown_2.29         tzdb_0.5.0             xfun_0.50             \n [22] jsonlite_1.8.9         goftest_1.2-3          later_1.4.1           \n [25] spatstat.utils_3.1-0   irlba_2.3.5.1          parallel_4.3.2        \n [28] cluster_2.1.8.1        R6_2.6.1               ica_1.0-3             \n [31] stringi_1.8.4          spatstat.data_3.1-2    reticulate_1.42.0     \n [34] parallelly_1.41.0      spatstat.univar_3.0-0  lmtest_0.9-40         \n [37] scattermore_1.2        Rcpp_1.0.14            knitr_1.49            \n [40] tensor_1.5             future.apply_1.11.3    zoo_1.8-13            \n [43] sctransform_0.4.1      timechange_0.3.0       httpuv_1.6.15         \n [46] Matrix_1.6-5           splines_4.3.2          igraph_2.0.3          \n [49] tidyselect_1.2.1       rstudioapi_0.17.1      abind_1.4-8           \n [52] spatstat.random_3.3-1  codetools_0.2-20       miniUI_0.1.1.1        \n [55] spatstat.explore_3.3-2 listenv_0.9.1          lattice_0.22-7        \n [58] plyr_1.8.9             withr_3.0.2            shiny_1.9.1           \n [61] ROCR_1.0-11            evaluate_1.0.1         Rtsne_0.17            \n [64] future_1.34.0          fastDummies_1.7.5      survival_3.8-3        \n [67] polyclip_1.10-7        fitdistrplus_1.2-2     pillar_1.10.1         \n [70] KernSmooth_2.23-26     plotly_4.10.4          generics_0.1.3        \n [73] RcppHNSW_0.6.0         hms_1.1.3              munsell_0.5.1         \n [76] scales_1.3.0           globals_0.16.3         xtable_1.8-4          \n [79] glue_1.8.0             lazyeval_0.2.2         tools_4.3.2           \n [82] data.table_1.15.4      RSpectra_0.16-2        RANN_2.6.2            \n [85] leiden_0.4.3.1         dotCall64_1.2          cowplot_1.1.3         \n [88] grid_4.3.2             nlme_3.1-168           patchwork_1.3.0       \n [91] cli_3.6.3              spatstat.sparse_3.1-0  spam_2.11-1           \n [94] viridisLite_0.4.2      uwot_0.2.3             gtable_0.3.6          \n [97] digest_0.6.37          progressr_0.15.1       ggrepel_0.9.5         \n[100] htmlwidgets_1.6.4      farver_2.1.2           htmltools_0.5.8.1     \n[103] lifecycle_1.0.4        httr_1.4.7             mime_0.13             \n[106] MASS_7.3-60.0.1",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Save scTCR and bulkTCR colorschemes</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part1.html",
    "href": "PBMC_bulkTCR_Part1.html",
    "title": "2  PBMCs: Compile & Format Data",
    "section": "",
    "text": "2.1 Set up workspace\n# Libraries\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.5\n✔ ggplot2   3.5.1     ✔ stringr   1.5.1\n✔ lubridate 1.9.4     ✔ tibble    3.2.1\n✔ purrr     1.0.4     ✔ tidyr     1.3.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>PBMCs: Compile & Format Data</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part1.html#set-pseudo-count-for-in-vitro-samples",
    "href": "PBMC_bulkTCR_Part1.html#set-pseudo-count-for-in-vitro-samples",
    "title": "2  PBMCs: Compile & Format Data",
    "section": "2.2 Set pseudo count for in vitro samples",
    "text": "2.2 Set pseudo count for in vitro samples\nSet a pseudo count to allow for in vitro fold change calculations of undetected clones The appropriate value was explored in file “Test_pseudocount_frequency.Rmd” and the slides titled “Testing pseudocounts in calculating fold change”\n\npseudo_freq &lt;- 0.001",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>PBMCs: Compile & Format Data</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part1.html#open-tcr-reactivity-data",
    "href": "PBMC_bulkTCR_Part1.html#open-tcr-reactivity-data",
    "title": "2  PBMCs: Compile & Format Data",
    "section": "2.3 Open TCR reactivity data",
    "text": "2.3 Open TCR reactivity data\n\nreactivity &lt;- read.csv(\"/jsimonlab/users/chloetu/melanoma/Melanoma_Eryn/analysis_093024/Eryn_reactivity_results/reformatted_reconstructed_TCR_072324.csv\") %&gt;%\n  mutate(Beta_clonotype = paste0(TRBV_1, \";\", TRBJ_1, \";\", CDR3B_1)) %&gt;%\n  select(Beta_clonotype, Patient, Reactive) %&gt;%\n  filter(Reactive == \"Yes\")\n\nreactivity %&gt;%\n  dplyr::count(Patient)\n\n  Patient  n\n1     101  3\n2     103  3\n3     104 18\n4     108  7",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>PBMCs: Compile & Format Data</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part1.html#compile-p101s-data",
    "href": "PBMC_bulkTCR_Part1.html#compile-p101s-data",
    "title": "2  PBMCs: Compile & Format Data",
    "section": "2.4 Compile P101’s data",
    "text": "2.4 Compile P101’s data\nLoad longitudinal frequencies\n\n# Control == pretreatment\np101_pretreatment_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/101pre-treament_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\")\n\n# Post-Nivo == prevax\np101_prevax_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/101pre-vax_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\")\n\n# Post-vaccine\np101_postvax_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/101post-vax_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\")\n\nAggregate beta chains into one dataframe\n\np101_betas_pbmc &lt;- p101_pretreatment_beta %&gt;%\n  full_join(p101_prevax_beta, by = c(\"v_hit\", \"j_hit\", \"cdr3\")) %&gt;%\n  dplyr::rename(\"p101_pretreatment\" = \"Freq.x\",\n                \"p101_prevax\" = \"Freq.y\",\n                \"p101_pretreatment_umi\" = \"totalUMICount.x\",\n                \"p101_prevax_umi\" = \"totalUMICount.y\") %&gt;%\n  full_join(p101_postvax_beta, by = c(\"v_hit\", \"j_hit\", \"cdr3\")) %&gt;%\n  dplyr::rename(\"p101_postvax\" = \"Freq\",\n                \"p101_postvax_umi\" = \"totalUMICount\") %&gt;%\n  select(\"v_hit\", \"j_hit\", \"cdr3\", \"p101_pretreatment\", \"p101_pretreatment_umi\", \n         \"p101_prevax\", \"p101_prevax_umi\", \"p101_postvax\", \"p101_postvax_umi\") %&gt;%\n  mutate_at(c(\"p101_pretreatment\", \"p101_prevax\", \"p101_postvax\"), as.numeric) %&gt;% \n  unite(\"Beta_clonotype\", c(v_hit, j_hit, cdr3), sep = \";\")\n  \n\ndim(p101_betas_pbmc)\n\n[1] 413697      7\n\n\nCalculate fold changes across longitudinal timepoints\n\np101_betas_pbmc &lt;- p101_betas_pbmc %&gt;%\n  mutate(postvax_vs_prevax_fc = p101_postvax/p101_prevax,\n         prevax_vs_pretreatment_fc = p101_prevax/p101_pretreatment,\n         log2fc_postvax_vs_prevax = log2(postvax_vs_prevax_fc),\n         log2fc_prevax_vs_pretreatment = log2(prevax_vs_pretreatment_fc))\n\nLoad in vitro frequencies\n\np101DMSO_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/101-DMSO_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\") %&gt;%\n  unite(\"Beta_clonotype\", c(v_hit,j_hit,cdr3),sep=\";\")\np101poolA_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/101-PoolA_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\") %&gt;%\n  unite(\"Beta_clonotype\", c(v_hit,j_hit,cdr3),sep=\";\")\np101poolB_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/101-PoolB_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\") %&gt;%\n  unite(\"Beta_clonotype\", c(v_hit,j_hit,cdr3),sep=\";\")\n\nAggregate beta chains into one dataframe\n\np101_betas_invitro &lt;- full_join(p101DMSO_beta,p101poolA_beta,by=\"Beta_clonotype\") %&gt;%\n    dplyr::rename(\"p101_DMSO_beta\" = Freq.x, \n                  \"p101_DMSO_umi\" = totalUMICount.x, \n                  \"p101_poolA_beta\" = Freq.y,\n                  \"p101_poolA_umi\" = totalUMICount.y) %&gt;%\n    full_join(p101poolB_beta,by=\"Beta_clonotype\") %&gt;%\n    dplyr::rename(\"p101_poolB_beta\" = Freq,\n                  \"p101_poolB_umi\" = totalUMICount)\n\np101_betas_invitro %&gt;% distinct(Beta_clonotype) %&gt;% dplyr::count()\n\n       n\n1 241961\n\n\nConvert to decimal frequency to %\n\np101_betas_pbmc &lt;- p101_betas_pbmc %&gt;%\n  mutate(p101_pretreatment = p101_pretreatment * 100,\n         p101_postvax = p101_postvax * 100,\n         p101_prevax = p101_prevax * 100)\n\np101_betas_invitro &lt;- p101_betas_invitro %&gt;%\n  mutate(p101_DMSO_beta = p101_DMSO_beta * 100,\n         p101_poolA_beta = p101_poolA_beta * 100,\n         p101_poolB_beta = p101_poolB_beta * 100)\n\nJoin longitudinal and in vitro frequencies by beta chain\n\np101_betas &lt;- full_join(p101_betas_pbmc, p101_betas_invitro)\n\nJoining with `by = join_by(Beta_clonotype)`\n\n\nCalculate fold changes across in vitro samples\n\np101_betas &lt;- p101_betas %&gt;%\n  rowwise() %&gt;%\n  mutate(poolA_vs_dmso_fc = sum(c(p101_poolA_beta, pseudo_freq), na.rm = TRUE)/sum(c(p101_DMSO_beta, pseudo_freq), na.rm = TRUE),\n         poolB_vs_dmso_fc = sum(c(p101_poolB_beta, pseudo_freq), na.rm = TRUE)/sum(c(p101_DMSO_beta, pseudo_freq), na.rm = TRUE)) %&gt;%\n         ungroup() %&gt;%\n  mutate(log2fc_poolA_vs_dmso = log2(poolA_vs_dmso_fc),\n         log2fc_poolB_vs_dmso = log2(poolB_vs_dmso_fc),\n         max_log2fc_pool_vs_dmso = case_when(log2fc_poolA_vs_dmso &gt; log2fc_poolB_vs_dmso ~ log2fc_poolA_vs_dmso,\n                                             log2fc_poolB_vs_dmso &gt;= log2fc_poolA_vs_dmso ~ log2fc_poolB_vs_dmso),\n         max_fc_pool_vs_dmso = case_when(log2fc_poolA_vs_dmso &gt; log2fc_poolB_vs_dmso ~ poolA_vs_dmso_fc,\n                                         log2fc_poolB_vs_dmso &gt;= log2fc_poolA_vs_dmso ~ poolB_vs_dmso_fc))\n\nAttach TCR reactivities to dataframe via the beta clonotype\n\np101_reactive &lt;- reactivity %&gt;%\n  filter(Patient == \"101\")\n\np101_betas &lt;- p101_betas %&gt;%\n  mutate(Reactive = case_when(Beta_clonotype %in% p101_reactive$Beta_clonotype ~ TRUE,\n                              !(Beta_clonotype %in% p101_reactive$Beta_clonotype) ~ FALSE))\n\nSave data\n\nwrite.csv(p101_betas, \"p101_betas_merged_Part1.csv\", row.names = FALSE)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>PBMCs: Compile & Format Data</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part1.html#compile-p103s-data",
    "href": "PBMC_bulkTCR_Part1.html#compile-p103s-data",
    "title": "2  PBMCs: Compile & Format Data",
    "section": "2.5 Compile P103’s data",
    "text": "2.5 Compile P103’s data\nLoad longitudinal frequencies\n\np103_pretreatment_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/103pre-treatment_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\")\n\np103_prevax_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/103pre-vax_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\")\n\np103_postvax_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/103post-vax_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\")\n\np103_w48_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/103wk48_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\") \n\np103_w72_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/103wk72_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\")\n\nAggregate beta chains into one dataframe\n\np103_betas_pbmc &lt;- p103_pretreatment_beta %&gt;%\n  full_join(p103_prevax_beta, by = c(\"v_hit\", \"j_hit\", \"cdr3\")) %&gt;%\n  dplyr::rename(\"p103_pretreatment\" = \"Freq.x\",\n                \"p103_prevax\" = \"Freq.y\",\n                \"p103_pretreatment_umi\" = \"totalUMICount.x\",\n                \"p103_prevax_umi\" = \"totalUMICount.y\") %&gt;%\n  full_join(p103_postvax_beta, by = c(\"v_hit\", \"j_hit\", \"cdr3\")) %&gt;%\n  dplyr::rename(\"p103_postvax\" = \"Freq\",\n                \"p103_postvax_umi\" = \"totalUMICount\") %&gt;% \n  full_join(p103_w48_beta, by = c(\"v_hit\", \"j_hit\", \"cdr3\")) %&gt;%\n  dplyr::rename(\"p103_w48\" = \"Freq\",\n                \"p103_w48_umi\" = \"totalUMICount\") %&gt;% \n  full_join(p103_w72_beta, by = c(\"v_hit\", \"j_hit\", \"cdr3\")) %&gt;%\n  dplyr::rename(\"p103_w72\" = \"Freq\",\n                \"p103_w72_umi\" = \"totalUMICount\") %&gt;% \n  select(\"v_hit\", \"j_hit\", \"cdr3\", \"p103_pretreatment\", \"p103_pretreatment_umi\", \"p103_prevax\", \"p103_prevax_umi\", \"p103_postvax\", \"p103_postvax_umi\", \"p103_w48\", \"p103_w48_umi\", \"p103_w72\", \"p103_w72_umi\") %&gt;%\n  mutate_at(c(\"p103_pretreatment\", \"p103_pretreatment_umi\", \"p103_prevax\", \"p103_prevax_umi\", \"p103_postvax\", \"p103_postvax_umi\", \"p103_w48\", \"p103_w48_umi\", \"p103_w72\", \"p103_w72_umi\"), as.numeric) %&gt;% \n  unite(\"Beta_clonotype\", c(v_hit, j_hit, cdr3), sep = \";\")\n  \n\ndim(p103_betas_pbmc)\n\n[1] 324551     11\n\n\nCalculate fold changes across longitudinal timepoints\n\np103_betas_pbmc &lt;- p103_betas_pbmc %&gt;%\n  mutate(postvax_vs_prevax_fc = p103_postvax/p103_prevax,\n         prevax_vs_pretreatment_fc = p103_prevax/p103_pretreatment,\n         log2fc_postvax_vs_prevax = log2(postvax_vs_prevax_fc),\n         log2fc_prevax_vs_pretreatment = log2(prevax_vs_pretreatment_fc))\n\nLoad in vitro frequencies\n\np103DMSO_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/103-DMSO_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\") %&gt;%\n  unite(\"Beta_clonotype\", c(v_hit,j_hit,cdr3),sep=\";\")\np103poolA_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/103-PoolA_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\") %&gt;%\n  unite(\"Beta_clonotype\", c(v_hit,j_hit,cdr3),sep=\";\")\np103poolB_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/103-PoolB_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\nselect(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\") %&gt;%\n  unite(\"Beta_clonotype\", c(v_hit,j_hit,cdr3),sep=\";\")\n\nAggregate beta chains into one dataframe\n\np103_betas_invitro &lt;- full_join(p103DMSO_beta,p103poolA_beta,by=\"Beta_clonotype\") %&gt;%\n    dplyr::rename(\"p103_DMSO_beta\" = Freq.x, \n                  \"p103_DMSO_umi\" = totalUMICount.x, \n                  \"p103_poolA_beta\" = Freq.y,\n                  \"p103_poolA_umi\" = totalUMICount.y) %&gt;%\n    full_join(p103poolB_beta,by=\"Beta_clonotype\") %&gt;%\n    dplyr::rename(\"p103_poolB_beta\" = Freq,\n                  \"p103_poolB_umi\" = totalUMICount)\n\np103_betas_invitro %&gt;% distinct(Beta_clonotype) %&gt;% dplyr::count()\n\n       n\n1 128158\n\n\nConvert to decimal frequency to %\n\np103_betas_pbmc &lt;- p103_betas_pbmc %&gt;%\n  mutate(p103_pretreatment = p103_pretreatment * 100,\n         p103_postvax = p103_postvax * 100,\n         p103_prevax = p103_prevax * 100,\n         p103_w48 = p103_w48 * 100,\n         p103_w72 = p103_w72 * 100)\n\np103_betas_invitro &lt;- p103_betas_invitro %&gt;%\n  mutate(p103_DMSO_beta = p103_DMSO_beta * 100,\n         p103_poolA_beta = p103_poolA_beta * 100,\n         p103_poolB_beta = p103_poolB_beta * 100)\n\nJoin longitudinal and in vitro frequencies by beta chain\n\np103_betas &lt;- full_join(p103_betas_pbmc, p103_betas_invitro)\n\nJoining with `by = join_by(Beta_clonotype)`\n\n\nCalculate fold changes across in vitro samples\n\np103_betas &lt;- p103_betas %&gt;%\n  rowwise() %&gt;%\n  mutate(poolA_vs_dmso_fc = sum(c(p103_poolA_beta, pseudo_freq), na.rm = TRUE)/sum(c(p103_DMSO_beta, pseudo_freq), na.rm = TRUE),\n         poolB_vs_dmso_fc = sum(c(p103_poolB_beta, pseudo_freq), na.rm = TRUE)/sum(c(p103_DMSO_beta, pseudo_freq), na.rm = TRUE)) %&gt;%\n  ungroup() %&gt;%\n  mutate(log2fc_poolA_vs_dmso = log2(poolA_vs_dmso_fc),\n         log2fc_poolB_vs_dmso = log2(poolB_vs_dmso_fc),\n         max_log2fc_pool_vs_dmso = case_when(log2fc_poolA_vs_dmso &gt; log2fc_poolB_vs_dmso ~ log2fc_poolA_vs_dmso,\n                                             log2fc_poolB_vs_dmso &gt;= log2fc_poolA_vs_dmso ~ log2fc_poolB_vs_dmso),\n         max_fc_pool_vs_dmso = case_when(log2fc_poolA_vs_dmso &gt; log2fc_poolB_vs_dmso ~ poolA_vs_dmso_fc,\n                                         log2fc_poolB_vs_dmso &gt;= log2fc_poolA_vs_dmso ~ poolB_vs_dmso_fc))\n\nAttach TCR reactivities to dataframe via the beta clonotype\n\np103_reactive &lt;- reactivity %&gt;%\n  filter(Patient == \"103\")\n\np103_betas &lt;- p103_betas %&gt;%\n  mutate(Reactive = case_when(Beta_clonotype %in% p103_reactive$Beta_clonotype ~ TRUE,\n                              !(Beta_clonotype %in% p103_reactive$Beta_clonotype) ~ FALSE))\n\nSave data\n\nwrite.csv(p103_betas, \"p103_betas_merged_Part1.csv\", row.names = FALSE)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>PBMCs: Compile & Format Data</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part1.html#compile-p104s-data",
    "href": "PBMC_bulkTCR_Part1.html#compile-p104s-data",
    "title": "2  PBMCs: Compile & Format Data",
    "section": "2.6 Compile P104’s data",
    "text": "2.6 Compile P104’s data\nLoad longitudinal frequencies\n\np104_pretreatment_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/104pre-treament_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\")\n\np104_prevax_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/104pre-vax_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\")\n\np104_postvax_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/104post-vax_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\")\n\np104_w48_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/104wk48_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\")\n\nAggregate beta chains into one dataframe\n\np104_betas_pbmc &lt;- p104_pretreatment_beta %&gt;%\n  full_join(p104_prevax_beta, by = c(\"v_hit\", \"j_hit\", \"cdr3\")) %&gt;%\n  dplyr::rename(\"p104_pretreatment\" = \"Freq.x\",\n                \"p104_prevax\" = \"Freq.y\",\n                \"p104_pretreatment_umi\" = \"totalUMICount.x\",\n                \"p104_prevax_umi\" = \"totalUMICount.y\") %&gt;%\n  full_join(p104_postvax_beta, by = c(\"v_hit\", \"j_hit\", \"cdr3\")) %&gt;%\n  dplyr::rename(\"p104_postvax\" = \"Freq\",\n                \"p104_postvax_umi\" = \"totalUMICount\") %&gt;% \n  full_join(p104_w48_beta, by = c(\"v_hit\", \"j_hit\", \"cdr3\")) %&gt;%\n  dplyr::rename(\"p104_w48\" = \"Freq\",\n                \"p104_w48_umi\" = \"totalUMICount\") %&gt;% \n  select(\"v_hit\", \"j_hit\", \"cdr3\", \"p104_pretreatment\", \"p104_pretreatment_umi\", \"p104_prevax\", \"p104_prevax_umi\", \"p104_postvax\", \"p104_postvax_umi\", \"p104_w48\", \"p104_w48_umi\") %&gt;%\n  mutate_at(c(\"p104_pretreatment\", \"p104_pretreatment_umi\", \"p104_prevax\", \"p104_prevax_umi\", \"p104_postvax\", \"p104_postvax_umi\", \"p104_w48\", \"p104_w48_umi\"), as.numeric) %&gt;% \n  unite(\"Beta_clonotype\", c(v_hit, j_hit, cdr3), sep = \";\")\n\ndim(p104_betas_pbmc)\n\n[1] 747790      9\n\n\nCalculate fold changes across longitudinal timepoints\n\np104_betas_pbmc &lt;- p104_betas_pbmc %&gt;%\n  mutate(postvax_vs_prevax_fc = p104_postvax/p104_prevax,\n         prevax_vs_pretreatment_fc = p104_prevax/p104_pretreatment,\n         log2fc_postvax_vs_prevax = log2(postvax_vs_prevax_fc),\n         log2fc_prevax_vs_pretreatment = log2(prevax_vs_pretreatment_fc))\n\nLoad in vitro frequencies\n\np104DMSO_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/104-DMSO_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\") %&gt;%\n  unite(\"Beta_clonotype\", c(v_hit,j_hit,cdr3),sep=\";\")\np104poolA_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/104-PoolA_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\") %&gt;%\n  unite(\"Beta_clonotype\", c(v_hit,j_hit,cdr3),sep=\";\")\np104poolB_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/104-PoolB_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\") %&gt;%\n  unite(\"Beta_clonotype\", c(v_hit,j_hit,cdr3),sep=\";\")\n\nAggregate beta chains into one dataframe\n\np104_betas_invitro &lt;- full_join(p104DMSO_beta,p104poolA_beta,by=\"Beta_clonotype\") %&gt;%\n    dplyr::rename(\"p104_DMSO_beta\" = Freq.x, \n                  \"p104_DMSO_umi\" = totalUMICount.x, \n                  \"p104_poolA_beta\" = Freq.y,\n                  \"p104_poolA_umi\" = totalUMICount.y) %&gt;%\n    full_join(p104poolB_beta,by=\"Beta_clonotype\") %&gt;%\n    dplyr::rename(\"p104_poolB_beta\" = Freq,\n                  \"p104_poolB_umi\" = totalUMICount)\n\np104_betas_invitro %&gt;% distinct(Beta_clonotype) %&gt;% dplyr::count()\n\n       n\n1 440184\n\n\nConvert to decimal frequency to %\n\np104_betas_pbmc &lt;- p104_betas_pbmc %&gt;%\n  mutate(p104_pretreatment = p104_pretreatment * 100,\n         p104_postvax = p104_postvax * 100,\n         p104_prevax = p104_prevax * 100,\n         p104_w48 = p104_w48 * 100)\n\np104_betas_invitro &lt;- p104_betas_invitro %&gt;%\n  mutate(p104_DMSO_beta = p104_DMSO_beta * 100,\n         p104_poolA_beta = p104_poolA_beta * 100,\n         p104_poolB_beta = p104_poolB_beta * 100)\n\nJoin longitudinal and in vitro frequencies by beta chain\n\np104_betas &lt;- full_join(p104_betas_pbmc, p104_betas_invitro)\n\nJoining with `by = join_by(Beta_clonotype)`\n\n\nCalculate fold changes across in vitro samples\n\np104_betas &lt;- p104_betas %&gt;%\n  rowwise() %&gt;%\n  mutate(poolA_vs_dmso_fc = sum(c(p104_poolA_beta, pseudo_freq), na.rm = TRUE)/sum(c(p104_DMSO_beta, pseudo_freq), na.rm = TRUE),\n         poolB_vs_dmso_fc = sum(c(p104_poolB_beta, pseudo_freq), na.rm = TRUE)/sum(c(p104_DMSO_beta, pseudo_freq), na.rm = TRUE)) %&gt;%\n  ungroup() %&gt;%\n  mutate(log2fc_poolA_vs_dmso = log2(poolA_vs_dmso_fc),\n         log2fc_poolB_vs_dmso = log2(poolB_vs_dmso_fc),\n         max_log2fc_pool_vs_dmso = case_when(log2fc_poolA_vs_dmso &gt; log2fc_poolB_vs_dmso ~ log2fc_poolA_vs_dmso,\n                                             log2fc_poolB_vs_dmso &gt;= log2fc_poolA_vs_dmso ~ log2fc_poolB_vs_dmso),\n         max_fc_pool_vs_dmso = case_when(log2fc_poolA_vs_dmso &gt; log2fc_poolB_vs_dmso ~ poolA_vs_dmso_fc,\n                                         log2fc_poolB_vs_dmso &gt;= log2fc_poolA_vs_dmso ~ poolB_vs_dmso_fc))\n\nAttach TCR reactivities to dataframe via the beta clonotype\n\np104_reactive &lt;- reactivity %&gt;%\n  filter(Patient == \"104\")\n\np104_betas &lt;- p104_betas %&gt;%\n  mutate(Reactive = case_when(Beta_clonotype %in% p104_reactive$Beta_clonotype ~ TRUE,\n                              !(Beta_clonotype %in% p104_reactive$Beta_clonotype) ~ FALSE))\n\nSave data\n\nwrite.csv(p104_betas, \"p104_betas_merged_Part1.csv\", row.names = FALSE)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>PBMCs: Compile & Format Data</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part1.html#compile-p105s-data",
    "href": "PBMC_bulkTCR_Part1.html#compile-p105s-data",
    "title": "2  PBMCs: Compile & Format Data",
    "section": "2.7 Compile P105’s data",
    "text": "2.7 Compile P105’s data\nLoad longitudinal frequencies\n\np105_pretreatment_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/105pre-treament_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\")\n\np105_prevax_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/105pre-vax_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\")\n\np105_postvax_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/105post-vax_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\")\n\np105_W48_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/105wk48_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\")\n\nAggregate beta chains into one dataframe\n\np105_betas_pbmc &lt;- p105_pretreatment_beta %&gt;%\n  full_join(p105_prevax_beta, by = c(\"v_hit\", \"j_hit\", \"cdr3\")) %&gt;%\n  dplyr::rename(\"p105_pretreatment\" = \"Freq.x\",\n                \"p105_prevax\" = \"Freq.y\",\n                \"p105_pretreatment_umi\" = \"totalUMICount.x\",\n                \"p105_prevax_umi\" = \"totalUMICount.y\") %&gt;%\n  full_join(p105_postvax_beta, by = c(\"v_hit\", \"j_hit\", \"cdr3\")) %&gt;%\n  dplyr::rename(\"p105_postvax\" = \"Freq\",\n                \"p105_postvax_umi\" = \"totalUMICount\") %&gt;% \n  full_join(p105_W48_beta, by = c(\"v_hit\", \"j_hit\", \"cdr3\")) %&gt;%\n  dplyr::rename(\"p105_w48\" = \"Freq\",\n                \"p105_w48_umi\" = \"totalUMICount\") %&gt;%\n  select(\"v_hit\", \"j_hit\", \"cdr3\", \"p105_pretreatment\", \"p105_pretreatment_umi\", \"p105_prevax\", \"p105_prevax_umi\", \"p105_postvax\", \"p105_postvax_umi\", \"p105_w48\", \"p105_w48_umi\") %&gt;%\n  mutate_at(c(\"p105_pretreatment\", \"p105_pretreatment_umi\", \"p105_prevax\", \"p105_prevax_umi\", \"p105_postvax\", \"p105_postvax_umi\", \"p105_w48\", \"p105_w48_umi\"), as.numeric) %&gt;% \n  unite(\"Beta_clonotype\", c(v_hit, j_hit, cdr3), sep = \";\")\n\ndim(p105_betas_pbmc)\n\n[1] 465983      9\n\n\nCalculate fold changes across longitudinal timepoints\n\np105_betas_pbmc &lt;- p105_betas_pbmc %&gt;%\n  mutate(postvax_vs_prevax_fc = p105_postvax/p105_prevax,\n         prevax_vs_pretreatment_fc = p105_prevax/p105_pretreatment,\n         log2fc_postvax_vs_prevax = log2(postvax_vs_prevax_fc),\n         log2fc_prevax_vs_pretreatment = log2(prevax_vs_pretreatment_fc))\n\nLoad in vitro frequencies\n\np105DMSO_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/105-DMSO_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\") %&gt;%\n  unite(\"Beta_clonotype\", c(v_hit,j_hit,cdr3),sep=\";\")\np105poolA_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/105-PoolA_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\") %&gt;%\n  unite(\"Beta_clonotype\", c(v_hit,j_hit,cdr3),sep=\";\")\np105poolB_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/105-PoolB_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\") %&gt;%\n  unite(\"Beta_clonotype\", c(v_hit,j_hit,cdr3),sep=\";\")\n\nAggregate beta chains into one dataframe\n\np105_betas_invitro &lt;- full_join(p105DMSO_beta,p105poolA_beta,by=\"Beta_clonotype\") %&gt;%\n    dplyr::rename(\"p105_DMSO_beta\" = Freq.x, \n                  \"p105_DMSO_umi\" = totalUMICount.x, \n                  \"p105_poolA_beta\" = Freq.y,\n                  \"p105_poolA_umi\" = totalUMICount.y) %&gt;%\n    full_join(p105poolB_beta,by=\"Beta_clonotype\") %&gt;%\n    dplyr::rename(\"p105_poolB_beta\" = Freq,\n                  \"p105_poolB_umi\" = totalUMICount)\n\np105_betas_invitro %&gt;% distinct(Beta_clonotype) %&gt;% dplyr::count()\n\n       n\n1 182772\n\n\nConvert to decimal frequency to %\n\np105_betas_pbmc &lt;- p105_betas_pbmc %&gt;%\n  mutate(p105_pretreatment = p105_pretreatment * 100,\n         p105_postvax = p105_postvax * 100,\n         p105_prevax = p105_prevax * 100,\n         p105_w48 = p105_w48 * 100)\n\np105_betas_invitro &lt;- p105_betas_invitro %&gt;%\n  mutate(p105_DMSO_beta = p105_DMSO_beta * 100,\n         p105_poolA_beta = p105_poolA_beta * 100,\n         p105_poolB_beta = p105_poolB_beta * 100)\n\nJoin longitudinal and in vitro frequencies by beta chain\n\np105_betas &lt;- full_join(p105_betas_pbmc, p105_betas_invitro)\n\nJoining with `by = join_by(Beta_clonotype)`\n\n\nCalculate fold changes across in vitro samples\n\np105_betas &lt;- p105_betas %&gt;%\n  rowwise() %&gt;%\n  mutate(poolA_vs_dmso_fc = sum(c(p105_poolA_beta, pseudo_freq), na.rm = TRUE)/sum(c(p105_DMSO_beta, pseudo_freq), na.rm = TRUE),\n         poolB_vs_dmso_fc = sum(c(p105_poolB_beta, pseudo_freq), na.rm = TRUE)/sum(c(p105_DMSO_beta, pseudo_freq), na.rm = TRUE)) %&gt;%\n  ungroup() %&gt;%\n  mutate(log2fc_poolA_vs_dmso = log2(poolA_vs_dmso_fc),\n         log2fc_poolB_vs_dmso = log2(poolB_vs_dmso_fc),\n         max_log2fc_pool_vs_dmso = case_when(log2fc_poolA_vs_dmso &gt; log2fc_poolB_vs_dmso ~ log2fc_poolA_vs_dmso,\n                                             log2fc_poolB_vs_dmso &gt;= log2fc_poolA_vs_dmso ~ log2fc_poolB_vs_dmso),\n         max_fc_pool_vs_dmso = case_when(log2fc_poolA_vs_dmso &gt; log2fc_poolB_vs_dmso ~ poolA_vs_dmso_fc,\n                                         log2fc_poolB_vs_dmso &gt;= log2fc_poolA_vs_dmso ~ poolB_vs_dmso_fc))\n\nSave data\n\nwrite.csv(p105_betas, \"p105_betas_merged_Part1.csv\", row.names = FALSE)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>PBMCs: Compile & Format Data</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part1.html#compile-p106s-data",
    "href": "PBMC_bulkTCR_Part1.html#compile-p106s-data",
    "title": "2  PBMCs: Compile & Format Data",
    "section": "2.8 Compile P106’s data",
    "text": "2.8 Compile P106’s data\nLoad longitudinal frequencies\n\np106_pretreatment_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/106pre-treament_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\")\n\np106_prevax_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/106pre-vax_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\")\n\np106_postvax_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/106post-vax_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\")\n\np106_w48_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/106wk48_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\")\n\nAggregate beta chains into one dataframe\n\np106_betas_pbmc &lt;- p106_pretreatment_beta %&gt;%\n  full_join(p106_prevax_beta, by = c(\"v_hit\", \"j_hit\", \"cdr3\")) %&gt;%\n  dplyr::rename(\"p106_pretreatment\" = \"Freq.x\",\n                \"p106_prevax\" = \"Freq.y\",\n                \"p106_pretreatment_umi\" = \"totalUMICount.x\",\n                \"p106_prevax_umi\" = \"totalUMICount.y\") %&gt;%\n  full_join(p106_postvax_beta, by = c(\"v_hit\", \"j_hit\", \"cdr3\")) %&gt;%\n  dplyr::rename(\"p106_postvax\" = \"Freq\",\n                \"p106_postvax_umi\" = \"totalUMICount\") %&gt;% \n  full_join(p106_w48_beta, by = c(\"v_hit\", \"j_hit\", \"cdr3\")) %&gt;%\n  dplyr::rename(\"p106_w48\" = \"Freq\",\n                \"p106_w48_umi\" = \"totalUMICount\") %&gt;% \n  select(\"v_hit\", \"j_hit\", \"cdr3\", \"p106_pretreatment\", \"p106_pretreatment_umi\", \"p106_prevax\", \"p106_prevax_umi\", \"p106_postvax\", \"p106_postvax_umi\", \"p106_w48\", \"p106_w48_umi\") %&gt;%\n  mutate_at(c(\"p106_pretreatment\", \"p106_pretreatment_umi\", \"p106_prevax\", \"p106_prevax_umi\", \"p106_postvax\", \"p106_postvax_umi\", \"p106_w48\", \"p106_w48_umi\"), as.numeric) %&gt;% \n  unite(\"Beta_clonotype\", c(v_hit, j_hit, cdr3), sep = \";\")\n  \n\ndim(p106_betas_pbmc)\n\n[1] 662674      9\n\n\nCalculate fold changes across longitudinal timepoints\n\np106_betas_pbmc &lt;- p106_betas_pbmc %&gt;%\n  mutate(postvax_vs_prevax_fc = p106_postvax/p106_prevax,\n         prevax_vs_pretreatment_fc = p106_prevax/p106_pretreatment,\n         log2fc_postvax_vs_prevax = log2(postvax_vs_prevax_fc),\n         log2fc_prevax_vs_pretreatment = log2(prevax_vs_pretreatment_fc))\n\nLoad in vitro frequencies\n\np106DMSO_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/106-DMSO_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\") %&gt;%\n  unite(\"Beta_clonotype\", c(v_hit,j_hit,cdr3),sep=\";\")\np106poolA_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/106-PoolA_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\") %&gt;%\n  unite(\"Beta_clonotype\", c(v_hit,j_hit,cdr3),sep=\";\")\np106poolB_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/106-PoolB_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\") %&gt;%\n  unite(\"Beta_clonotype\", c(v_hit,j_hit,cdr3),sep=\";\")\n\nAggregate beta chains into one dataframe\n\np106_betas_invitro &lt;- full_join(p106DMSO_beta,p106poolA_beta,by=\"Beta_clonotype\") %&gt;%\n    dplyr::rename(\"p106_DMSO_beta\" = Freq.x, \n                  \"p106_DMSO_umi\" = totalUMICount.x, \n                  \"p106_poolA_beta\" = Freq.y,\n                  \"p106_poolA_umi\" = totalUMICount.y) %&gt;%\n    full_join(p106poolB_beta,by=\"Beta_clonotype\") %&gt;%\n    dplyr::rename(\"p106_poolB_beta\" = Freq,\n                  \"p106_poolB_umi\" = totalUMICount)\n\np106_betas_invitro %&gt;% distinct(Beta_clonotype) %&gt;% dplyr::count()\n\n       n\n1 341472\n\n\nConvert to decimal frequency to %\n\np106_betas_pbmc &lt;- p106_betas_pbmc %&gt;%\n  mutate(p106_pretreatment = p106_pretreatment * 100,\n         p106_postvax = p106_postvax * 100,\n         p106_prevax = p106_prevax * 100,\n         p106_w48 = p106_w48 * 100)\n\np106_betas_invitro &lt;- p106_betas_invitro %&gt;%\n  mutate(p106_DMSO_beta = p106_DMSO_beta * 100,\n         p106_poolA_beta = p106_poolA_beta * 100,\n         p106_poolB_beta = p106_poolB_beta * 100)\n\nJoin longitudinal and in vitro frequencies by beta chain\n\np106_betas &lt;- full_join(p106_betas_pbmc, p106_betas_invitro)\n\nJoining with `by = join_by(Beta_clonotype)`\n\n\nCalculate fold changes across in vitro samples\n\np106_betas &lt;- p106_betas %&gt;%\n  rowwise() %&gt;%\n  mutate(poolA_vs_dmso_fc = sum(c(p106_poolA_beta, pseudo_freq), na.rm = TRUE)/sum(c(p106_DMSO_beta, pseudo_freq), na.rm = TRUE),\n         poolB_vs_dmso_fc = sum(c(p106_poolB_beta, pseudo_freq), na.rm = TRUE)/sum(c(p106_DMSO_beta, pseudo_freq), na.rm = TRUE)) %&gt;%\n  ungroup() %&gt;%\n  mutate(log2fc_poolA_vs_dmso = log2(poolA_vs_dmso_fc),\n         log2fc_poolB_vs_dmso = log2(poolB_vs_dmso_fc),\n         max_log2fc_pool_vs_dmso = case_when(log2fc_poolA_vs_dmso &gt; log2fc_poolB_vs_dmso ~ log2fc_poolA_vs_dmso,\n                                             log2fc_poolB_vs_dmso &gt;= log2fc_poolA_vs_dmso ~ log2fc_poolB_vs_dmso),\n         max_fc_pool_vs_dmso = case_when(log2fc_poolA_vs_dmso &gt; log2fc_poolB_vs_dmso ~ poolA_vs_dmso_fc,\n                                         log2fc_poolB_vs_dmso &gt;= log2fc_poolA_vs_dmso ~ poolB_vs_dmso_fc))\n\nSave data\n\nwrite.csv(p106_betas, \"p106_betas_merged_Part1.csv\", row.names = FALSE)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>PBMCs: Compile & Format Data</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part1.html#compile-p108s-data",
    "href": "PBMC_bulkTCR_Part1.html#compile-p108s-data",
    "title": "2  PBMCs: Compile & Format Data",
    "section": "2.9 Compile P108’s data",
    "text": "2.9 Compile P108’s data\nLoad longitudinal frequencies\n\np108_pretreatment_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/108pre-treatment_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\")\n\np108_prevax_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/108pre-vaccine_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\")\n\np108_postvax_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/108post-vaccine_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\")\n\np108_w32_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/108-Wk32d1_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\")\n\nAggregate beta chains into one dataframe\n\np108_betas_pbmc &lt;- p108_pretreatment_beta %&gt;%\n  full_join(p108_prevax_beta, by = c(\"v_hit\", \"j_hit\", \"cdr3\")) %&gt;%\n  dplyr::rename(\"p108_pretreatment\" = \"Freq.x\",\n                \"p108_prevax\" = \"Freq.y\",\n                \"p108_pretreatment_umi\" = \"totalUMICount.x\",\n                \"p108_prevax_umi\" = \"totalUMICount.y\"\n                ) %&gt;%\n  full_join(p108_postvax_beta, by = c(\"v_hit\", \"j_hit\", \"cdr3\")) %&gt;%\n  dplyr::rename(\"p108_postvax\" = \"Freq\",\n                \"p108_postvax_umi\" = \"totalUMICount\") %&gt;% \n  full_join(p108_w32_beta, by = c(\"v_hit\", \"j_hit\", \"cdr3\")) %&gt;%\n  dplyr::rename(\"p108_w32\" = \"Freq\",\n                \"p108_w32_umi\" = \"totalUMICount\") %&gt;% \n  select(\"v_hit\", \"j_hit\", \"cdr3\", \"p108_pretreatment\", \"p108_pretreatment_umi\", \"p108_prevax\", \"p108_prevax_umi\", \"p108_postvax\", \"p108_postvax_umi\", \"p108_w32\", \"p108_w32_umi\") %&gt;%\n  mutate_at(c(\"p108_pretreatment\", \"p108_pretreatment_umi\", \"p108_prevax\", \"p108_prevax_umi\", \"p108_postvax\", \"p108_postvax_umi\", \"p108_w32\", \"p108_w32_umi\"), as.numeric) %&gt;% \n  unite(\"Beta_clonotype\", c(v_hit, j_hit, cdr3), sep = \";\")\n\n  \ndim(p108_betas_pbmc)\n\n[1] 674885      9\n\n\nCalculate fold changes across longitudinal timepoints\n\np108_betas_pbmc &lt;- p108_betas_pbmc %&gt;%\n  mutate(postvax_vs_prevax_fc = p108_postvax/p108_prevax,\n         prevax_vs_pretreatment_fc = p108_prevax/p108_pretreatment,\n         log2fc_postvax_vs_prevax = log2(postvax_vs_prevax_fc),\n         log2fc_prevax_vs_pretreatment = log2(prevax_vs_pretreatment_fc))\n\nLoad in vitro frequencies\n\np108DMSO_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/108-DMSO_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\") %&gt;%\n  unite(\"Beta_clonotype\", c(v_hit,j_hit,cdr3),sep=\";\")\np108poolA_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/108-PoolA-B_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\") %&gt;%\n  unite(\"Beta_clonotype\", c(v_hit,j_hit,cdr3),sep=\";\")\np108poolB_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/108-PoolB_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\") %&gt;%\n  unite(\"Beta_clonotype\", c(v_hit,j_hit,cdr3),sep=\";\")\n\nAggregate beta chains into one dataframe\n\np108_betas_invitro &lt;- full_join(p108DMSO_beta,p108poolA_beta,by=\"Beta_clonotype\") %&gt;%\n    dplyr::rename(\"p108_DMSO_beta\" = Freq.x,\n                  \"p108_DMSO_umi\" = totalUMICount.x, \n                  \"p108_poolA_beta\" = Freq.y,\n                  \"p108_poolA_umi\" = totalUMICount.y) %&gt;%\n    full_join(p108poolB_beta,by=\"Beta_clonotype\") %&gt;%\n    dplyr::rename(\"p108_poolB_beta\" = Freq,\n                  \"p106_poolB_umi\" = totalUMICount)\n\np108_betas_invitro %&gt;% distinct(Beta_clonotype) %&gt;% dplyr::count()\n\n       n\n1 315151\n\n\nConvert to decimal frequency to %\n\np108_betas_pbmc &lt;- p108_betas_pbmc %&gt;%\n  mutate(p108_pretreatment = p108_pretreatment * 100,\n         p108_postvax = p108_postvax * 100,\n         p108_prevax = p108_prevax * 100,\n         p108_w32 = p108_w32 * 100)\n\np108_betas_invitro &lt;- p108_betas_invitro %&gt;%\n  mutate(p108_DMSO_beta = p108_DMSO_beta * 100,\n         p108_poolA_beta = p108_poolA_beta * 100,\n         p108_poolB_beta = p108_poolB_beta * 100)\n\nJoin longitudinal and in vitro frequencies by beta chain\n\np108_betas &lt;- full_join(p108_betas_pbmc, p108_betas_invitro)\n\nJoining with `by = join_by(Beta_clonotype)`\n\n\nCalculate fold changes across in vitro samples\n\np108_betas &lt;- p108_betas %&gt;%\n  rowwise() %&gt;%\n  mutate(poolA_vs_dmso_fc = sum(c(p108_poolA_beta, pseudo_freq), na.rm = TRUE)/sum(c(p108_DMSO_beta, pseudo_freq), na.rm = TRUE),\n         poolB_vs_dmso_fc = sum(c(p108_poolB_beta, pseudo_freq), na.rm = TRUE)/sum(c(p108_DMSO_beta, pseudo_freq), na.rm = TRUE)) %&gt;%\n  ungroup() %&gt;%\n  mutate(log2fc_poolA_vs_dmso = log2(poolA_vs_dmso_fc),\n         log2fc_poolB_vs_dmso = log2(poolB_vs_dmso_fc),\n         max_log2fc_pool_vs_dmso = case_when(log2fc_poolA_vs_dmso &gt; log2fc_poolB_vs_dmso ~ log2fc_poolA_vs_dmso,\n                                             log2fc_poolB_vs_dmso &gt;= log2fc_poolA_vs_dmso ~ log2fc_poolB_vs_dmso),\n         max_fc_pool_vs_dmso = case_when(log2fc_poolA_vs_dmso &gt; log2fc_poolB_vs_dmso ~ poolA_vs_dmso_fc,\n                                         log2fc_poolB_vs_dmso &gt;= log2fc_poolA_vs_dmso ~ poolB_vs_dmso_fc))\n\nAttach TCR reactivities to dataframe via the beta clonotype\n\np108_reactive &lt;- reactivity %&gt;%\n  filter(Patient == \"108\")\n\np108_betas &lt;- p108_betas %&gt;%\n  mutate(Reactive = case_when(Beta_clonotype %in% p108_reactive$Beta_clonotype ~ TRUE,\n                              !(Beta_clonotype %in% p108_reactive$Beta_clonotype) ~ FALSE))\n\nSave data\n\nwrite.csv(p108_betas, \"p108_betas_merged_Part1.csv\", row.names = FALSE)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>PBMCs: Compile & Format Data</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part1.html#compile-p109s-data",
    "href": "PBMC_bulkTCR_Part1.html#compile-p109s-data",
    "title": "2  PBMCs: Compile & Format Data",
    "section": "2.10 Compile P109’s data",
    "text": "2.10 Compile P109’s data\nLoad longitudinal frequencies\n\np109_pretreatment_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/109pre-treament_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\")\n\np109_prevax_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/109pre-vax_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\")\n\np109_postvax_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/109post-vax_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\")\n\np109_w48_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/109wk48_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\")\n\nAggregate beta chains into one dataframe\n\np109_betas_pbmc &lt;- p109_pretreatment_beta %&gt;%\n  full_join(p109_prevax_beta, by = c(\"v_hit\", \"j_hit\", \"cdr3\")) %&gt;%\n  dplyr::rename(\"p109_pretreatment\" = \"Freq.x\",\n                \"p109_prevax\" = \"Freq.y\",\n                \"p109_pretreatment_umi\" = \"totalUMICount.x\",\n                \"p109_prevax_umi\" = \"totalUMICount.y\") %&gt;%\n  full_join(p109_postvax_beta, by = c(\"v_hit\", \"j_hit\", \"cdr3\")) %&gt;%\n  dplyr::rename(\"p109_postvax\" = \"Freq\",\n                \"p109_postvax_umi\" = \"totalUMICount\") %&gt;% \n  full_join(p109_w48_beta, by = c(\"v_hit\", \"j_hit\", \"cdr3\")) %&gt;%\n  dplyr::rename(\"p109_w48\" = \"Freq\",\n                \"p109_w48_umi\" = \"totalUMICount\") %&gt;% \n  select(\"v_hit\", \"j_hit\", \"cdr3\", \"p109_pretreatment\", \"p109_pretreatment_umi\", \"p109_prevax\", \"p109_prevax_umi\", \"p109_postvax\", \"p109_postvax_umi\", \"p109_w48\", \"p109_w48_umi\") %&gt;%\n  mutate_at(c(\"p109_pretreatment\", \"p109_pretreatment_umi\", \"p109_prevax\", \"p109_prevax_umi\", \"p109_postvax\", \"p109_postvax_umi\", \"p109_w48\", \"p109_w48_umi\"), as.numeric) %&gt;% \n  unite(\"Beta_clonotype\", c(v_hit, j_hit, cdr3), sep = \";\")\n\ndim(p109_betas_pbmc)\n\n[1] 680233      9\n\n\nCalculate fold changes across longitudinal timepoints\n\np109_betas_pbmc &lt;- p109_betas_pbmc %&gt;%\n  mutate(postvax_vs_prevax_fc = p109_postvax/p109_prevax,\n         prevax_vs_pretreatment_fc = p109_prevax/p109_pretreatment,\n         log2fc_postvax_vs_prevax = log2(postvax_vs_prevax_fc),\n         log2fc_prevax_vs_pretreatment = log2(prevax_vs_pretreatment_fc))\n\nLoad in vitro frequencies\n\np109DMSO_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/18279-109DMSO_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\") %&gt;%\n  unite(\"Beta_clonotype\", c(v_hit,j_hit,cdr3),sep=\";\")\np109poolA_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/18279-109PoolA_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\") %&gt;%\n  unite(\"Beta_clonotype\", c(v_hit,j_hit,cdr3),sep=\";\")\np109poolB_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/18279-109PoolB_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\") %&gt;%\n  unite(\"Beta_clonotype\", c(v_hit,j_hit,cdr3),sep=\";\")\n\nAggregate beta chains into one dataframe\n\np109_betas_invitro &lt;- full_join(p109DMSO_beta,p109poolA_beta,by=\"Beta_clonotype\") %&gt;%\n    dplyr::rename(\"p109_DMSO_beta\" = Freq.x, \n                  \"p109_poolA_beta\" = Freq.y,\n                  \"p109_DMSO_umi\" = totalUMICount.x,\n                  \"p109_poolA_umi\" = totalUMICount.y) %&gt;%\n    full_join(p109poolB_beta,by=\"Beta_clonotype\") %&gt;%\n    dplyr::rename(\"p109_poolB_beta\" = Freq,\n                  \"p109_poolB_umi\" = totalUMICount)\n\np109_betas_invitro %&gt;% distinct(Beta_clonotype) %&gt;% dplyr::count()\n\n        n\n1 1078940\n\n\nConvert to decimal frequency to %\n\np109_betas_pbmc &lt;- p109_betas_pbmc %&gt;%\n  mutate(p109_pretreatment = p109_pretreatment * 100,\n         p109_postvax = p109_postvax * 100,\n         p109_prevax = p109_prevax * 100,\n         p109_w48 = p109_w48 * 100)\n\np109_betas_invitro &lt;- p109_betas_invitro %&gt;%\n  mutate(p109_DMSO_beta = p109_DMSO_beta * 100,\n         p109_poolA_beta = p109_poolA_beta * 100,\n         p109_poolB_beta = p109_poolB_beta * 100)\n\nJoin longitudinal and in vitro frequencies by beta chain\n\np109_betas &lt;- full_join(p109_betas_pbmc, p109_betas_invitro)\n\nJoining with `by = join_by(Beta_clonotype)`\n\n\nCalculate fold changes across in vitro samples\n\np109_betas &lt;- p109_betas %&gt;%\n  rowwise() %&gt;%\n  mutate(poolA_vs_dmso_fc = sum(c(p109_poolA_beta, pseudo_freq), na.rm = TRUE)/sum(c(p109_DMSO_beta, pseudo_freq), na.rm = TRUE),\n         poolB_vs_dmso_fc = sum(c(p109_poolB_beta, pseudo_freq), na.rm = TRUE)/sum(c(p109_DMSO_beta, pseudo_freq), na.rm = TRUE)) %&gt;%\n  ungroup() %&gt;%\n  mutate(log2fc_poolA_vs_dmso = log2(poolA_vs_dmso_fc),\n         log2fc_poolB_vs_dmso = log2(poolB_vs_dmso_fc),\n         max_log2fc_pool_vs_dmso = case_when(log2fc_poolA_vs_dmso &gt; log2fc_poolB_vs_dmso ~ log2fc_poolA_vs_dmso,\n                                             log2fc_poolB_vs_dmso &gt;= log2fc_poolA_vs_dmso ~ log2fc_poolB_vs_dmso),\n         max_fc_pool_vs_dmso = case_when(log2fc_poolA_vs_dmso &gt; log2fc_poolB_vs_dmso ~ poolA_vs_dmso_fc,\n                                         log2fc_poolB_vs_dmso &gt;= log2fc_poolA_vs_dmso ~ poolB_vs_dmso_fc))\n\nSave data\n\nwrite.csv(p109_betas, \"p109_betas_merged_Part1.csv\", row.names = FALSE)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>PBMCs: Compile & Format Data</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part1.html#compile-p110s-data",
    "href": "PBMC_bulkTCR_Part1.html#compile-p110s-data",
    "title": "2  PBMCs: Compile & Format Data",
    "section": "2.11 Compile P110’s data",
    "text": "2.11 Compile P110’s data\nLoad longitudinal frequencies\n\np110_pretreatment_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/110pre-treat_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\")\n\np110_prevax_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/110pre-vax_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\")\n\np110_postvax_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/110post-vax_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\")\n\np110_w38_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/110wk38_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\")\n\nAggregate beta chains into one dataframe\n\np110_betas_pbmc &lt;- p110_pretreatment_beta %&gt;%\n  full_join(p110_prevax_beta, by = c(\"v_hit\", \"j_hit\", \"cdr3\")) %&gt;%\n  dplyr::rename(\"p110_pretreatment\" = \"Freq.x\",\n                \"p110_prevax\" = \"Freq.y\",\n                \"p110_pretreatment_umi\" = \"totalUMICount.x\",\n                \"p110_prevax_umi\" = \"totalUMICount.y\") %&gt;%\n  full_join(p110_postvax_beta, by = c(\"v_hit\", \"j_hit\", \"cdr3\")) %&gt;%\n  dplyr::rename(\"p110_postvax\" = \"Freq\",\n                \"p110_postvax_umi\" = \"totalUMICount\") %&gt;% \n  full_join(p110_w38_beta, by = c(\"v_hit\", \"j_hit\", \"cdr3\")) %&gt;%\n  dplyr::rename(\"p110_w38\" = \"Freq\",\n                \"p110_w38_umi\" = \"totalUMICount\") %&gt;% \n  select(\"v_hit\", \"j_hit\", \"cdr3\", \"p110_pretreatment\", \"p110_pretreatment_umi\", \"p110_prevax\", \"p110_prevax_umi\", \"p110_postvax\", \"p110_postvax_umi\", \"p110_w38\", \"p110_w38_umi\") %&gt;%\n  mutate_at(c(\"p110_pretreatment\", \"p110_pretreatment_umi\", \"p110_prevax\", \"p110_prevax_umi\", \"p110_postvax\", \"p110_postvax_umi\", \"p110_w38\", \"p110_w38_umi\"), as.numeric) %&gt;% \n  unite(\"Beta_clonotype\", c(v_hit, j_hit, cdr3), sep = \";\")\n\ndim(p110_betas_pbmc)\n\n[1] 744561      9\n\n\nCalculate fold changes across longitudinal timepoints\n\np110_betas_pbmc &lt;- p110_betas_pbmc %&gt;%\n  mutate(postvax_vs_prevax_fc = p110_postvax/p110_prevax,\n         prevax_vs_pretreatment_fc = p110_prevax/p110_pretreatment,\n         log2fc_postvax_vs_prevax = log2(postvax_vs_prevax_fc),\n         log2fc_prevax_vs_pretreatment = log2(prevax_vs_pretreatment_fc))\n\nLoad in vitro frequencies\n\np110DMSO_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/110DMSO_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\") %&gt;%\n  unite(\"Beta_clonotype\", c(v_hit,j_hit,cdr3),sep=\";\")\np110poolA_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/110PoolA_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\") %&gt;%\n  unite(\"Beta_clonotype\", c(v_hit,j_hit,cdr3),sep=\";\")\np110poolB_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/110PoolB_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\") %&gt;%\n  unite(\"Beta_clonotype\", c(v_hit,j_hit,cdr3),sep=\";\")\n\nAggregate beta chains into one dataframe\n\np110_betas_invitro &lt;- full_join(p110DMSO_beta,p110poolA_beta,by=\"Beta_clonotype\") %&gt;%\n    dplyr::rename(\"p110_DMSO_beta\" = Freq.x, \n                  \"p110_poolA_beta\" = Freq.y,\n                  \"p110_DMSO_umi\" = totalUMICount.x,\n                  \"p110_poolA_umi\" = totalUMICount.y) %&gt;%\n    full_join(p110poolB_beta,by=\"Beta_clonotype\") %&gt;%\n    dplyr::rename(\"p110_poolB_beta\" = Freq,\n                  \"p110_poolB_umi\" = totalUMICount)\n\np110_betas_invitro %&gt;% distinct(Beta_clonotype) %&gt;% dplyr::count()\n\n       n\n1 416916\n\n\nConvert to decimal frequency to %\n\np110_betas_pbmc &lt;- p110_betas_pbmc %&gt;%\n  mutate(p110_pretreatment = p110_pretreatment * 100,\n         p110_postvax = p110_postvax * 100,\n         p110_prevax = p110_prevax * 100,\n         p110_w38 = p110_w38 * 100)\n\np110_betas_invitro &lt;- p110_betas_invitro %&gt;%\n  mutate(p110_DMSO_beta = p110_DMSO_beta * 100,\n         p110_poolA_beta = p110_poolA_beta * 100,\n         p110_poolB_beta = p110_poolB_beta * 100)\n\nJoin longitudinal and in vitro frequencies by beta chain\n\np110_betas &lt;- full_join(p110_betas_pbmc, p110_betas_invitro)\n\nJoining with `by = join_by(Beta_clonotype)`\n\n\nCalculate fold changes across in vitro samples\n\np110_betas &lt;- p110_betas %&gt;%\n  rowwise() %&gt;%\n  mutate(poolA_vs_dmso_fc = sum(c(p110_poolA_beta, pseudo_freq), na.rm = TRUE)/sum(c(p110_DMSO_beta, pseudo_freq), na.rm = TRUE),\n         poolB_vs_dmso_fc = sum(c(p110_poolB_beta, pseudo_freq), na.rm = TRUE)/sum(c(p110_DMSO_beta, pseudo_freq), na.rm = TRUE)) %&gt;%\n  ungroup() %&gt;%\n  mutate(log2fc_poolA_vs_dmso = log2(poolA_vs_dmso_fc),\n         log2fc_poolB_vs_dmso = log2(poolB_vs_dmso_fc),\n         max_log2fc_pool_vs_dmso = case_when(log2fc_poolA_vs_dmso &gt; log2fc_poolB_vs_dmso ~ log2fc_poolA_vs_dmso,\n                                             log2fc_poolB_vs_dmso &gt;= log2fc_poolA_vs_dmso ~ log2fc_poolB_vs_dmso),\n         max_fc_pool_vs_dmso = case_when(log2fc_poolA_vs_dmso &gt; log2fc_poolB_vs_dmso ~ poolA_vs_dmso_fc,\n                                         log2fc_poolB_vs_dmso &gt;= log2fc_poolA_vs_dmso ~ poolB_vs_dmso_fc))\n\nSave data\n\nwrite.csv(p110_betas, \"p110_betas_merged_Part1.csv\", row.names = FALSE)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>PBMCs: Compile & Format Data</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part1.html#compile-p111s-data",
    "href": "PBMC_bulkTCR_Part1.html#compile-p111s-data",
    "title": "2  PBMCs: Compile & Format Data",
    "section": "2.12 Compile P111’s data",
    "text": "2.12 Compile P111’s data\nLoad longitudinal frequencies\n\np111_pretreatment_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/111pre-treat_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\")\n\np111_prevax_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/111pre-vax_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\")\n\np111_postvax_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/111post-vax_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\")\n\np111_w40_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/111wk40_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\")\n\nAggregate beta chains into one dataframe\n\np111_betas_pbmc &lt;- p111_pretreatment_beta %&gt;%\n  full_join(p111_prevax_beta, by = c(\"v_hit\", \"j_hit\", \"cdr3\")) %&gt;%\n  dplyr::rename(\"p111_pretreatment\" = \"Freq.x\",\n                \"p111_prevax\" = \"Freq.y\",\n                \"p111_pretreatment_umi\" = \"totalUMICount.x\",\n                \"p111_prevax_umi\" = \"totalUMICount.y\") %&gt;%\n  full_join(p111_postvax_beta, by = c(\"v_hit\", \"j_hit\", \"cdr3\")) %&gt;%\n  dplyr::rename(\"p111_postvax\" = \"Freq\",\n                \"p111_postvax_umi\" = \"totalUMICount\") %&gt;% \n  full_join(p111_w40_beta, by = c(\"v_hit\", \"j_hit\", \"cdr3\")) %&gt;%\n  dplyr::rename(\"p111_w40\" = \"Freq\",\n                \"p111_w40_umi\" = \"totalUMICount\") %&gt;% \n  select(\"v_hit\", \"j_hit\", \"cdr3\", \"p111_pretreatment\", \"p111_pretreatment_umi\", \"p111_prevax\", \"p111_prevax_umi\", \"p111_postvax\", \"p111_postvax_umi\", \"p111_w40\", \"p111_w40_umi\") %&gt;%\n  mutate_at(c(\"p111_pretreatment\", \"p111_pretreatment_umi\", \"p111_prevax\", \"p111_prevax_umi\", \"p111_postvax\", \"p111_postvax_umi\", \"p111_w40\", \"p111_w40_umi\"), as.numeric) %&gt;% \n  unite(\"Beta_clonotype\", c(v_hit, j_hit, cdr3), sep = \";\")\n  \ndim(p111_betas_pbmc)\n\n[1] 607386      9\n\n\nCalculate fold changes across longitudinal timepoints\n\np111_betas_pbmc &lt;- p111_betas_pbmc %&gt;%\n  mutate(postvax_vs_prevax_fc = p111_postvax/p111_prevax,\n         prevax_vs_pretreatment_fc = p111_prevax/p111_pretreatment,\n         log2fc_postvax_vs_prevax = log2(postvax_vs_prevax_fc),\n         log2fc_prevax_vs_pretreatment = log2(prevax_vs_pretreatment_fc))\n\nLoad in vitro frequencies\n\np111DMSO_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/111-DMSO_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\") %&gt;%\n  unite(\"Beta_clonotype\", c(v_hit,j_hit,cdr3),sep=\";\")\np111poolA_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/111-PoolA_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\") %&gt;%\n  unite(\"Beta_clonotype\", c(v_hit,j_hit,cdr3),sep=\";\")\np111poolB_beta &lt;- read.csv(\"/jsimonlab/projects/Wu/Melanoma_bulkTCR_Eryn/mixcr_processed_031324/Eryn_bulkrhTCR/111-PoolB_TRB_report.tsv\", sep = \"\\t\", row.names = 1) %&gt;%\n  select(aaSeqCDR3, vGene, jGene, totalUMICount, Freq) %&gt;%\n  dplyr::rename(\"cdr3\" = \"aaSeqCDR3\", \"v_hit\" = \"vGene\", \"j_hit\" = \"jGene\") %&gt;%\n  unite(\"Beta_clonotype\", c(v_hit,j_hit,cdr3),sep=\";\")\n\nAggregate beta chains into one dataframe\n\np111_betas_invitro &lt;- full_join(p111DMSO_beta,p111poolA_beta,by=\"Beta_clonotype\") %&gt;%\n    dplyr::rename(\"p111_DMSO_beta\" = Freq.x,\n                  \"p111_poolA_beta\" = Freq.y,\n                  \"p111_DMSO_umi\" = totalUMICount.x,\n                  \"p111_poolA_umi\" = totalUMICount.y) %&gt;%\n    full_join(p111poolB_beta,by=\"Beta_clonotype\") %&gt;%\n    dplyr::rename(\"p111_poolB_beta\" = Freq,\n                  \"p111_poolB_umi\" = totalUMICount)\n\np111_betas_invitro %&gt;% distinct(Beta_clonotype) %&gt;% dplyr::count()\n\n       n\n1 288082\n\n\nConvert to decimal frequency to %\n\np111_betas_pbmc &lt;- p111_betas_pbmc %&gt;%\n  mutate(p111_pretreatment = p111_pretreatment * 100,\n         p111_postvax = p111_postvax * 100,\n         p111_prevax = p111_prevax * 100,\n         p111_w40 = p111_w40 * 100)\n\np111_betas_invitro &lt;- p111_betas_invitro %&gt;%\n  mutate(p111_DMSO_beta = p111_DMSO_beta * 100,\n         p111_poolA_beta = p111_poolA_beta * 100,\n         p111_poolB_beta = p111_poolB_beta * 100)\n\nJoin longitudinal and in vitro frequencies by beta chain\n\np111_betas &lt;- full_join(p111_betas_pbmc, p111_betas_invitro)\n\nJoining with `by = join_by(Beta_clonotype)`\n\n\nCalculate fold changes across in vitro samples\n\np111_betas &lt;- p111_betas %&gt;%\n  rowwise() %&gt;%\n  mutate(poolA_vs_dmso_fc = sum(c(p111_poolA_beta, pseudo_freq), na.rm = TRUE)/sum(c(p111_DMSO_beta, pseudo_freq), na.rm = TRUE),\n         poolB_vs_dmso_fc = sum(c(p111_poolB_beta, pseudo_freq), na.rm = TRUE)/sum(c(p111_DMSO_beta, pseudo_freq), na.rm = TRUE)) %&gt;%\n  ungroup() %&gt;%\n  mutate(log2fc_poolA_vs_dmso = log2(poolA_vs_dmso_fc),\n         log2fc_poolB_vs_dmso = log2(poolB_vs_dmso_fc),\n         max_log2fc_pool_vs_dmso = case_when(log2fc_poolA_vs_dmso &gt; log2fc_poolB_vs_dmso ~ log2fc_poolA_vs_dmso,\n                                             log2fc_poolB_vs_dmso &gt;= log2fc_poolA_vs_dmso ~ log2fc_poolB_vs_dmso),\n         max_fc_pool_vs_dmso = case_when(log2fc_poolA_vs_dmso &gt; log2fc_poolB_vs_dmso ~ poolA_vs_dmso_fc,\n                                         log2fc_poolB_vs_dmso &gt;= log2fc_poolA_vs_dmso ~ poolB_vs_dmso_fc))\n\nSave data\n\nwrite.csv(p111_betas, \"p111_betas_merged_Part1.csv\", row.names = FALSE)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>PBMCs: Compile & Format Data</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part1.html#get-session-info",
    "href": "PBMC_bulkTCR_Part1.html#get-session-info",
    "title": "2  PBMCs: Compile & Format Data",
    "section": "2.13 Get session info",
    "text": "2.13 Get session info\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Rocky Linux 8.10 (Green Obsidian)\n\nMatrix products: default\nBLAS/LAPACK: /usr/lib64/libopenblasp-r0.3.15.so;  LAPACK version 3.9.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: America/New_York\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] lubridate_1.9.4 forcats_1.0.0   stringr_1.5.1   purrr_1.0.4    \n [5] readr_2.1.5     tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1  \n [9] tidyverse_2.0.0 dplyr_1.1.4    \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6      jsonlite_1.8.9    compiler_4.3.2    tidyselect_1.2.1 \n [5] scales_1.3.0      fastmap_1.2.0     R6_2.6.1          generics_0.1.3   \n [9] knitr_1.49        htmlwidgets_1.6.4 munsell_0.5.1     pillar_1.10.1    \n[13] tzdb_0.5.0        rlang_1.1.5       stringi_1.8.4     xfun_0.50        \n[17] timechange_0.3.0  cli_3.6.3         withr_3.0.2       magrittr_2.0.3   \n[21] digest_0.6.37     grid_4.3.2        rstudioapi_0.17.1 hms_1.1.3        \n[25] lifecycle_1.0.4   vctrs_0.6.5       evaluate_1.0.1    glue_1.8.0       \n[29] colorspace_2.1-1  rmarkdown_2.29    tools_4.3.2       pkgconfig_2.0.3  \n[33] htmltools_0.5.8.1",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>PBMCs: Compile & Format Data</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part2_Existing.html",
    "href": "PBMC_bulkTCR_Part2_Existing.html",
    "title": "3  PBMCs: Define “Existing” Clones",
    "section": "",
    "text": "3.1 Set up workspace\n# Load libraries\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.5\n✔ ggplot2   3.5.1     ✔ stringr   1.5.1\n✔ lubridate 1.9.4     ✔ tibble    3.2.1\n✔ purrr     1.0.4     ✔ tidyr     1.3.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# Function to calculate the lower limit of detection\nlod &lt;- function(dat){\n  10^(floor(log10(min(dat, na.rm = TRUE))))\n}",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>PBMCs: Define \"Existing\" Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part2_Existing.html#defintion-of-pre-existing-clones-in-pbmcs",
    "href": "PBMC_bulkTCR_Part2_Existing.html#defintion-of-pre-existing-clones-in-pbmcs",
    "title": "3  PBMCs: Define “Existing” Clones",
    "section": "3.2 Defintion of pre-existing clones in PBMCs",
    "text": "3.2 Defintion of pre-existing clones in PBMCs\n\nQuality control metric: the clone must have 3 or more UMI in at least one time point\n\n10x the lower limit of detection at the pre-treatment timepoint\n\nPresent at all time points after pre-treatment",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>PBMCs: Define \"Existing\" Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part2_Existing.html#load-pbmc-data",
    "href": "PBMC_bulkTCR_Part2_Existing.html#load-pbmc-data",
    "title": "3  PBMCs: Define “Existing” Clones",
    "section": "3.3 Load PBMC data",
    "text": "3.3 Load PBMC data\n\np101_betas &lt;- read.csv(\"p101_betas_merged_Part1.csv\")\np103_betas &lt;- read.csv(\"p103_betas_merged_Part1.csv\")\np104_betas &lt;- read.csv(\"p104_betas_merged_Part1.csv\")\np105_betas &lt;- read.csv(\"p105_betas_merged_Part1.csv\")\np106_betas &lt;- read.csv(\"p106_betas_merged_Part1.csv\")\np108_betas &lt;- read.csv(\"p108_betas_merged_Part1.csv\")\np109_betas &lt;- read.csv(\"p109_betas_merged_Part1.csv\")\np110_betas &lt;- read.csv(\"p110_betas_merged_Part1.csv\")\np111_betas &lt;- read.csv(\"p111_betas_merged_Part1.csv\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>PBMCs: Define \"Existing\" Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part2_Existing.html#update-undetected-values",
    "href": "PBMC_bulkTCR_Part2_Existing.html#update-undetected-values",
    "title": "3  PBMCs: Define “Existing” Clones",
    "section": "3.4 Update undetected values",
    "text": "3.4 Update undetected values\n\n# Calculate the lower limit of detection on the longitudinal samples before any clones are filtered\np101_pretreatment_lod &lt;- lod(p101_betas$p101_pretreatment)\np101_prevax_lod &lt;- lod(p101_betas$p101_prevax)\np101_postvax_lod &lt;- lod(p101_betas$p101_postvax)\n\np103_pretreatment_lod &lt;- lod(p103_betas$p103_pretreatment)\np103_prevax_lod &lt;- lod(p103_betas$p103_prevax)\np103_postvax_lod &lt;- lod(p103_betas$p103_postvax)\np103_w48_lod &lt;- lod(p103_betas$p103_w48)\np103_w72_lod &lt;- lod(p103_betas$p103_w72)\n\np104_pretreatment_lod &lt;- lod(p104_betas$p104_pretreatment)\np104_prevax_lod &lt;- lod(p104_betas$p104_prevax)\np104_postvax_lod &lt;- lod(p104_betas$p104_postvax)\np104_w48_lod &lt;- lod(p104_betas$p104_w48)\n\np105_pretreatment_lod &lt;- lod(p105_betas$p105_pretreatment)\np105_prevax_lod &lt;- lod(p105_betas$p105_prevax)\np105_postvax_lod &lt;- lod(p105_betas$p105_postvax)\np105_w48_lod &lt;- lod(p105_betas$p105_w48)\n\np106_pretreatment_lod &lt;- lod(p106_betas$p106_pretreatment)\np106_prevax_lod &lt;- lod(p106_betas$p106_prevax)\np106_postvax_lod &lt;- lod(p106_betas$p106_postvax)\np106_w48_lod &lt;- lod(p106_betas$p106_w48)\n\np108_pretreatment_lod &lt;- lod(p108_betas$p108_pretreatment)\np108_prevax_lod &lt;- lod(p108_betas$p108_prevax)\np108_postvax_lod &lt;- lod(p108_betas$p108_postvax)\np108_w32_lod &lt;- lod(p108_betas$p108_w32)\n\np109_pretreatment_lod &lt;- lod(p109_betas$p109_pretreatment)\np109_prevax_lod &lt;- lod(p109_betas$p109_prevax)\np109_postvax_lod &lt;- lod(p109_betas$p109_postvax)\np109_w48_lod &lt;- lod(p109_betas$p109_w48)\n\np110_pretreatment_lod &lt;- lod(p110_betas$p110_pretreatment)\np110_prevax_lod &lt;- lod(p110_betas$p110_prevax)\np110_postvax_lod &lt;- lod(p110_betas$p110_postvax)\np110_w38_lod &lt;- lod(p110_betas$p110_w38)\n\np111_pretreatment_lod &lt;- lod(p111_betas$p111_pretreatment)\np111_prevax_lod &lt;- lod(p111_betas$p111_prevax)\np111_postvax_lod &lt;- lod(p111_betas$p111_postvax)\np111_w40_lod &lt;- lod(p111_betas$p111_w40)\n\n# Update undetected values to the LOD to simplify longitudinal frequency plots\np101_betas &lt;- p101_betas %&gt;%\n  mutate(p101_pretreatment = replace_na(p101_pretreatment, p101_pretreatment_lod),\n         p101_prevax = replace_na(p101_prevax, p101_prevax_lod),\n         p101_postvax = replace_na(p101_postvax, p101_postvax_lod))\n\np103_betas &lt;- p103_betas %&gt;%\n  mutate(p103_pretreatment = replace_na(p103_pretreatment, p103_pretreatment_lod),\n         p103_prevax = replace_na(p103_prevax, p103_prevax_lod),\n         p103_postvax = replace_na(p103_postvax, p103_postvax_lod),\n         p103_w48 = replace_na(p103_w48, p103_w48_lod),\n         p103_w72 = replace_na(p103_w72, p103_w72_lod)\n         )\np104_betas &lt;- p104_betas %&gt;%\n  mutate(p104_pretreatment = replace_na(p104_pretreatment, p104_pretreatment_lod),\n         p104_prevax = replace_na(p104_prevax, p104_prevax_lod),\n         p104_postvax = replace_na(p104_postvax, p104_postvax_lod),\n         p104_w48 = replace_na(p104_w48, p104_w48_lod))\np105_betas &lt;- p105_betas %&gt;%\n  mutate(p105_pretreatment = replace_na(p105_pretreatment, p105_pretreatment_lod),\n         p105_prevax = replace_na(p105_prevax, p105_prevax_lod),\n         p105_postvax = replace_na(p105_postvax, p105_postvax_lod),\n         p105_w48 = replace_na(p105_w48, p105_w48_lod))\np106_betas &lt;- p106_betas %&gt;%\n  mutate(p106_pretreatment = replace_na(p106_pretreatment, p106_pretreatment_lod),\n         p106_prevax = replace_na(p106_prevax, p106_prevax_lod),\n         p106_postvax = replace_na(p106_postvax, p106_postvax_lod),\n         p106_w48 = replace_na(p106_w48, p106_w48_lod))\np108_betas &lt;- p108_betas %&gt;%\n  mutate(p108_pretreatment = replace_na(p108_pretreatment, p108_pretreatment_lod),\n         p108_prevax = replace_na(p108_prevax, p108_prevax_lod),\n         p108_postvax = replace_na(p108_postvax, p108_postvax_lod),\n         p108_w32 = replace_na(p108_w32, p108_w32_lod))\np109_betas &lt;- p109_betas %&gt;%\n  mutate(p109_pretreatment = replace_na(p109_pretreatment, p109_pretreatment_lod),\n         p109_prevax = replace_na(p109_prevax, p109_prevax_lod),\n         p109_postvax = replace_na(p109_postvax, p109_postvax_lod),\n         p109_w48 = replace_na(p109_w48, p109_w48_lod))\np110_betas &lt;- p110_betas %&gt;%\n  mutate(p110_pretreatment = replace_na(p110_pretreatment, p110_pretreatment_lod),\n         p110_prevax = replace_na(p110_prevax, p110_prevax_lod),\n         p110_postvax = replace_na(p110_postvax, p110_postvax_lod),\n         p110_w38 = replace_na(p110_w38, p110_w38_lod))\np111_betas &lt;- p111_betas %&gt;%\n  mutate(p111_pretreatment = replace_na(p111_pretreatment, p111_pretreatment_lod),\n         p111_prevax = replace_na(p111_prevax, p111_prevax_lod),\n         p111_postvax = replace_na(p111_postvax, p111_postvax_lod),\n         p111_w40 = replace_na(p111_w40, p111_w40_lod))",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>PBMCs: Define \"Existing\" Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part2_Existing.html#implement-quality-control-metric-each-clone-must-have-3-or-more-umi-in-at-least-one-time-point",
    "href": "PBMC_bulkTCR_Part2_Existing.html#implement-quality-control-metric-each-clone-must-have-3-or-more-umi-in-at-least-one-time-point",
    "title": "3  PBMCs: Define “Existing” Clones",
    "section": "3.5 Implement quality control metric: each clone must have 3 or more UMI in at least one time point",
    "text": "3.5 Implement quality control metric: each clone must have 3 or more UMI in at least one time point\n\np101_betas_qc &lt;- p101_betas %&gt;%\n  filter(p101_pretreatment_umi &gt;= 3 | p101_prevax_umi &gt;= 3 | p101_postvax_umi &gt;= 3)\n\np103_betas_qc &lt;- p103_betas %&gt;%\n  filter(p103_pretreatment_umi &gt;= 3 | p103_prevax_umi &gt;= 3 | p103_postvax_umi &gt;= 3 | p103_w48_umi &gt;= 3 | p103_w72_umi &gt;= 3)\n\np104_betas_qc &lt;- p104_betas %&gt;%\n  filter(p104_pretreatment_umi &gt;= 3 | p104_prevax_umi &gt;= 3 | p104_postvax_umi &gt;= 3 | p104_w48_umi &gt;= 3)\n\np105_betas_qc &lt;- p105_betas %&gt;%\n  filter(p105_pretreatment_umi &gt;= 3 | p105_prevax_umi &gt;= 3 | p105_postvax_umi &gt;= 3 | p105_w48_umi &gt;= 3)\n\np106_betas_qc &lt;- p106_betas %&gt;%\n  filter(p106_pretreatment_umi &gt;= 3 | p106_prevax_umi &gt;= 3 | p106_postvax_umi &gt;= 3 | p106_w48_umi &gt;= 3)\n\np108_betas_qc &lt;- p108_betas %&gt;%\n  filter(p108_pretreatment_umi &gt;= 3 | p108_prevax_umi &gt;= 3 | p108_postvax_umi &gt;= 3 | p108_w32_umi &gt;= 3)\n\np109_betas_qc &lt;- p109_betas %&gt;%\n  filter(p109_pretreatment_umi &gt;= 3 | p109_prevax_umi &gt;= 3 | p109_postvax_umi &gt;= 3 | p109_w48_umi &gt;= 3)\n\np110_betas_qc &lt;- p110_betas %&gt;%\n  filter(p110_pretreatment_umi &gt;= 3 | p110_prevax_umi &gt;= 3 | p110_postvax_umi &gt;= 3 | p110_w38_umi &gt;= 3)\n\np111_betas_qc &lt;- p111_betas %&gt;%\n  filter(p111_pretreatment_umi &gt;= 3 | p111_prevax_umi &gt;= 3 | p111_postvax_umi &gt;= 3 | p111_w40_umi &gt;= 3)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>PBMCs: Define \"Existing\" Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part2_Existing.html#implement-expression-filter-10x-lower-limit-at-pre-treatment",
    "href": "PBMC_bulkTCR_Part2_Existing.html#implement-expression-filter-10x-lower-limit-at-pre-treatment",
    "title": "3  PBMCs: Define “Existing” Clones",
    "section": "3.6 Implement expression filter: >10x lower limit at pre-treatment",
    "text": "3.6 Implement expression filter: &gt;10x lower limit at pre-treatment\n\np101_betas_exp &lt;- p101_betas_qc %&gt;%\n  filter(p101_pretreatment &gt; p101_pretreatment_lod*10)\n\np103_betas_exp &lt;- p103_betas_qc %&gt;%\n  filter(p103_pretreatment &gt; p103_pretreatment_lod*10)\n\np104_betas_exp &lt;- p104_betas_qc %&gt;%\n  filter(p104_pretreatment &gt; p104_pretreatment_lod*10)\n\np105_betas_exp &lt;- p105_betas_qc %&gt;%\n  filter(p105_pretreatment &gt; p105_pretreatment_lod*10)\n\np106_betas_exp &lt;- p106_betas_qc %&gt;%\n  filter(p106_pretreatment &gt; p106_pretreatment_lod*10)\n\np108_betas_exp &lt;- p108_betas_qc %&gt;%\n  filter(p108_pretreatment &gt; p108_pretreatment_lod*10)\n\np109_betas_exp &lt;- p109_betas_qc %&gt;%\n  filter(p109_pretreatment &gt; p109_pretreatment_lod*10)\n\np110_betas_exp &lt;- p110_betas_qc %&gt;%\n  filter(p110_pretreatment &gt; p110_pretreatment_lod*10)\n\np111_betas_exp &lt;- p111_betas_qc %&gt;%\n  filter(p111_pretreatment &gt; p111_pretreatment_lod*10)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>PBMCs: Define \"Existing\" Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part2_Existing.html#implement-secondary-expression-filter-present-at-all-time-points-after-pre-treatment",
    "href": "PBMC_bulkTCR_Part2_Existing.html#implement-secondary-expression-filter-present-at-all-time-points-after-pre-treatment",
    "title": "3  PBMCs: Define “Existing” Clones",
    "section": "3.7 Implement secondary expression filter: Present at all time points after pre-treatment",
    "text": "3.7 Implement secondary expression filter: Present at all time points after pre-treatment\n\np101_betas_pres &lt;- p101_betas_exp %&gt;%\n  filter(p101_prevax &gt; p101_prevax_lod,\n         p101_postvax &gt; p101_postvax_lod)\n\np103_betas_pres &lt;- p103_betas_exp %&gt;%\n  filter(p103_prevax &gt; p103_prevax_lod,\n         p103_postvax &gt; p103_postvax_lod,\n         p103_w48 &gt; p103_w48_lod,\n         p103_w72 &gt; p103_w72_lod)\n\np104_betas_pres &lt;- p104_betas_exp %&gt;%\n  filter(p104_prevax &gt; p104_prevax_lod,\n         p104_postvax &gt; p104_postvax_lod,\n         p104_w48 &gt; p104_w48_lod)\n\np105_betas_pres &lt;- p105_betas_exp %&gt;%\n  filter(p105_prevax &gt; p105_prevax_lod,\n         p105_postvax &gt; p105_postvax_lod,\n         p105_w48 &gt; p105_w48_lod)\n\np106_betas_pres &lt;- p106_betas_exp %&gt;%\n  filter(p106_prevax &gt; p106_prevax_lod,\n         p106_postvax &gt; p106_postvax_lod,\n         p106_w48 &gt; p106_w48_lod)\n\np108_betas_pres &lt;- p108_betas_exp %&gt;%\n  filter(p108_prevax &gt; p108_prevax_lod,\n         p108_postvax &gt; p108_postvax_lod,\n         p108_w32 &gt; p108_w32_lod)\n\np109_betas_pres &lt;- p109_betas_exp %&gt;%\n  filter(p109_prevax &gt; p109_prevax_lod,\n         p109_postvax &gt; p109_postvax_lod,\n         p109_w48 &gt; p109_w48_lod)\n\np110_betas_pres &lt;- p110_betas_exp %&gt;%\n  filter(p110_prevax &gt; p110_prevax_lod,\n         p110_postvax &gt; p110_postvax_lod,\n         p110_w38 &gt; p110_w38_lod)\n\np111_betas_pres &lt;- p111_betas_exp %&gt;%\n  filter(p111_prevax &gt; p111_prevax_lod,\n         p111_postvax &gt; p111_postvax_lod,\n         p111_w40 &gt; p111_w40_lod)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>PBMCs: Define \"Existing\" Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part2_Existing.html#save-the-existing-beta-clonotypes",
    "href": "PBMC_bulkTCR_Part2_Existing.html#save-the-existing-beta-clonotypes",
    "title": "3  PBMCs: Define “Existing” Clones",
    "section": "3.8 Save the “Existing” beta clonotypes",
    "text": "3.8 Save the “Existing” beta clonotypes\n\n# Add a column for patient\np101_betas_pres &lt;- p101_betas_pres %&gt;%\n  mutate(Patient = \"P101\")\np103_betas_pres &lt;- p103_betas_pres %&gt;%\n  mutate(Patient = \"P103\")\np104_betas_pres &lt;- p104_betas_pres %&gt;%\n  mutate(Patient = \"P104\")\np105_betas_pres &lt;- p105_betas_pres %&gt;%\n  mutate(Patient = \"P105\")\np106_betas_pres &lt;- p106_betas_pres %&gt;%\n  mutate(Patient = \"P106\")\np108_betas_pres &lt;- p108_betas_pres %&gt;%\n  mutate(Patient = \"P108\")\np109_betas_pres &lt;- p109_betas_pres %&gt;%\n  mutate(Patient = \"P109\")\np110_betas_pres &lt;- p110_betas_pres %&gt;%\n  mutate(Patient = \"P110\")\np111_betas_pres &lt;- p111_betas_pres %&gt;%\n  mutate(Patient = \"P111\")\n\npreexisiting_betas_pres &lt;- do.call(rbind, list(p101_betas_pres[,c(\"Beta_clonotype\", \"Patient\")],\n                                          p103_betas_pres[,c(\"Beta_clonotype\", \"Patient\")],\n                                          p104_betas_pres[,c(\"Beta_clonotype\", \"Patient\")],\n                                          p105_betas_pres[,c(\"Beta_clonotype\", \"Patient\")],\n                                          p106_betas_pres[,c(\"Beta_clonotype\", \"Patient\")],\n                                          p108_betas_pres[,c(\"Beta_clonotype\", \"Patient\")],\n                                          p109_betas_pres[,c(\"Beta_clonotype\", \"Patient\")],\n                                          p110_betas_pres[,c(\"Beta_clonotype\", \"Patient\")],\n                                          p111_betas_pres[,c(\"Beta_clonotype\", \"Patient\")]))\n\nwrite.csv(preexisiting_betas_pres, \"PBMC_Existing_Beta_Chains_Part2.csv\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>PBMCs: Define \"Existing\" Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part2_Existing.html#get-session-info",
    "href": "PBMC_bulkTCR_Part2_Existing.html#get-session-info",
    "title": "3  PBMCs: Define “Existing” Clones",
    "section": "3.9 Get session info",
    "text": "3.9 Get session info\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Rocky Linux 8.10 (Green Obsidian)\n\nMatrix products: default\nBLAS/LAPACK: /usr/lib64/libopenblasp-r0.3.15.so;  LAPACK version 3.9.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: America/New_York\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] lubridate_1.9.4 forcats_1.0.0   stringr_1.5.1   purrr_1.0.4    \n [5] readr_2.1.5     tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1  \n [9] tidyverse_2.0.0 dplyr_1.1.4    \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6      jsonlite_1.8.9    compiler_4.3.2    tidyselect_1.2.1 \n [5] scales_1.3.0      fastmap_1.2.0     R6_2.6.1          generics_0.1.3   \n [9] knitr_1.49        htmlwidgets_1.6.4 munsell_0.5.1     pillar_1.10.1    \n[13] tzdb_0.5.0        rlang_1.1.5       stringi_1.8.4     xfun_0.50        \n[17] timechange_0.3.0  cli_3.6.3         withr_3.0.2       magrittr_2.0.3   \n[21] digest_0.6.37     grid_4.3.2        rstudioapi_0.17.1 hms_1.1.3        \n[25] lifecycle_1.0.4   vctrs_0.6.5       evaluate_1.0.1    glue_1.8.0       \n[29] colorspace_2.1-1  rmarkdown_2.29    tools_4.3.2       pkgconfig_2.0.3  \n[33] htmltools_0.5.8.1",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>PBMCs: Define \"Existing\" Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part2_Post-Nivolumab.html",
    "href": "PBMC_bulkTCR_Part2_Post-Nivolumab.html",
    "title": "4  PBMCs: Define “Post-Nivolumab” Clones",
    "section": "",
    "text": "4.1 Set up workspace\n# Load libraries\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.5\n✔ ggplot2   3.5.1     ✔ stringr   1.5.1\n✔ lubridate 1.9.4     ✔ tibble    3.2.1\n✔ purrr     1.0.4     ✔ tidyr     1.3.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# Function to calculate the lower limit of detection\nlod &lt;- function(dat){\n  10^(floor(log10(min(dat, na.rm = TRUE))))\n}",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>PBMCs: Define \"Post-Nivolumab\" Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part2_Post-Nivolumab.html#defintion-of-post-nivo-expanded-clones-in-pbmcs",
    "href": "PBMC_bulkTCR_Part2_Post-Nivolumab.html#defintion-of-post-nivo-expanded-clones-in-pbmcs",
    "title": "4  PBMCs: Define “Post-Nivolumab” Clones",
    "section": "4.2 Defintion of post-nivo expanded clones in PBMCs",
    "text": "4.2 Defintion of post-nivo expanded clones in PBMCs\n\nQuality control metric: the clone must have 3 or more UMI in at least one time point\nBelow the limit of detection at the pre-treatment timepoint\n\n10x the lower limit of detection at the pre-vax timepoint\n\nPresent at all time points after pre-vax",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>PBMCs: Define \"Post-Nivolumab\" Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part2_Post-Nivolumab.html#load-pbmc-data",
    "href": "PBMC_bulkTCR_Part2_Post-Nivolumab.html#load-pbmc-data",
    "title": "4  PBMCs: Define “Post-Nivolumab” Clones",
    "section": "4.3 Load PBMC data",
    "text": "4.3 Load PBMC data\n\np101_betas &lt;- read.csv(\"p101_betas_merged_Part1.csv\")\np103_betas &lt;- read.csv(\"p103_betas_merged_Part1.csv\")\np104_betas &lt;- read.csv(\"p104_betas_merged_Part1.csv\")\np105_betas &lt;- read.csv(\"p105_betas_merged_Part1.csv\")\np106_betas &lt;- read.csv(\"p106_betas_merged_Part1.csv\")\np108_betas &lt;- read.csv(\"p108_betas_merged_Part1.csv\")\np109_betas &lt;- read.csv(\"p109_betas_merged_Part1.csv\")\np110_betas &lt;- read.csv(\"p110_betas_merged_Part1.csv\")\np111_betas &lt;- read.csv(\"p111_betas_merged_Part1.csv\")",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>PBMCs: Define \"Post-Nivolumab\" Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part2_Post-Nivolumab.html#update-undetected-values",
    "href": "PBMC_bulkTCR_Part2_Post-Nivolumab.html#update-undetected-values",
    "title": "4  PBMCs: Define “Post-Nivolumab” Clones",
    "section": "4.4 Update undetected values",
    "text": "4.4 Update undetected values\n\n# Calculate the lower limit of detection on the longitudinal samples before any clones are filtered\np101_pretreatment_lod &lt;- lod(p101_betas$p101_pretreatment)\np101_prevax_lod &lt;- lod(p101_betas$p101_prevax)\np101_postvax_lod &lt;- lod(p101_betas$p101_postvax)\n\np103_pretreatment_lod &lt;- lod(p103_betas$p103_pretreatment)\np103_prevax_lod &lt;- lod(p103_betas$p103_prevax)\np103_postvax_lod &lt;- lod(p103_betas$p103_postvax)\np103_w48_lod &lt;- lod(p103_betas$p103_w48)\np103_w72_lod &lt;- lod(p103_betas$p103_w72)\n\np104_pretreatment_lod &lt;- lod(p104_betas$p104_pretreatment)\np104_prevax_lod &lt;- lod(p104_betas$p104_prevax)\np104_postvax_lod &lt;- lod(p104_betas$p104_postvax)\np104_w48_lod &lt;- lod(p104_betas$p104_w48)\n\np105_pretreatment_lod &lt;- lod(p105_betas$p105_pretreatment)\np105_prevax_lod &lt;- lod(p105_betas$p105_prevax)\np105_postvax_lod &lt;- lod(p105_betas$p105_postvax)\np105_w48_lod &lt;- lod(p105_betas$p105_w48)\n\np106_pretreatment_lod &lt;- lod(p106_betas$p106_pretreatment)\np106_prevax_lod &lt;- lod(p106_betas$p106_prevax)\np106_postvax_lod &lt;- lod(p106_betas$p106_postvax)\np106_w48_lod &lt;- lod(p106_betas$p106_w48)\n\np108_pretreatment_lod &lt;- lod(p108_betas$p108_pretreatment)\np108_prevax_lod &lt;- lod(p108_betas$p108_prevax)\np108_postvax_lod &lt;- lod(p108_betas$p108_postvax)\np108_w32_lod &lt;- lod(p108_betas$p108_w32)\n\np109_pretreatment_lod &lt;- lod(p109_betas$p109_pretreatment)\np109_prevax_lod &lt;- lod(p109_betas$p109_prevax)\np109_postvax_lod &lt;- lod(p109_betas$p109_postvax)\np109_w48_lod &lt;- lod(p109_betas$p109_w48)\n\np110_pretreatment_lod &lt;- lod(p110_betas$p110_pretreatment)\np110_prevax_lod &lt;- lod(p110_betas$p110_prevax)\np110_postvax_lod &lt;- lod(p110_betas$p110_postvax)\np110_w38_lod &lt;- lod(p110_betas$p110_w38)\n\np111_pretreatment_lod &lt;- lod(p111_betas$p111_pretreatment)\np111_prevax_lod &lt;- lod(p111_betas$p111_prevax)\np111_postvax_lod &lt;- lod(p111_betas$p111_postvax)\np111_w40_lod &lt;- lod(p111_betas$p111_w40)\n\n# Update undetected values to the LOD to simplify longitudinal frequency plots\np101_betas &lt;- p101_betas %&gt;%\n  mutate(p101_pretreatment = replace_na(p101_pretreatment, p101_pretreatment_lod),\n         p101_prevax = replace_na(p101_prevax, p101_prevax_lod),\n         p101_postvax = replace_na(p101_postvax, p101_postvax_lod))\n\np103_betas &lt;- p103_betas %&gt;%\n  mutate(p103_pretreatment = replace_na(p103_pretreatment, p103_pretreatment_lod),\n         p103_prevax = replace_na(p103_prevax, p103_prevax_lod),\n         p103_postvax = replace_na(p103_postvax, p103_postvax_lod),\n         p103_w48 = replace_na(p103_w48, p103_w48_lod),\n         p103_w72 = replace_na(p103_w72, p103_w72_lod)\n         )\np104_betas &lt;- p104_betas %&gt;%\n  mutate(p104_pretreatment = replace_na(p104_pretreatment, p104_pretreatment_lod),\n         p104_prevax = replace_na(p104_prevax, p104_prevax_lod),\n         p104_postvax = replace_na(p104_postvax, p104_postvax_lod),\n         p104_w48 = replace_na(p104_w48, p104_w48_lod))\np105_betas &lt;- p105_betas %&gt;%\n  mutate(p105_pretreatment = replace_na(p105_pretreatment, p105_pretreatment_lod),\n         p105_prevax = replace_na(p105_prevax, p105_prevax_lod),\n         p105_postvax = replace_na(p105_postvax, p105_postvax_lod),\n         p105_w48 = replace_na(p105_w48, p105_w48_lod))\np106_betas &lt;- p106_betas %&gt;%\n  mutate(p106_pretreatment = replace_na(p106_pretreatment, p106_pretreatment_lod),\n         p106_prevax = replace_na(p106_prevax, p106_prevax_lod),\n         p106_postvax = replace_na(p106_postvax, p106_postvax_lod),\n         p106_w48 = replace_na(p106_w48, p106_w48_lod))\np108_betas &lt;- p108_betas %&gt;%\n  mutate(p108_pretreatment = replace_na(p108_pretreatment, p108_pretreatment_lod),\n         p108_prevax = replace_na(p108_prevax, p108_prevax_lod),\n         p108_postvax = replace_na(p108_postvax, p108_postvax_lod),\n         p108_w32 = replace_na(p108_w32, p108_w32_lod))\np109_betas &lt;- p109_betas %&gt;%\n  mutate(p109_pretreatment = replace_na(p109_pretreatment, p109_pretreatment_lod),\n         p109_prevax = replace_na(p109_prevax, p109_prevax_lod),\n         p109_postvax = replace_na(p109_postvax, p109_postvax_lod),\n         p109_w48 = replace_na(p109_w48, p109_w48_lod))\np110_betas &lt;- p110_betas %&gt;%\n  mutate(p110_pretreatment = replace_na(p110_pretreatment, p110_pretreatment_lod),\n         p110_prevax = replace_na(p110_prevax, p110_prevax_lod),\n         p110_postvax = replace_na(p110_postvax, p110_postvax_lod),\n         p110_w38 = replace_na(p110_w38, p110_w38_lod))\np111_betas &lt;- p111_betas %&gt;%\n  mutate(p111_pretreatment = replace_na(p111_pretreatment, p111_pretreatment_lod),\n         p111_prevax = replace_na(p111_prevax, p111_prevax_lod),\n         p111_postvax = replace_na(p111_postvax, p111_postvax_lod),\n         p111_w40 = replace_na(p111_w40, p111_w40_lod))",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>PBMCs: Define \"Post-Nivolumab\" Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part2_Post-Nivolumab.html#implement-quality-control-metric-each-clone-must-have-3-or-more-umi-in-at-least-one-time-point",
    "href": "PBMC_bulkTCR_Part2_Post-Nivolumab.html#implement-quality-control-metric-each-clone-must-have-3-or-more-umi-in-at-least-one-time-point",
    "title": "4  PBMCs: Define “Post-Nivolumab” Clones",
    "section": "4.5 Implement quality control metric: each clone must have 3 or more UMI in at least one time point",
    "text": "4.5 Implement quality control metric: each clone must have 3 or more UMI in at least one time point\n\np101_betas_qc &lt;- p101_betas %&gt;%\n  filter(p101_pretreatment_umi &gt;= 3 | p101_prevax_umi &gt;= 3 | p101_postvax_umi &gt;= 3)\n\np103_betas_qc &lt;- p103_betas %&gt;%\n  filter(p103_pretreatment_umi &gt;= 3 | p103_prevax_umi &gt;= 3 | p103_postvax_umi &gt;= 3 | p103_w48_umi &gt;= 3 | p103_w72_umi &gt;= 3)\n\np104_betas_qc &lt;- p104_betas %&gt;%\n  filter(p104_pretreatment_umi &gt;= 3 | p104_prevax_umi &gt;= 3 | p104_postvax_umi &gt;= 3 | p104_w48_umi &gt;= 3)\n\np105_betas_qc &lt;- p105_betas %&gt;%\n  filter(p105_pretreatment_umi &gt;= 3 | p105_prevax_umi &gt;= 3 | p105_postvax_umi &gt;= 3 | p105_w48_umi &gt;= 3)\n\np106_betas_qc &lt;- p106_betas %&gt;%\n  filter(p106_pretreatment_umi &gt;= 3 | p106_prevax_umi &gt;= 3 | p106_postvax_umi &gt;= 3 | p106_w48_umi &gt;= 3)\n\np108_betas_qc &lt;- p108_betas %&gt;%\n  filter(p108_pretreatment_umi &gt;= 3 | p108_prevax_umi &gt;= 3 | p108_postvax_umi &gt;= 3 | p108_w32_umi &gt;= 3)\n\np109_betas_qc &lt;- p109_betas %&gt;%\n  filter(p109_pretreatment_umi &gt;= 3 | p109_prevax_umi &gt;= 3 | p109_postvax_umi &gt;= 3 | p109_w48_umi &gt;= 3)\n\np110_betas_qc &lt;- p110_betas %&gt;%\n  filter(p110_pretreatment_umi &gt;= 3 | p110_prevax_umi &gt;= 3 | p110_postvax_umi &gt;= 3 | p110_w38_umi &gt;= 3)\n\np111_betas_qc &lt;- p111_betas %&gt;%\n  filter(p111_pretreatment_umi &gt;= 3 | p111_prevax_umi &gt;= 3 | p111_postvax_umi &gt;= 3 | p111_w40_umi &gt;= 3)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>PBMCs: Define \"Post-Nivolumab\" Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part2_Post-Nivolumab.html#implement-timepoint-filter-clones-must-be-below-technically-at-given-the-earlier-conversion-of-undetected-values-to-the-lod-the-limit-of-detection-at-the-pre-treatment-timepoint",
    "href": "PBMC_bulkTCR_Part2_Post-Nivolumab.html#implement-timepoint-filter-clones-must-be-below-technically-at-given-the-earlier-conversion-of-undetected-values-to-the-lod-the-limit-of-detection-at-the-pre-treatment-timepoint",
    "title": "4  PBMCs: Define “Post-Nivolumab” Clones",
    "section": "4.6 Implement timepoint filter: Clones must be below (technically at, given the earlier conversion of undetected values to the LOD) the limit of detection at the pre-treatment timepoint",
    "text": "4.6 Implement timepoint filter: Clones must be below (technically at, given the earlier conversion of undetected values to the LOD) the limit of detection at the pre-treatment timepoint\n\np101_betas_tp &lt;- p101_betas_qc %&gt;%\n  filter(p101_pretreatment == p101_pretreatment_lod)\n\np103_betas_tp &lt;- p103_betas_qc %&gt;%\n  filter(p103_pretreatment == p103_pretreatment_lod)\n\np104_betas_tp &lt;- p104_betas_qc %&gt;%\n  filter(p104_pretreatment == p104_pretreatment_lod)\n\np105_betas_tp &lt;- p105_betas_qc %&gt;%\n  filter(p105_pretreatment == p105_pretreatment_lod)\n\np106_betas_tp &lt;- p106_betas_qc %&gt;%\n  filter(p106_pretreatment == p106_pretreatment_lod)\n\np108_betas_tp &lt;- p108_betas_qc %&gt;%\n  filter(p108_pretreatment == p108_pretreatment_lod)\n\np109_betas_tp &lt;- p109_betas_qc %&gt;%\n  filter(p109_pretreatment == p109_pretreatment_lod)\n\np110_betas_tp &lt;- p110_betas_qc %&gt;%\n  filter(p110_pretreatment == p110_pretreatment_lod)\n\np111_betas_tp &lt;- p111_betas_qc %&gt;%\n  filter(p111_pretreatment == p111_pretreatment_lod)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>PBMCs: Define \"Post-Nivolumab\" Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part2_Post-Nivolumab.html#implement-expression-filter-10x-the-lower-limit-of-detection-at-the-pre-vax-timepoint",
    "href": "PBMC_bulkTCR_Part2_Post-Nivolumab.html#implement-expression-filter-10x-the-lower-limit-of-detection-at-the-pre-vax-timepoint",
    "title": "4  PBMCs: Define “Post-Nivolumab” Clones",
    "section": "4.7 Implement expression filter: >10x the lower limit of detection at the pre-vax timepoint",
    "text": "4.7 Implement expression filter: &gt;10x the lower limit of detection at the pre-vax timepoint\n\np101_betas_exp &lt;- p101_betas_tp %&gt;%\n  filter(p101_prevax &gt; p101_prevax_lod*10)\n\np103_betas_exp &lt;- p103_betas_tp %&gt;%\n  filter(p103_prevax &gt; p103_prevax_lod*10)\n\np104_betas_exp &lt;- p104_betas_tp %&gt;%\n  filter(p104_prevax &gt; p104_prevax_lod*10)\n\np105_betas_exp &lt;- p105_betas_tp %&gt;%\n  filter(p105_prevax &gt; p105_prevax_lod*10)\n\np106_betas_exp &lt;- p106_betas_tp %&gt;%\n  filter(p106_prevax &gt; p106_prevax_lod*10)\n\np108_betas_exp &lt;- p108_betas_tp %&gt;%\n  filter(p108_prevax &gt; p108_prevax_lod*10)\n\np109_betas_exp &lt;- p109_betas_tp %&gt;%\n  filter(p109_prevax &gt; p109_prevax_lod*10)\n\np110_betas_exp &lt;- p110_betas_tp %&gt;%\n  filter(p110_prevax &gt; p110_prevax_lod*10)\n\np111_betas_exp &lt;- p111_betas_tp %&gt;%\n  filter(p111_prevax &gt; p111_prevax_lod*10)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>PBMCs: Define \"Post-Nivolumab\" Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part2_Post-Nivolumab.html#implement-secondary-expression-filter-present-at-all-time-points-after-pre-vax",
    "href": "PBMC_bulkTCR_Part2_Post-Nivolumab.html#implement-secondary-expression-filter-present-at-all-time-points-after-pre-vax",
    "title": "4  PBMCs: Define “Post-Nivolumab” Clones",
    "section": "4.8 Implement secondary expression filter: Present at all time points after pre-vax",
    "text": "4.8 Implement secondary expression filter: Present at all time points after pre-vax\n\np101_betas_pres &lt;- p101_betas_exp %&gt;%\n  filter(p101_postvax &gt; p101_postvax_lod)\n\np103_betas_pres &lt;- p103_betas_exp %&gt;%\n  filter(p103_postvax &gt; p103_postvax_lod,\n         p103_w48 &gt; p103_w48_lod,\n         p103_w72 &gt; p103_w72_lod)\n\np104_betas_pres &lt;- p104_betas_exp %&gt;%\n  filter(p104_postvax &gt; p104_postvax_lod,\n         p104_w48 &gt; p104_w48_lod)\n\np105_betas_pres &lt;- p105_betas_exp %&gt;%\n  filter(p105_postvax &gt; p105_postvax_lod,\n         p105_w48 &gt; p105_w48_lod)\n\np106_betas_pres &lt;- p106_betas_exp %&gt;%\n  filter(p106_postvax &gt; p106_postvax_lod,\n         p106_w48 &gt; p106_w48_lod)\n\np108_betas_pres &lt;- p108_betas_exp %&gt;%\n  filter(p108_postvax &gt; p108_postvax_lod,\n         p108_w32 &gt; p108_w32_lod)\n\np109_betas_pres &lt;- p109_betas_exp %&gt;%\n  filter(p109_postvax &gt; p109_postvax_lod,\n         p109_w48 &gt; p109_w48_lod)\n\np110_betas_pres &lt;- p110_betas_exp %&gt;%\n  filter(p110_postvax &gt; p110_postvax_lod,\n         p110_w38 &gt; p110_w38_lod)\n\np111_betas_pres &lt;- p111_betas_exp %&gt;%\n  filter(p111_postvax &gt; p111_postvax_lod,\n         p111_w40 &gt; p111_w40_lod)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>PBMCs: Define \"Post-Nivolumab\" Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part2_Post-Nivolumab.html#save-the-post-nivolumab-beta-clonotypes",
    "href": "PBMC_bulkTCR_Part2_Post-Nivolumab.html#save-the-post-nivolumab-beta-clonotypes",
    "title": "4  PBMCs: Define “Post-Nivolumab” Clones",
    "section": "4.9 Save the “Post-Nivolumab” beta clonotypes",
    "text": "4.9 Save the “Post-Nivolumab” beta clonotypes\n\n# Add a column for patient\np101_betas_pres &lt;- p101_betas_pres %&gt;%\n  mutate(Patient = \"P101\")\np103_betas_pres &lt;- p103_betas_pres %&gt;%\n  mutate(Patient = \"P103\")\np104_betas_pres &lt;- p104_betas_pres %&gt;%\n  mutate(Patient = \"P104\")\np105_betas_pres &lt;- p105_betas_pres %&gt;%\n  mutate(Patient = \"P105\")\np106_betas_pres &lt;- p106_betas_pres %&gt;%\n  mutate(Patient = \"P106\")\np108_betas_pres &lt;- p108_betas_pres %&gt;%\n  mutate(Patient = \"P108\")\np109_betas_pres &lt;- p109_betas_pres %&gt;%\n  mutate(Patient = \"P109\")\np110_betas_pres &lt;- p110_betas_pres %&gt;%\n  mutate(Patient = \"P110\")\np111_betas_pres &lt;- p111_betas_pres %&gt;%\n  mutate(Patient = \"P111\")\n\npost_nivo_betas_pres &lt;- do.call(rbind, list(p101_betas_pres[,c(\"Beta_clonotype\", \"Patient\")],\n                                          p103_betas_pres[,c(\"Beta_clonotype\", \"Patient\")],\n                                          p104_betas_pres[,c(\"Beta_clonotype\", \"Patient\")],\n                                          p105_betas_pres[,c(\"Beta_clonotype\", \"Patient\")],\n                                          p106_betas_pres[,c(\"Beta_clonotype\", \"Patient\")],\n                                          p108_betas_pres[,c(\"Beta_clonotype\", \"Patient\")],\n                                          p109_betas_pres[,c(\"Beta_clonotype\", \"Patient\")],\n                                          p110_betas_pres[,c(\"Beta_clonotype\", \"Patient\")],\n                                          p111_betas_pres[,c(\"Beta_clonotype\", \"Patient\")]))\n\nwrite.csv(post_nivo_betas_pres, \"PBMC_Post-Nivolumab_Beta_Chains_Part2.csv\")",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>PBMCs: Define \"Post-Nivolumab\" Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part2_Post-Nivolumab.html#get-session-info",
    "href": "PBMC_bulkTCR_Part2_Post-Nivolumab.html#get-session-info",
    "title": "4  PBMCs: Define “Post-Nivolumab” Clones",
    "section": "4.10 Get session Info",
    "text": "4.10 Get session Info\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Rocky Linux 8.10 (Green Obsidian)\n\nMatrix products: default\nBLAS/LAPACK: /usr/lib64/libopenblasp-r0.3.15.so;  LAPACK version 3.9.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: America/New_York\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] lubridate_1.9.4 forcats_1.0.0   stringr_1.5.1   purrr_1.0.4    \n [5] readr_2.1.5     tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1  \n [9] tidyverse_2.0.0 dplyr_1.1.4    \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6      jsonlite_1.8.9    compiler_4.3.2    tidyselect_1.2.1 \n [5] scales_1.3.0      fastmap_1.2.0     R6_2.6.1          generics_0.1.3   \n [9] knitr_1.49        htmlwidgets_1.6.4 munsell_0.5.1     pillar_1.10.1    \n[13] tzdb_0.5.0        rlang_1.1.5       stringi_1.8.4     xfun_0.50        \n[17] timechange_0.3.0  cli_3.6.3         withr_3.0.2       magrittr_2.0.3   \n[21] digest_0.6.37     grid_4.3.2        rstudioapi_0.17.1 hms_1.1.3        \n[25] lifecycle_1.0.4   vctrs_0.6.5       evaluate_1.0.1    glue_1.8.0       \n[29] colorspace_2.1-1  rmarkdown_2.29    tools_4.3.2       pkgconfig_2.0.3  \n[33] htmltools_0.5.8.1",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>PBMCs: Define \"Post-Nivolumab\" Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part2_Post-Vaccine.html",
    "href": "PBMC_bulkTCR_Part2_Post-Vaccine.html",
    "title": "5  PBMCs: Define “Post-Vaccine” Clones",
    "section": "",
    "text": "5.1 Set up workspace\n# Load libraries\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.5\n✔ ggplot2   3.5.1     ✔ stringr   1.5.1\n✔ lubridate 1.9.4     ✔ tibble    3.2.1\n✔ purrr     1.0.4     ✔ tidyr     1.3.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# Function to calculate the lower limit of detection\nlod &lt;- function(dat){\n  10^(floor(log10(min(dat, na.rm = TRUE))))\n}",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>PBMCs: Define \"Post-Vaccine\" Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part2_Post-Vaccine.html#defintion-of-post-vaccine-clones-in-pbmcs",
    "href": "PBMC_bulkTCR_Part2_Post-Vaccine.html#defintion-of-post-vaccine-clones-in-pbmcs",
    "title": "5  PBMCs: Define “Post-Vaccine” Clones",
    "section": "5.2 Defintion of Post-Vaccine clones in PBMCs",
    "text": "5.2 Defintion of Post-Vaccine clones in PBMCs\n\nQuality control metric: the clone must have 3 or more UMI in at least one time point\nBelow the lower limit of detection at the pre-treatment and pre-vax timepoint\n\n10x the lower limit of detection at the post-vax timepoint\n\nPresent at all time points after post-vax",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>PBMCs: Define \"Post-Vaccine\" Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part2_Post-Vaccine.html#load-pbmc-data",
    "href": "PBMC_bulkTCR_Part2_Post-Vaccine.html#load-pbmc-data",
    "title": "5  PBMCs: Define “Post-Vaccine” Clones",
    "section": "5.3 Load PBMC data",
    "text": "5.3 Load PBMC data\n\np101_betas &lt;- read.csv(\"p101_betas_merged_Part1.csv\")\np103_betas &lt;- read.csv(\"p103_betas_merged_Part1.csv\")\np104_betas &lt;- read.csv(\"p104_betas_merged_Part1.csv\")\np105_betas &lt;- read.csv(\"p105_betas_merged_Part1.csv\")\np106_betas &lt;- read.csv(\"p106_betas_merged_Part1.csv\")\np108_betas &lt;- read.csv(\"p108_betas_merged_Part1.csv\")\np109_betas &lt;- read.csv(\"p109_betas_merged_Part1.csv\")\np110_betas &lt;- read.csv(\"p110_betas_merged_Part1.csv\")\np111_betas &lt;- read.csv(\"p111_betas_merged_Part1.csv\")",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>PBMCs: Define \"Post-Vaccine\" Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part2_Post-Vaccine.html#update-undetected-values",
    "href": "PBMC_bulkTCR_Part2_Post-Vaccine.html#update-undetected-values",
    "title": "5  PBMCs: Define “Post-Vaccine” Clones",
    "section": "5.4 Update undetected values",
    "text": "5.4 Update undetected values\n\n# Calculate the lower limit of detection on the longitudinal samples before any clones are filtered\np101_pretreatment_lod &lt;- lod(p101_betas$p101_pretreatment)\np101_prevax_lod &lt;- lod(p101_betas$p101_prevax)\np101_postvax_lod &lt;- lod(p101_betas$p101_postvax)\n\np103_pretreatment_lod &lt;- lod(p103_betas$p103_pretreatment)\np103_prevax_lod &lt;- lod(p103_betas$p103_prevax)\np103_postvax_lod &lt;- lod(p103_betas$p103_postvax)\np103_w48_lod &lt;- lod(p103_betas$p103_w48)\np103_w72_lod &lt;- lod(p103_betas$p103_w72)\n\np104_pretreatment_lod &lt;- lod(p104_betas$p104_pretreatment)\np104_prevax_lod &lt;- lod(p104_betas$p104_prevax)\np104_postvax_lod &lt;- lod(p104_betas$p104_postvax)\np104_w48_lod &lt;- lod(p104_betas$p104_w48)\n\np105_pretreatment_lod &lt;- lod(p105_betas$p105_pretreatment)\np105_prevax_lod &lt;- lod(p105_betas$p105_prevax)\np105_postvax_lod &lt;- lod(p105_betas$p105_postvax)\np105_w48_lod &lt;- lod(p105_betas$p105_w48)\n\np106_pretreatment_lod &lt;- lod(p106_betas$p106_pretreatment)\np106_prevax_lod &lt;- lod(p106_betas$p106_prevax)\np106_postvax_lod &lt;- lod(p106_betas$p106_postvax)\np106_w48_lod &lt;- lod(p106_betas$p106_w48)\n\np108_pretreatment_lod &lt;- lod(p108_betas$p108_pretreatment)\np108_prevax_lod &lt;- lod(p108_betas$p108_prevax)\np108_postvax_lod &lt;- lod(p108_betas$p108_postvax)\np108_w32_lod &lt;- lod(p108_betas$p108_w32)\n\np109_pretreatment_lod &lt;- lod(p109_betas$p109_pretreatment)\np109_prevax_lod &lt;- lod(p109_betas$p109_prevax)\np109_postvax_lod &lt;- lod(p109_betas$p109_postvax)\np109_w48_lod &lt;- lod(p109_betas$p109_w48)\n\np110_pretreatment_lod &lt;- lod(p110_betas$p110_pretreatment)\np110_prevax_lod &lt;- lod(p110_betas$p110_prevax)\np110_postvax_lod &lt;- lod(p110_betas$p110_postvax)\np110_w38_lod &lt;- lod(p110_betas$p110_w38)\n\np111_pretreatment_lod &lt;- lod(p111_betas$p111_pretreatment)\np111_prevax_lod &lt;- lod(p111_betas$p111_prevax)\np111_postvax_lod &lt;- lod(p111_betas$p111_postvax)\np111_w40_lod &lt;- lod(p111_betas$p111_w40)\n\n# Update undetected values to the LOD to simplify longitudinal frequency plots\np101_betas &lt;- p101_betas %&gt;%\n  mutate(p101_pretreatment = replace_na(p101_pretreatment, p101_pretreatment_lod),\n         p101_prevax = replace_na(p101_prevax, p101_prevax_lod),\n         p101_postvax = replace_na(p101_postvax, p101_postvax_lod))\n\np103_betas &lt;- p103_betas %&gt;%\n  mutate(p103_pretreatment = replace_na(p103_pretreatment, p103_pretreatment_lod),\n         p103_prevax = replace_na(p103_prevax, p103_prevax_lod),\n         p103_postvax = replace_na(p103_postvax, p103_postvax_lod),\n         p103_w48 = replace_na(p103_w48, p103_w48_lod),\n         p103_w72 = replace_na(p103_w72, p103_w72_lod))\np104_betas &lt;- p104_betas %&gt;%\n  mutate(p104_pretreatment = replace_na(p104_pretreatment, p104_pretreatment_lod),\n         p104_prevax = replace_na(p104_prevax, p104_prevax_lod),\n         p104_postvax = replace_na(p104_postvax, p104_postvax_lod),\n         p104_w48 = replace_na(p104_w48, p104_w48_lod))\np105_betas &lt;- p105_betas %&gt;%\n  mutate(p105_pretreatment = replace_na(p105_pretreatment, p105_pretreatment_lod),\n         p105_prevax = replace_na(p105_prevax, p105_prevax_lod),\n         p105_postvax = replace_na(p105_postvax, p105_postvax_lod),\n         p105_w48 = replace_na(p105_w48, p105_w48_lod))\np106_betas &lt;- p106_betas %&gt;%\n  mutate(p106_pretreatment = replace_na(p106_pretreatment, p106_pretreatment_lod),\n         p106_prevax = replace_na(p106_prevax, p106_prevax_lod),\n         p106_postvax = replace_na(p106_postvax, p106_postvax_lod),\n         p106_w48 = replace_na(p106_w48, p106_w48_lod))\np108_betas &lt;- p108_betas %&gt;%\n  mutate(p108_pretreatment = replace_na(p108_pretreatment, p108_pretreatment_lod),\n         p108_prevax = replace_na(p108_prevax, p108_prevax_lod),\n         p108_postvax = replace_na(p108_postvax, p108_postvax_lod),\n         p108_w32 = replace_na(p108_w32, p108_w32_lod))\np109_betas &lt;- p109_betas %&gt;%\n  mutate(p109_pretreatment = replace_na(p109_pretreatment, p109_pretreatment_lod),\n         p109_prevax = replace_na(p109_prevax, p109_prevax_lod),\n         p109_postvax = replace_na(p109_postvax, p109_postvax_lod),\n         p109_w48 = replace_na(p109_w48, p109_w48_lod))\np110_betas &lt;- p110_betas %&gt;%\n  mutate(p110_pretreatment = replace_na(p110_pretreatment, p110_pretreatment_lod),\n         p110_prevax = replace_na(p110_prevax, p110_prevax_lod),\n         p110_postvax = replace_na(p110_postvax, p110_postvax_lod),\n         p110_w38 = replace_na(p110_w38, p110_w38_lod))\np111_betas &lt;- p111_betas %&gt;%\n  mutate(p111_pretreatment = replace_na(p111_pretreatment, p111_pretreatment_lod),\n         p111_prevax = replace_na(p111_prevax, p111_prevax_lod),\n         p111_postvax = replace_na(p111_postvax, p111_postvax_lod),\n         p111_w40 = replace_na(p111_w40, p111_w40_lod))",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>PBMCs: Define \"Post-Vaccine\" Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part2_Post-Vaccine.html#implement-quality-control-metric-each-clone-must-have-3-or-more-umi-in-at-least-one-time-point",
    "href": "PBMC_bulkTCR_Part2_Post-Vaccine.html#implement-quality-control-metric-each-clone-must-have-3-or-more-umi-in-at-least-one-time-point",
    "title": "5  PBMCs: Define “Post-Vaccine” Clones",
    "section": "5.5 Implement quality control metric: each clone must have 3 or more UMI in at least one time point",
    "text": "5.5 Implement quality control metric: each clone must have 3 or more UMI in at least one time point\n\np101_betas_qc &lt;- p101_betas %&gt;%\n  filter(p101_pretreatment_umi &gt;= 3 | p101_prevax_umi &gt;= 3 | p101_postvax_umi &gt;= 3)\n\np103_betas_qc &lt;- p103_betas %&gt;%\n  filter(p103_pretreatment_umi &gt;= 3 | p103_prevax_umi &gt;= 3 | p103_postvax_umi &gt;= 3 | p103_w48_umi &gt;= 3 | p103_w72_umi &gt;= 3)\n\np104_betas_qc &lt;- p104_betas %&gt;%\n  filter(p104_pretreatment_umi &gt;= 3 | p104_prevax_umi &gt;= 3 | p104_postvax_umi &gt;= 3 | p104_w48_umi &gt;= 3)\n\np105_betas_qc &lt;- p105_betas %&gt;%\n  filter(p105_pretreatment_umi &gt;= 3 | p105_prevax_umi &gt;= 3 | p105_postvax_umi &gt;= 3 | p105_w48_umi &gt;= 3)\n\np106_betas_qc &lt;- p106_betas %&gt;%\n  filter(p106_pretreatment_umi &gt;= 3 | p106_prevax_umi &gt;= 3 | p106_postvax_umi &gt;= 3 | p106_w48_umi &gt;= 3)\n\np108_betas_qc &lt;- p108_betas %&gt;%\n  filter(p108_pretreatment_umi &gt;= 3 | p108_prevax_umi &gt;= 3 | p108_postvax_umi &gt;= 3 | p108_w32_umi &gt;= 3)\n\np109_betas_qc &lt;- p109_betas %&gt;%\n  filter(p109_pretreatment_umi &gt;= 3 | p109_prevax_umi &gt;= 3 | p109_postvax_umi &gt;= 3 | p109_w48_umi &gt;= 3)\n\np110_betas_qc &lt;- p110_betas %&gt;%\n  filter(p110_pretreatment_umi &gt;= 3 | p110_prevax_umi &gt;= 3 | p110_postvax_umi &gt;= 3 | p110_w38_umi &gt;= 3)\n\np111_betas_qc &lt;- p111_betas %&gt;%\n  filter(p111_pretreatment_umi &gt;= 3 | p111_prevax_umi &gt;= 3 | p111_postvax_umi &gt;= 3 | p111_w40_umi &gt;= 3)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>PBMCs: Define \"Post-Vaccine\" Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part2_Post-Vaccine.html#implement-timepoint-filter-clones-must-be-below-technically-at-given-the-earlier-conversion-of-undetected-values-to-the-lod-the-limit-of-detection-at-the-pre-treatment-and-pre-vax-timepoint",
    "href": "PBMC_bulkTCR_Part2_Post-Vaccine.html#implement-timepoint-filter-clones-must-be-below-technically-at-given-the-earlier-conversion-of-undetected-values-to-the-lod-the-limit-of-detection-at-the-pre-treatment-and-pre-vax-timepoint",
    "title": "5  PBMCs: Define “Post-Vaccine” Clones",
    "section": "5.6 Implement timepoint filter: Clones must be below (technically at, given the earlier conversion of undetected values to the LOD) the limit of detection at the pre-treatment and pre-vax timepoint",
    "text": "5.6 Implement timepoint filter: Clones must be below (technically at, given the earlier conversion of undetected values to the LOD) the limit of detection at the pre-treatment and pre-vax timepoint\n\np101_betas_tp &lt;- p101_betas_qc %&gt;%\n  filter(p101_pretreatment == p101_pretreatment_lod, p101_prevax == p101_prevax_lod)\n\np103_betas_tp &lt;- p103_betas_qc %&gt;%\n  filter(p103_pretreatment == p103_pretreatment_lod, p103_prevax == p103_prevax_lod)\n\np104_betas_tp &lt;- p104_betas_qc %&gt;%\n  filter(p104_pretreatment == p104_pretreatment_lod, p104_prevax == p104_prevax_lod)\n\np105_betas_tp &lt;- p105_betas_qc %&gt;%\n  filter(p105_pretreatment == p105_pretreatment_lod, p105_prevax == p105_prevax_lod)\n\np106_betas_tp &lt;- p106_betas_qc %&gt;%\n  filter(p106_pretreatment == p106_pretreatment_lod, p106_prevax == p106_prevax_lod)\n\np108_betas_tp &lt;- p108_betas_qc %&gt;%\n  filter(p108_pretreatment == p108_pretreatment_lod, p108_prevax == p108_prevax_lod)\n\np109_betas_tp &lt;- p109_betas_qc %&gt;%\n  filter(p109_pretreatment == p109_pretreatment_lod, p109_prevax == p109_prevax_lod)\n\np110_betas_tp &lt;- p110_betas_qc %&gt;%\n  filter(p110_pretreatment == p110_pretreatment_lod, p110_prevax == p110_prevax_lod)\n\np111_betas_tp &lt;- p111_betas_qc %&gt;%\n  filter(p111_pretreatment == p111_pretreatment_lod, p111_prevax == p111_prevax_lod)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>PBMCs: Define \"Post-Vaccine\" Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part2_Post-Vaccine.html#implement-expression-filter-10x-the-lower-limit-of-detection-at-the-post-vax-timepoint",
    "href": "PBMC_bulkTCR_Part2_Post-Vaccine.html#implement-expression-filter-10x-the-lower-limit-of-detection-at-the-post-vax-timepoint",
    "title": "5  PBMCs: Define “Post-Vaccine” Clones",
    "section": "5.7 Implement expression filter: >10x the lower limit of detection at the post-vax timepoint",
    "text": "5.7 Implement expression filter: &gt;10x the lower limit of detection at the post-vax timepoint\n\np101_betas_exp &lt;- p101_betas_tp %&gt;%\n  filter(p101_postvax &gt; p101_postvax_lod*10)\n\np103_betas_exp &lt;- p103_betas_tp %&gt;%\n  filter(p103_postvax &gt; p103_postvax_lod*10)\n\np104_betas_exp &lt;- p104_betas_tp %&gt;%\n  filter(p104_postvax &gt; p104_postvax_lod*10)\n\np105_betas_exp &lt;- p105_betas_tp %&gt;%\n  filter(p105_postvax &gt; p105_postvax_lod*10)\n\np106_betas_exp &lt;- p106_betas_tp %&gt;%\n  filter(p106_postvax &gt; p106_postvax_lod*10)\n\np108_betas_exp &lt;- p108_betas_tp %&gt;%\n  filter(p108_postvax &gt; p108_postvax_lod*10)\n\np109_betas_exp &lt;- p109_betas_tp %&gt;%\n  filter(p109_postvax &gt; p109_postvax_lod*10)\n\np110_betas_exp &lt;- p110_betas_tp %&gt;%\n  filter(p110_postvax &gt; p110_postvax_lod*10)\n\np111_betas_exp &lt;- p111_betas_tp %&gt;%\n  filter(p111_postvax &gt; p111_postvax_lod*10)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>PBMCs: Define \"Post-Vaccine\" Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part2_Post-Vaccine.html#implement-secondary-expression-filter-present-at-all-other-timepoints-after-post-vax",
    "href": "PBMC_bulkTCR_Part2_Post-Vaccine.html#implement-secondary-expression-filter-present-at-all-other-timepoints-after-post-vax",
    "title": "5  PBMCs: Define “Post-Vaccine” Clones",
    "section": "5.8 Implement secondary expression filter: Present at all other timepoints after post-vax",
    "text": "5.8 Implement secondary expression filter: Present at all other timepoints after post-vax\n\np101_betas_pres &lt;- p101_betas_exp\n\np103_betas_pres &lt;- p103_betas_exp %&gt;%\n  filter(p103_w48 &gt; p103_w48_lod,\n         p103_w72 &gt; p103_w72_lod)\n\np104_betas_pres &lt;- p104_betas_exp %&gt;%\n  filter(p104_w48 &gt; p104_w48_lod)\n\np105_betas_pres &lt;- p105_betas_exp %&gt;%\n  filter(p105_w48 &gt; p105_w48_lod)\n\np106_betas_pres &lt;- p106_betas_exp %&gt;%\n  filter(p106_w48 &gt; p106_w48_lod)\n\np108_betas_pres &lt;- p108_betas_exp %&gt;%\n  filter(p108_w32 &gt; p108_w32_lod)\n\np109_betas_pres &lt;- p109_betas_exp %&gt;%\n  filter(p109_w48 &gt; p109_w48_lod)\n\np110_betas_pres &lt;- p110_betas_exp %&gt;%\n  filter(p110_w38 &gt; p110_w38_lod)\n\np111_betas_pres &lt;- p111_betas_exp %&gt;%\n  filter(p111_w40 &gt; p111_w40_lod)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>PBMCs: Define \"Post-Vaccine\" Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part2_Post-Vaccine.html#save-the-post-vaccine-beta-clonotypes",
    "href": "PBMC_bulkTCR_Part2_Post-Vaccine.html#save-the-post-vaccine-beta-clonotypes",
    "title": "5  PBMCs: Define “Post-Vaccine” Clones",
    "section": "5.9 Save the “Post-Vaccine” beta clonotypes",
    "text": "5.9 Save the “Post-Vaccine” beta clonotypes\n\n# Add a column for patient\np101_betas_pres &lt;- p101_betas_pres %&gt;%\n  mutate(Patient = \"P101\")\np103_betas_pres &lt;- p103_betas_pres %&gt;%\n  mutate(Patient = \"P103\")\np104_betas_pres &lt;- p104_betas_pres %&gt;%\n  mutate(Patient = \"P104\")\np105_betas_pres &lt;- p105_betas_pres %&gt;%\n  mutate(Patient = \"P105\")\np106_betas_pres &lt;- p106_betas_pres %&gt;%\n  mutate(Patient = \"P106\")\np108_betas_pres &lt;- p108_betas_pres %&gt;%\n  mutate(Patient = \"P108\")\np109_betas_pres &lt;- p109_betas_pres %&gt;%\n  mutate(Patient = \"P109\")\np110_betas_pres &lt;- p110_betas_pres %&gt;%\n  mutate(Patient = \"P110\")\np111_betas_pres &lt;- p111_betas_pres %&gt;%\n  mutate(Patient = \"P111\")\n\n# Gather all De-novo clones\npost_vax_betas_pres &lt;- do.call(rbind, list(p101_betas_pres[,c(\"Beta_clonotype\", \"Patient\")],\n                                          p103_betas_pres[,c(\"Beta_clonotype\", \"Patient\")],\n                                          p104_betas_pres[,c(\"Beta_clonotype\", \"Patient\")],\n                                          p105_betas_pres[,c(\"Beta_clonotype\", \"Patient\")],\n                                          p106_betas_pres[,c(\"Beta_clonotype\", \"Patient\")],\n                                          p108_betas_pres[,c(\"Beta_clonotype\", \"Patient\")],\n                                          p109_betas_pres[,c(\"Beta_clonotype\", \"Patient\")],\n                                          p110_betas_pres[,c(\"Beta_clonotype\", \"Patient\")],\n                                          p111_betas_pres[,c(\"Beta_clonotype\", \"Patient\")]))\n\nwrite.csv(post_vax_betas_pres, \"PBMC_Post-Vaccine_Beta_Chains_Part2.csv\")",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>PBMCs: Define \"Post-Vaccine\" Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part2_Post-Vaccine.html#get-session-info",
    "href": "PBMC_bulkTCR_Part2_Post-Vaccine.html#get-session-info",
    "title": "5  PBMCs: Define “Post-Vaccine” Clones",
    "section": "5.10 Get session info",
    "text": "5.10 Get session info\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Rocky Linux 8.10 (Green Obsidian)\n\nMatrix products: default\nBLAS/LAPACK: /usr/lib64/libopenblasp-r0.3.15.so;  LAPACK version 3.9.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: America/New_York\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] lubridate_1.9.4 forcats_1.0.0   stringr_1.5.1   purrr_1.0.4    \n [5] readr_2.1.5     tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1  \n [9] tidyverse_2.0.0 dplyr_1.1.4    \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6      jsonlite_1.8.9    compiler_4.3.2    tidyselect_1.2.1 \n [5] scales_1.3.0      fastmap_1.2.0     R6_2.6.1          generics_0.1.3   \n [9] knitr_1.49        htmlwidgets_1.6.4 munsell_0.5.1     pillar_1.10.1    \n[13] tzdb_0.5.0        rlang_1.1.5       stringi_1.8.4     xfun_0.50        \n[17] timechange_0.3.0  cli_3.6.3         withr_3.0.2       magrittr_2.0.3   \n[21] digest_0.6.37     grid_4.3.2        rstudioapi_0.17.1 hms_1.1.3        \n[25] lifecycle_1.0.4   vctrs_0.6.5       evaluate_1.0.1    glue_1.8.0       \n[29] colorspace_2.1-1  rmarkdown_2.29    tools_4.3.2       pkgconfig_2.0.3  \n[33] htmltools_0.5.8.1",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>PBMCs: Define \"Post-Vaccine\" Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part3.html",
    "href": "PBMC_bulkTCR_Part3.html",
    "title": "6  PBMCs: Determine IMP Expanded Clones",
    "section": "",
    "text": "6.1 Set up workspace\n# Libraries\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.5\n✔ ggplot2   3.5.1     ✔ stringr   1.5.1\n✔ lubridate 1.9.4     ✔ tibble    3.2.1\n✔ purrr     1.0.4     ✔ tidyr     1.3.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggplot2)\nlibrary(patchwork)\nlibrary(fossil)\n\nLoading required package: sp\nLoading required package: maps\n\nAttaching package: 'maps'\n\nThe following object is masked from 'package:purrr':\n\n    map\n\nLoading required package: shapefiles\nLoading required package: foreign\n\nAttaching package: 'shapefiles'\n\nThe following objects are masked from 'package:foreign':\n\n    read.dbf, write.dbf\n\nlibrary(ggridges)\nlibrary(webr)\nlibrary(scales)\n\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\n# Function to calculate lower limit of detection\nlod &lt;- function(dat){\n  10^(floor(log10(min(dat, na.rm = TRUE))))\n}\n\n# Function to calculate the minimum value in a bimodal distribution\nfind_minimum &lt;- function(fc_vector, adjust = 1){\n  # Write density function\n  dx &lt;- density(fc_vector, adjust = adjust)\n  # Calculate first derivative\n  slope &lt;- (diff(dx$y)/diff(dx$x))\n  # Find where the derivatives change sign\n  change_rows &lt;- which(diff(sign(slope))!=0)\n  change_x &lt;- dx$x[change_rows]\n  # Extract the second time it changes sign\n  min_x &lt;- change_x[2]\n  # second_min_x &lt;- change_x[4]\n  return(min_x)\n}",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>PBMCs: Determine IMP Expanded Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part3.html#categorizations-of-temporally-dynamic-clones",
    "href": "PBMC_bulkTCR_Part3.html#categorizations-of-temporally-dynamic-clones",
    "title": "6  PBMCs: Determine IMP Expanded Clones",
    "section": "6.2 Categorizations of temporally dynamic clones",
    "text": "6.2 Categorizations of temporally dynamic clones\nDefintion of Post-Vaccine clones in PBMCs 1. Quality control metric: the clone must have 3 or more UMI in at least one time point 2. Below the limit of detection pre-treatment and Pre-vaccine 3. &gt;10x lower limit at post-vaccine 4. Present at all time points post-vaccine\nDefintion of Post-Nivolumab expanded clones in PBMCs 1. Quality control metric: the clone must have 3 or more UMI in at least one time point 2. Below the limit of detection post-nivolumab 3. &gt;10x lower limit post-nivolumab 4. Present at all time points after post-nivolumab\nDefintion of Existing clones in PBMCs 1. Quality control metric: the clone must have 3 or more UMI in at least one time point 2. &gt;10x lower limit pre-treatment 3. Present at all time points",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>PBMCs: Determine IMP Expanded Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part3.html#load-pbmc-data",
    "href": "PBMC_bulkTCR_Part3.html#load-pbmc-data",
    "title": "6  PBMCs: Determine IMP Expanded Clones",
    "section": "6.3 Load PBMC data",
    "text": "6.3 Load PBMC data\n\np101_betas &lt;- read.csv(\"p101_betas_merged_Part1.csv\")\np103_betas &lt;- read.csv(\"p103_betas_merged_Part1.csv\")\np104_betas &lt;- read.csv(\"p104_betas_merged_Part1.csv\")\np105_betas &lt;- read.csv(\"p105_betas_merged_Part1.csv\")\np106_betas &lt;- read.csv(\"p106_betas_merged_Part1.csv\")\np108_betas &lt;- read.csv(\"p108_betas_merged_Part1.csv\")\np109_betas &lt;- read.csv(\"p109_betas_merged_Part1.csv\")\np110_betas &lt;- read.csv(\"p110_betas_merged_Part1.csv\")\np111_betas &lt;- read.csv(\"p111_betas_merged_Part1.csv\")",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>PBMCs: Determine IMP Expanded Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part3.html#change-all-undetected-longitudinal-values-to-the-lower-limit-of-detection-per-timepoint",
    "href": "PBMC_bulkTCR_Part3.html#change-all-undetected-longitudinal-values-to-the-lower-limit-of-detection-per-timepoint",
    "title": "6  PBMCs: Determine IMP Expanded Clones",
    "section": "6.4 Change all undetected longitudinal values to the lower limit of detection per timepoint",
    "text": "6.4 Change all undetected longitudinal values to the lower limit of detection per timepoint\nMakes plotting the movement of clones over time easier!\n\n# Generate the lower limit of detection before any filters are applied\np101_pretreatment_lod &lt;- lod(p101_betas$p101_pretreatment)\np101_prevax_lod &lt;- lod(p101_betas$p101_prevax)\np101_postvax_lod &lt;- lod(p101_betas$p101_postvax)\n\np103_pretreatment_lod &lt;- lod(p103_betas$p103_pretreatment)\np103_prevax_lod &lt;- lod(p103_betas$p103_prevax)\np103_postvax_lod &lt;- lod(p103_betas$p103_postvax)\np103_w48_lod &lt;- lod(p103_betas$p103_w48)\np103_w72_lod &lt;- lod(p103_betas$p103_w72)\n\np104_pretreatment_lod &lt;- lod(p104_betas$p104_pretreatment)\np104_prevax_lod &lt;- lod(p104_betas$p104_prevax)\np104_postvax_lod &lt;- lod(p104_betas$p104_postvax)\np104_w48_lod &lt;- lod(p104_betas$p104_w48)\n\np105_pretreatment_lod &lt;- lod(p105_betas$p105_pretreatment)\np105_prevax_lod &lt;- lod(p105_betas$p105_prevax)\np105_postvax_lod &lt;- lod(p105_betas$p105_postvax)\np105_w48_lod &lt;- lod(p105_betas$p105_w48)\n\np106_pretreatment_lod &lt;- lod(p106_betas$p106_pretreatment)\np106_prevax_lod &lt;- lod(p106_betas$p106_prevax)\np106_postvax_lod &lt;- lod(p106_betas$p106_postvax)\np106_w48_lod &lt;- lod(p106_betas$p106_w48)\n\np108_pretreatment_lod &lt;- lod(p108_betas$p108_pretreatment)\np108_prevax_lod &lt;- lod(p108_betas$p108_prevax)\np108_postvax_lod &lt;- lod(p108_betas$p108_postvax)\np108_w32_lod &lt;- lod(p108_betas$p108_w32)\n\np109_pretreatment_lod &lt;- lod(p109_betas$p109_pretreatment)\np109_prevax_lod &lt;- lod(p109_betas$p109_prevax)\np109_postvax_lod &lt;- lod(p109_betas$p109_postvax)\np109_w48_lod &lt;- lod(p109_betas$p109_w48)\n\np110_pretreatment_lod &lt;- lod(p110_betas$p110_pretreatment)\np110_prevax_lod &lt;- lod(p110_betas$p110_prevax)\np110_postvax_lod &lt;- lod(p110_betas$p110_postvax)\np110_w38_lod &lt;- lod(p110_betas$p110_w38)\n\np111_pretreatment_lod &lt;- lod(p111_betas$p111_pretreatment)\np111_prevax_lod &lt;- lod(p111_betas$p111_prevax)\np111_postvax_lod &lt;- lod(p111_betas$p111_postvax)\np111_w40_lod &lt;- lod(p111_betas$p111_w40)\n\n# Update undetected values to the LOD\np101_betas &lt;- p101_betas %&gt;%\n  mutate(p101_pretreatment = replace_na(p101_pretreatment, p101_pretreatment_lod),\n         p101_prevax = replace_na(p101_prevax, p101_prevax_lod),\n         p101_postvax = replace_na(p101_postvax, p101_postvax_lod))\n\np103_betas &lt;- p103_betas %&gt;%\n  mutate(p103_pretreatment = replace_na(p103_pretreatment, p103_pretreatment_lod),\n         p103_prevax = replace_na(p103_prevax, p103_prevax_lod),\n         p103_postvax = replace_na(p103_postvax, p103_postvax_lod),\n         p103_w48 = replace_na(p103_w48, p103_w48_lod),\n         p103_w72 = replace_na(p103_w72, p103_w72_lod))\np104_betas &lt;- p104_betas %&gt;%\n  mutate(p104_pretreatment = replace_na(p104_pretreatment, p104_pretreatment_lod),\n         p104_prevax = replace_na(p104_prevax, p104_prevax_lod),\n         p104_postvax = replace_na(p104_postvax, p104_postvax_lod),\n         p104_w48 = replace_na(p104_w48, p104_w48_lod))\np105_betas &lt;- p105_betas %&gt;%\n  mutate(p105_pretreatment = replace_na(p105_pretreatment, p105_pretreatment_lod),\n         p105_prevax = replace_na(p105_prevax, p105_prevax_lod),\n         p105_postvax = replace_na(p105_postvax, p105_postvax_lod),\n         p105_w48 = replace_na(p105_w48, p105_w48_lod))\np106_betas &lt;- p106_betas %&gt;%\n  mutate(p106_pretreatment = replace_na(p106_pretreatment, p106_pretreatment_lod),\n         p106_prevax = replace_na(p106_prevax, p106_prevax_lod),\n         p106_postvax = replace_na(p106_postvax, p106_postvax_lod),\n         p106_w48 = replace_na(p106_w48, p106_w48_lod))\np108_betas &lt;- p108_betas %&gt;%\n  mutate(p108_pretreatment = replace_na(p108_pretreatment, p108_pretreatment_lod),\n         p108_prevax = replace_na(p108_prevax, p108_prevax_lod),\n         p108_postvax = replace_na(p108_postvax, p108_postvax_lod),\n         p108_w32 = replace_na(p108_w32, p108_w32_lod))\np109_betas &lt;- p109_betas %&gt;%\n  mutate(p109_pretreatment = replace_na(p109_pretreatment, p109_pretreatment_lod),\n         p109_prevax = replace_na(p109_prevax, p109_prevax_lod),\n         p109_postvax = replace_na(p109_postvax, p109_postvax_lod),\n         p109_w48 = replace_na(p109_w48, p109_w48_lod))\np110_betas &lt;- p110_betas %&gt;%\n  mutate(p110_pretreatment = replace_na(p110_pretreatment, p110_pretreatment_lod),\n         p110_prevax = replace_na(p110_prevax, p110_prevax_lod),\n         p110_postvax = replace_na(p110_postvax, p110_postvax_lod),\n         p110_w38 = replace_na(p110_w38, p110_w38_lod))\np111_betas &lt;- p111_betas %&gt;%\n  mutate(p111_pretreatment = replace_na(p111_pretreatment, p111_pretreatment_lod),\n         p111_prevax = replace_na(p111_prevax, p111_prevax_lod),\n         p111_postvax = replace_na(p111_postvax, p111_postvax_lod),\n         p111_w40 = replace_na(p111_w40, p111_w40_lod))",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>PBMCs: Determine IMP Expanded Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part3.html#load-categorized-clones",
    "href": "PBMC_bulkTCR_Part3.html#load-categorized-clones",
    "title": "6  PBMCs: Determine IMP Expanded Clones",
    "section": "6.5 Load categorized clones",
    "text": "6.5 Load categorized clones\n\npreexisting_betas &lt;- read.csv(\"PBMC_Existing_Beta_Chains_Part2.csv\", row.names = 1)\npostnivo_betas &lt;- read.csv(\"PBMC_Post-Nivolumab_Beta_Chains_Part2.csv\", row.names = 1)\npostvax_betas &lt;- read.csv(\"PBMC_Post-Vaccine_Beta_Chains_Part2.csv\", row.names = 1)\n\n# Check how many beta chains are shared across patients\ntable(duplicated(postvax_betas$Beta_clonotype))\n\n\nFALSE  TRUE \n 8656    25 \n\ntable(duplicated(postnivo_betas$Beta_clonotype))\n\n\nFALSE  TRUE \n 5621    12 \n\ntable(duplicated(preexisting_betas$Beta_clonotype))\n\n\nFALSE  TRUE \n49282   337",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>PBMCs: Determine IMP Expanded Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part3.html#integrate-categories-into-data-adding-an-additional-category-called-other-for-clones-who-do-not-match-the-other-criteria",
    "href": "PBMC_bulkTCR_Part3.html#integrate-categories-into-data-adding-an-additional-category-called-other-for-clones-who-do-not-match-the-other-criteria",
    "title": "6  PBMCs: Determine IMP Expanded Clones",
    "section": "6.6 Integrate categories into data, adding an additional category called “Other” for clones who do not match the other criteria",
    "text": "6.6 Integrate categories into data, adding an additional category called “Other” for clones who do not match the other criteria\n\np101_betas_typed &lt;- p101_betas %&gt;%\n  mutate(Type = case_when(Beta_clonotype %in% filter(postvax_betas, postvax_betas$Patient == \"P101\")$Beta_clonotype ~ \"Post-Vaccine\",\n                          Beta_clonotype %in% filter(postnivo_betas, postnivo_betas$Patient == \"P101\")$Beta_clonotype ~ \"Post-Nivolumab\",\n                          Beta_clonotype %in% filter(preexisting_betas, preexisting_betas$Patient == \"P101\")$Beta_clonotype ~ \"Existing\"),\n         Type = case_when(!is.na(Type) ~ Type,\n                          is.na(Type) ~ \"Other\"),\n         Patient = \"P101\")\n\np103_betas_typed &lt;- p103_betas %&gt;%\n  mutate(Type = case_when(Beta_clonotype %in% filter(postvax_betas, postvax_betas$Patient == \"P103\")$Beta_clonotype ~ \"Post-Vaccine\",\n                          Beta_clonotype %in% filter(postnivo_betas, postnivo_betas$Patient == \"P103\")$Beta_clonotype ~ \"Post-Nivolumab\",\n                          Beta_clonotype %in% filter(preexisting_betas, preexisting_betas$Patient == \"P103\")$Beta_clonotype ~ \"Existing\"),\n         Type = case_when(!is.na(Type) ~ Type,\n                          is.na(Type) ~ \"Other\"),\n         Patient = \"P103\")\n\np104_betas_typed &lt;- p104_betas %&gt;%\n  mutate(Type = case_when(Beta_clonotype %in% filter(postvax_betas, postvax_betas$Patient == \"P104\")$Beta_clonotype ~ \"Post-Vaccine\",\n                          Beta_clonotype %in% filter(postnivo_betas, postnivo_betas$Patient == \"P104\")$Beta_clonotype ~ \"Post-Nivolumab\",\n                          Beta_clonotype %in% filter(preexisting_betas, preexisting_betas$Patient == \"P104\")$Beta_clonotype ~ \"Existing\"),\n         Type = case_when(!is.na(Type) ~ Type,\n                          is.na(Type) ~ \"Other\"),\n         Patient = \"P104\")\n\np105_betas_typed &lt;- p105_betas %&gt;%\n  mutate(Type = case_when(Beta_clonotype %in% filter(postvax_betas, postvax_betas$Patient == \"P105\")$Beta_clonotype ~ \"Post-Vaccine\",\n                          Beta_clonotype %in% filter(postnivo_betas, postnivo_betas$Patient == \"P105\")$Beta_clonotype ~ \"Post-Nivolumab\",\n                          Beta_clonotype %in% filter(preexisting_betas, preexisting_betas$Patient == \"P105\")$Beta_clonotype ~ \"Existing\"),\n         Type = case_when(!is.na(Type) ~ Type,\n                          is.na(Type) ~ \"Other\"),\n         Patient = \"P105\")\n\np106_betas_typed &lt;- p106_betas %&gt;%\n  mutate(Type = case_when(Beta_clonotype %in% filter(postvax_betas, postvax_betas$Patient == \"P106\")$Beta_clonotype ~ \"Post-Vaccine\",\n                          Beta_clonotype %in% filter(postnivo_betas, postnivo_betas$Patient == \"P106\")$Beta_clonotype ~ \"Post-Nivolumab\",\n                          Beta_clonotype %in% filter(preexisting_betas, preexisting_betas$Patient == \"P106\")$Beta_clonotype ~ \"Existing\"),\n         Type = case_when(!is.na(Type) ~ Type,\n                          is.na(Type) ~ \"Other\"),\n         Patient = \"P106\")\n\np108_betas_typed &lt;- p108_betas %&gt;%\n  mutate(Type = case_when(Beta_clonotype %in% filter(postvax_betas, postvax_betas$Patient == \"P108\")$Beta_clonotype ~ \"Post-Vaccine\",\n                          Beta_clonotype %in% filter(postnivo_betas, postnivo_betas$Patient == \"P108\")$Beta_clonotype ~ \"Post-Nivolumab\",\n                          Beta_clonotype %in% filter(preexisting_betas, preexisting_betas$Patient == \"P108\")$Beta_clonotype ~ \"Existing\"),\n         Type = case_when(!is.na(Type) ~ Type,\n                          is.na(Type) ~ \"Other\"),\n         Patient = \"P108\")\n\np109_betas_typed &lt;- p109_betas %&gt;%\n  mutate(Type = case_when(Beta_clonotype %in% filter(postvax_betas, postvax_betas$Patient == \"P109\")$Beta_clonotype ~ \"Post-Vaccine\",\n                          Beta_clonotype %in% filter(postnivo_betas, postnivo_betas$Patient == \"P109\")$Beta_clonotype ~ \"Post-Nivolumab\",\n                          Beta_clonotype %in% filter(preexisting_betas, preexisting_betas$Patient == \"P109\")$Beta_clonotype ~ \"Existing\"),\n         Type = case_when(!is.na(Type) ~ Type,\n                          is.na(Type) ~ \"Other\"),\n         Patient = \"P109\")\n\np110_betas_typed &lt;- p110_betas %&gt;%\n  mutate(Type = case_when(Beta_clonotype %in% filter(postvax_betas, postvax_betas$Patient == \"P110\")$Beta_clonotype ~ \"Post-Vaccine\",\n                          Beta_clonotype %in% filter(postnivo_betas, postnivo_betas$Patient == \"P110\")$Beta_clonotype ~ \"Post-Nivolumab\",\n                          Beta_clonotype %in% filter(preexisting_betas, preexisting_betas$Patient == \"P110\")$Beta_clonotype ~ \"Existing\"),\n         Type = case_when(!is.na(Type) ~ Type,\n                          is.na(Type) ~ \"Other\"),\n         Patient = \"P110\")\n\np111_betas_typed &lt;- p111_betas %&gt;%\n  mutate(Type = case_when(Beta_clonotype %in% filter(postvax_betas, postvax_betas$Patient == \"P111\")$Beta_clonotype ~ \"Post-Vaccine\",\n                          Beta_clonotype %in% filter(postnivo_betas, postnivo_betas$Patient == \"P111\")$Beta_clonotype ~ \"Post-Nivolumab\",\n                          Beta_clonotype %in% filter(preexisting_betas, preexisting_betas$Patient == \"P111\")$Beta_clonotype ~ \"Existing\"),\n         Type = case_when(!is.na(Type) ~ Type,\n                          is.na(Type) ~ \"Other\"),\n         Patient = \"P111\")",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>PBMCs: Determine IMP Expanded Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part3.html#save-categorized-clones",
    "href": "PBMC_bulkTCR_Part3.html#save-categorized-clones",
    "title": "6  PBMCs: Determine IMP Expanded Clones",
    "section": "6.7 Save categorized clones",
    "text": "6.7 Save categorized clones\n\nwrite.csv(p101_betas_typed, \"p101_betas_merged_typed_full_Part3.csv\", row.names = FALSE)\nwrite.csv(p103_betas_typed, \"p103_betas_merged_typed_full_Part3.csv\", row.names = FALSE)\nwrite.csv(p104_betas_typed, \"p104_betas_merged_typed_full_Part3.csv\", row.names = FALSE)\nwrite.csv(p105_betas_typed, \"p105_betas_merged_typed_full_Part3.csv\", row.names = FALSE)\nwrite.csv(p106_betas_typed, \"p106_betas_merged_typed_full_Part3.csv\", row.names = FALSE)\nwrite.csv(p108_betas_typed, \"p108_betas_merged_typed_full_Part3.csv\", row.names = FALSE)\nwrite.csv(p109_betas_typed, \"p109_betas_merged_typed_full_Part3.csv\", row.names = FALSE)\nwrite.csv(p110_betas_typed, \"p110_betas_merged_typed_full_Part3.csv\", row.names = FALSE)\nwrite.csv(p111_betas_typed, \"p111_betas_merged_typed_full_Part3.csv\", row.names = FALSE)",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>PBMCs: Determine IMP Expanded Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part3.html#remove-clones-deemed-other-from-data",
    "href": "PBMC_bulkTCR_Part3.html#remove-clones-deemed-other-from-data",
    "title": "6  PBMCs: Determine IMP Expanded Clones",
    "section": "6.8 Remove clones deemed “Other” from data",
    "text": "6.8 Remove clones deemed “Other” from data\n\np101_betas_typed &lt;- p101_betas_typed %&gt;%\n  filter(Type != \"Other\") %&gt;%\n  mutate(Type = factor(Type, levels = c(\"Post-Vaccine\", \"Post-Nivolumab\", \"Existing\")))\np103_betas_typed &lt;- p103_betas_typed %&gt;%\n  filter(Type != \"Other\") %&gt;%\n  mutate(Type = factor(Type, levels = c(\"Post-Vaccine\", \"Post-Nivolumab\", \"Existing\")))\np104_betas_typed &lt;- p104_betas_typed %&gt;%\n  filter(Type != \"Other\") %&gt;%\n  mutate(Type = factor(Type, levels = c(\"Post-Vaccine\", \"Post-Nivolumab\", \"Existing\")))\np105_betas_typed &lt;- p105_betas_typed %&gt;%\n  filter(Type != \"Other\") %&gt;%\n  mutate(Type = factor(Type, levels = c(\"Post-Vaccine\", \"Post-Nivolumab\", \"Existing\")))\np106_betas_typed &lt;- p106_betas_typed %&gt;%\n  filter(Type != \"Other\") %&gt;%\n  mutate(Type = factor(Type, levels = c(\"Post-Vaccine\", \"Post-Nivolumab\", \"Existing\")))\np108_betas_typed &lt;- p108_betas_typed %&gt;%\n  filter(Type != \"Other\") %&gt;%\n  mutate(Type = factor(Type, levels = c(\"Post-Vaccine\", \"Post-Nivolumab\", \"Existing\")))\np109_betas_typed &lt;- p109_betas_typed %&gt;%\n  filter(Type != \"Other\") %&gt;%\n  mutate(Type = factor(Type, levels = c(\"Post-Vaccine\", \"Post-Nivolumab\", \"Existing\")))\np110_betas_typed &lt;- p110_betas_typed %&gt;%\n  filter(Type != \"Other\") %&gt;%\n  mutate(Type = factor(Type, levels = c(\"Post-Vaccine\", \"Post-Nivolumab\", \"Existing\")))\np111_betas_typed &lt;- p111_betas_typed %&gt;%\n  filter(Type != \"Other\") %&gt;%\n  mutate(Type = factor(Type, levels = c(\"Post-Vaccine\", \"Post-Nivolumab\", \"Existing\")))",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>PBMCs: Determine IMP Expanded Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part3.html#plot-ridgeplot-split-by-patient-and-tcr-type",
    "href": "PBMC_bulkTCR_Part3.html#plot-ridgeplot-split-by-patient-and-tcr-type",
    "title": "6  PBMCs: Determine IMP Expanded Clones",
    "section": "6.9 Plot ridgeplot split by patient and TCR type",
    "text": "6.9 Plot ridgeplot split by patient and TCR type\n\np101_ridge &lt;- p101_betas_typed %&gt;%\n  ggplot(aes(x = log2(max_fc_pool_vs_dmso), y = Type, fill = Type)) +\n  geom_density_ridges(bandwidth = 0.3, scale = 2) +\n  # coord_cartesian(xlim = c(1.5, 1000)) +\n  scale_fill_manual(values = c(\"#0072B2\", \"darkgoldenrod3\", \"grey70\")) +\n  # scale_x_log10(breaks=c(1.5, 10, 100, 1000)) +\n  xlab(\"Invitro Expansion\") +\n  ylab(\"Number of clones\") +\n  ggtitle(\"P101\") +\n  theme_classic() +\n  theme(plot.title = element_text(hjust=0.5))\n\np103_ridge &lt;- p103_betas_typed %&gt;%\n  ggplot(aes(x = log2(max_fc_pool_vs_dmso), y = Type, fill = Type)) +\n  geom_density_ridges(bandwidth = 0.3, scale = 2) +\n  # coord_cartesian(xlim = c(1.5, 1000)) +\n  scale_fill_manual(values = c(\"#0072B2\", \"darkgoldenrod3\", \"grey70\")) +\n  # scale_x_log10(breaks=c(1.5, 10, 100, 1000)) +\n  xlab(\"Invitro Expansion\") +\n  ylab(\"Number of clones\") +\n  ggtitle(\"P103\") +\n  theme_classic() +\n  theme(plot.title = element_text(hjust=0.5))\n\np104_ridge &lt;- p104_betas_typed %&gt;%\n  ggplot(aes(x = log2(max_fc_pool_vs_dmso), y = Type, fill = Type)) +\n  geom_density_ridges(bandwidth = 0.3, scale = 2) +\n  # coord_cartesian(xlim = c(1.5, 1000)) +\n  scale_fill_manual(values = c(\"#0072B2\", \"darkgoldenrod3\", \"grey70\")) +\n  # scale_x_log10(breaks=c(1.5, 10, 100, 1000)) +\n  xlab(\"Invitro Expansion\") +\n  ylab(\"Number of clones\") +\n  ggtitle(\"P104\") +\n  theme_classic() +\n  theme(plot.title = element_text(hjust=0.5))\n\np105_ridge &lt;- p105_betas_typed %&gt;%\n  ggplot(aes(x = log2(max_fc_pool_vs_dmso), y = Type, fill = Type)) +\n  geom_density_ridges(bandwidth = 0.3, scale = 2) +\n  # coord_cartesian(xlim = c(1.5, 1000)) +\n  scale_fill_manual(values = c(\"#0072B2\", \"darkgoldenrod3\", \"grey70\")) +\n  # scale_x_log10(breaks=c(1.5, 10, 100, 1000)) +\n  xlab(\"Invitro Expansion\") +\n  ylab(\"Number of clones\") +\n  ggtitle(\"P105\") +\n  theme_classic() +\n  theme(plot.title = element_text(hjust=0.5))\n\np106_ridge &lt;- p106_betas_typed %&gt;%\n  ggplot(aes(x = log2(max_fc_pool_vs_dmso), y = Type, fill = Type)) +\n  geom_density_ridges(bandwidth = 0.3, scale = 2) +\n  # coord_cartesian(xlim = c(1.5, 1000)) +\n  scale_fill_manual(values = c(\"#0072B2\", \"darkgoldenrod3\", \"grey70\")) +\n  # scale_x_log10(breaks=c(1.5, 10, 100, 1000)) +\n  xlab(\"Invitro Expansion\") +\n  ylab(\"Number of clones\") +\n  ggtitle(\"P106\") +\n  theme_classic() +\n  theme(plot.title = element_text(hjust=0.5))\n\np108_ridge &lt;- p108_betas_typed %&gt;%\n  ggplot(aes(x = log2(max_fc_pool_vs_dmso), y = Type, fill = Type)) +\n  geom_density_ridges(bandwidth = 0.3, scale = 2) +\n  # coord_cartesian(xlim = c(1.5, 1000)) +\n  scale_fill_manual(values = c(\"#0072B2\", \"darkgoldenrod3\", \"grey70\")) +\n  # scale_x_log10(breaks=c(1.5, 10, 100, 1000)) +\n  xlab(\"Invitro Expansion\") +\n  ylab(\"Number of clones\") +\n  ggtitle(\"P108\") +\n  theme_classic() +\n  theme(plot.title = element_text(hjust=0.5))\n\np109_ridge &lt;- p109_betas_typed %&gt;%\n  ggplot(aes(x = log2(max_fc_pool_vs_dmso), y = Type, fill = Type)) +\n  geom_density_ridges(bandwidth = 0.3, scale = 2) +\n  # coord_cartesian(xlim = c(1.5, 1000)) +\n  scale_fill_manual(values = c(\"#0072B2\", \"darkgoldenrod3\", \"grey70\")) +\n  # scale_x_log10(breaks=c(1.5, 10, 100, 1000)) +\n  xlab(\"Invitro Expansion\") +\n  ylab(\"Number of clones\") +\n  ggtitle(\"P109\") +\n  theme_classic() +\n  theme(plot.title = element_text(hjust=0.5))\n\np110_ridge &lt;- p110_betas_typed %&gt;%\n  ggplot(aes(x = log2(max_fc_pool_vs_dmso), y = Type, fill = Type)) +\n  geom_density_ridges(bandwidth = 0.3, scale = 2) +\n  # coord_cartesian(xlim = c(1.5, 1000)) +\n  scale_fill_manual(values = c(\"#0072B2\", \"darkgoldenrod3\", \"grey70\")) +\n  # scale_x_log10(breaks=c(1.5, 10, 100, 1000)) +\n  xlab(\"Invitro Expansion\") +\n  ylab(\"Number of clones\") +\n  ggtitle(\"P110\") +\n  theme_classic() +\n  theme(plot.title = element_text(hjust=0.5))\n\np111_ridge &lt;- p111_betas_typed %&gt;%\n  ggplot(aes(x = log2(max_fc_pool_vs_dmso), y = Type, fill = Type)) +\n  geom_density_ridges(bandwidth = 0.3, scale = 2) +\n  # coord_cartesian(xlim = c(1.5, 1000)) +\n  scale_fill_manual(values = c(\"#0072B2\", \"darkgoldenrod3\", \"grey70\")) +\n  # scale_x_log10(breaks=c(1.5, 10, 100, 1000)) +\n  xlab(\"Invitro Expansion\") +\n  ylab(\"Number of clones\") +\n  ggtitle(\"P111\") +\n  theme_classic() +\n  theme(plot.title = element_text(hjust=0.5))\n\np101_ridge + p103_ridge + p104_ridge + p105_ridge + p106_ridge +\n  p108_ridge + p109_ridge + p110_ridge + p111_ridge + plot_layout(guides = 'collect', \n                                                                  axis_titles = \"collect\", \n                                                                  ncol = 3)",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>PBMCs: Determine IMP Expanded Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part3.html#find-a-cutoff-for-invitro-expansion-per-patient",
    "href": "PBMC_bulkTCR_Part3.html#find-a-cutoff-for-invitro-expansion-per-patient",
    "title": "6  PBMCs: Determine IMP Expanded Clones",
    "section": "6.10 Find a cutoff for invitro expansion per patient",
    "text": "6.10 Find a cutoff for invitro expansion per patient\n\np101_max_fc &lt;- p101_betas_typed$max_fc_pool_vs_dmso[!is.na(p101_betas_typed$max_fc_pool_vs_dmso)]\np103_max_fc &lt;- p103_betas_typed$max_fc_pool_vs_dmso[!is.na(p103_betas_typed$max_fc_pool_vs_dmso)]\np104_max_fc &lt;- p104_betas_typed$max_fc_pool_vs_dmso[!is.na(p104_betas_typed$max_fc_pool_vs_dmso)]\np105_max_fc &lt;- p105_betas_typed$max_fc_pool_vs_dmso[!is.na(p105_betas_typed$max_fc_pool_vs_dmso)]\np106_max_fc &lt;- p106_betas_typed$max_fc_pool_vs_dmso[!is.na(p106_betas_typed$max_fc_pool_vs_dmso)]\np108_max_fc &lt;- p108_betas_typed$max_fc_pool_vs_dmso[!is.na(p108_betas_typed$max_fc_pool_vs_dmso)]\np109_max_fc &lt;- p109_betas_typed$max_fc_pool_vs_dmso[!is.na(p109_betas_typed$max_fc_pool_vs_dmso)]\np110_max_fc &lt;- p110_betas_typed$max_fc_pool_vs_dmso[!is.na(p110_betas_typed$max_fc_pool_vs_dmso)]\np111_max_fc &lt;- p111_betas_typed$max_fc_pool_vs_dmso[!is.na(p111_betas_typed$max_fc_pool_vs_dmso)]\n\np101_min_x &lt;- find_minimum(p101_max_fc)\np103_min_x &lt;- find_minimum(p103_max_fc)\np104_min_x &lt;- find_minimum(p104_max_fc)\np105_min_x &lt;- find_minimum(p105_max_fc)\np106_min_x &lt;- find_minimum(p106_max_fc)\np108_min_x &lt;- find_minimum(p108_max_fc)\np109_min_x &lt;- find_minimum(p109_max_fc)\np110_min_x &lt;- find_minimum(p110_max_fc)\np111_min_x &lt;- find_minimum(p111_max_fc)",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>PBMCs: Determine IMP Expanded Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part3.html#ridgeplot-with-expansion-minimum",
    "href": "PBMC_bulkTCR_Part3.html#ridgeplot-with-expansion-minimum",
    "title": "6  PBMCs: Determine IMP Expanded Clones",
    "section": "6.11 Ridgeplot with expansion minimum",
    "text": "6.11 Ridgeplot with expansion minimum\n\nall_pt_ridge &lt;- (p101_ridge + geom_vline(xintercept = log2(p101_min_x), color = \"red\", linetype=\"dashed\")) + \n  (p103_ridge + geom_vline(xintercept = log2(p103_min_x), color = \"red\", linetype=\"dashed\")) + \n  (p104_ridge + geom_vline(xintercept = log2(p104_min_x), color = \"red\", linetype=\"dashed\")) + \n  (p105_ridge + geom_vline(xintercept = log2(p105_min_x), color = \"red\", linetype=\"dashed\")) + \n  (p106_ridge + geom_vline(xintercept = log2(p106_min_x), color = \"red\", linetype=\"dashed\")) +\n  (p108_ridge + geom_vline(xintercept = log2(p108_min_x), color = \"red\", linetype=\"dashed\")) + \n  (p109_ridge + geom_vline(xintercept = log2(p109_min_x), color = \"red\", linetype=\"dashed\")) + \n  (p110_ridge + geom_vline(xintercept = log2(p110_min_x), color = \"red\", linetype=\"dashed\")) + \n  (p111_ridge + geom_vline(xintercept = log2(p111_min_x), color = \"red\", linetype=\"dashed\")) + \n  plot_layout(guides = 'collect', axis_titles = \"collect\", ncol = 3)\n\nall_pt_ridge",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>PBMCs: Determine IMP Expanded Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part3.html#which-clones-see-invitro-expansion-past-local-minimum",
    "href": "PBMC_bulkTCR_Part3.html#which-clones-see-invitro-expansion-past-local-minimum",
    "title": "6  PBMCs: Determine IMP Expanded Clones",
    "section": "6.12 Which clones see invitro expansion past local minimum?",
    "text": "6.12 Which clones see invitro expansion past local minimum?\n\np101_betas_typed &lt;- p101_betas_typed %&gt;%\n  mutate(expanded_local_min = case_when(max_fc_pool_vs_dmso &gt;= p101_min_x ~ TRUE,\n                                        max_fc_pool_vs_dmso &lt; p101_min_x ~ FALSE),\n         Patient = \"P101\")\np103_betas_typed &lt;- p103_betas_typed %&gt;%\n  mutate(expanded_local_min = case_when(max_fc_pool_vs_dmso &gt;= p103_min_x ~ TRUE,\n                                        max_fc_pool_vs_dmso &lt; p103_min_x ~ FALSE),\n         Patient = \"P103\")\np104_betas_typed &lt;- p104_betas_typed %&gt;%\n  mutate(expanded_local_min = case_when(max_fc_pool_vs_dmso &gt;= p104_min_x ~ TRUE,\n                                        max_fc_pool_vs_dmso &lt; p104_min_x ~ FALSE),\n         Patient = \"P104\")\np105_betas_typed &lt;- p105_betas_typed %&gt;%\n  mutate(expanded_local_min = case_when(max_fc_pool_vs_dmso &gt;= p105_min_x ~ TRUE,\n                                        max_fc_pool_vs_dmso &lt; p105_min_x ~ FALSE),\n         Patient = \"P105\")\np106_betas_typed &lt;- p106_betas_typed %&gt;%\n  mutate(expanded_local_min = case_when(max_fc_pool_vs_dmso &gt;= p106_min_x ~ TRUE,\n                                        max_fc_pool_vs_dmso &lt; p106_min_x ~ FALSE),\n         Patient = \"P106\")\np108_betas_typed &lt;- p108_betas_typed %&gt;%\n  mutate(expanded_local_min = case_when(max_fc_pool_vs_dmso &gt;= p108_min_x ~ TRUE,\n                                        max_fc_pool_vs_dmso &lt; p108_min_x ~ FALSE),\n         Patient = \"P108\")\np109_betas_typed &lt;- p109_betas_typed %&gt;%\n  mutate(expanded_local_min = case_when(max_fc_pool_vs_dmso &gt;= p109_min_x ~ TRUE,\n                                        max_fc_pool_vs_dmso &lt; p109_min_x ~ FALSE),\n         Patient = \"P109\")\np110_betas_typed &lt;- p110_betas_typed %&gt;%\n  mutate(expanded_local_min = case_when(max_fc_pool_vs_dmso &gt;= p110_min_x ~ TRUE,\n                                        max_fc_pool_vs_dmso &lt; p110_min_x ~ FALSE),\n         Patient = \"P110\")\np111_betas_typed &lt;- p111_betas_typed %&gt;%\n  mutate(expanded_local_min = case_when(max_fc_pool_vs_dmso &gt;= p111_min_x ~ TRUE,\n                                        max_fc_pool_vs_dmso &lt; p111_min_x ~ FALSE),\n         Patient = \"P111\")",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>PBMCs: Determine IMP Expanded Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part3.html#subset-for-clones-which-pass-invitro-expansion--i.e.-are-imp-expanded-clones",
    "href": "PBMC_bulkTCR_Part3.html#subset-for-clones-which-pass-invitro-expansion--i.e.-are-imp-expanded-clones",
    "title": "6  PBMCs: Determine IMP Expanded Clones",
    "section": "6.13 Subset for clones which pass invitro expansion- i.e. are “IMP expanded clones”",
    "text": "6.13 Subset for clones which pass invitro expansion- i.e. are “IMP expanded clones”\n\np101_betas_imp_expanded &lt;- p101_betas_typed %&gt;%\n  filter(expanded_local_min == TRUE)\np103_betas_imp_expanded &lt;- p103_betas_typed %&gt;%\n  filter(expanded_local_min == TRUE)\np104_betas_imp_expanded &lt;- p104_betas_typed %&gt;%\n  filter(expanded_local_min == TRUE)\np105_betas_imp_expanded &lt;- p105_betas_typed %&gt;%\n  filter(expanded_local_min == TRUE)\np106_betas_imp_expanded &lt;- p106_betas_typed %&gt;%\n  filter(expanded_local_min == TRUE)\np108_betas_imp_expanded &lt;- p108_betas_typed %&gt;%\n  filter(expanded_local_min == TRUE)\np109_betas_imp_expanded &lt;- p109_betas_typed %&gt;%\n  filter(expanded_local_min == TRUE)\np110_betas_imp_expanded &lt;- p110_betas_typed %&gt;%\n  filter(expanded_local_min == TRUE)\np111_betas_imp_expanded &lt;- p111_betas_typed %&gt;%\n  filter(expanded_local_min == TRUE)",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>PBMCs: Determine IMP Expanded Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part3.html#save-typed-clones",
    "href": "PBMC_bulkTCR_Part3.html#save-typed-clones",
    "title": "6  PBMCs: Determine IMP Expanded Clones",
    "section": "6.14 Save typed clones",
    "text": "6.14 Save typed clones\n\nwrite.csv(p101_betas_typed, \"p101_betas_merged_typed_Part3.csv\", row.names = FALSE)\nwrite.csv(p103_betas_typed, \"p103_betas_merged_typed_Part3.csv\", row.names = FALSE)\nwrite.csv(p104_betas_typed, \"p104_betas_merged_typed_Part3.csv\", row.names = FALSE)\nwrite.csv(p105_betas_typed, \"p105_betas_merged_typed_Part3.csv\", row.names = FALSE)\nwrite.csv(p106_betas_typed, \"p106_betas_merged_typed_Part3.csv\", row.names = FALSE)\nwrite.csv(p108_betas_typed, \"p108_betas_merged_typed_Part3.csv\", row.names = FALSE)\nwrite.csv(p109_betas_typed, \"p109_betas_merged_typed_Part3.csv\", row.names = FALSE)\nwrite.csv(p110_betas_typed, \"p110_betas_merged_typed_Part3.csv\", row.names = FALSE)\nwrite.csv(p111_betas_typed, \"p111_betas_merged_typed_Part3.csv\", row.names = FALSE)",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>PBMCs: Determine IMP Expanded Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part3.html#save-expanded-clones",
    "href": "PBMC_bulkTCR_Part3.html#save-expanded-clones",
    "title": "6  PBMCs: Determine IMP Expanded Clones",
    "section": "6.15 Save expanded clones",
    "text": "6.15 Save expanded clones\n\nwrite.csv(p101_betas_imp_expanded, \"p101_betas_merged_typed_imp_expanded_Part3.csv\", row.names = FALSE)\nwrite.csv(p103_betas_imp_expanded, \"p103_betas_merged_typed_imp_expanded_Part3.csv\", row.names = FALSE)\nwrite.csv(p104_betas_imp_expanded, \"p104_betas_merged_typed_imp_expanded_Part3.csv\", row.names = FALSE)\nwrite.csv(p105_betas_imp_expanded, \"p105_betas_merged_typed_imp_expanded_Part3.csv\", row.names = FALSE)\nwrite.csv(p106_betas_imp_expanded, \"p106_betas_merged_typed_imp_expanded_Part3.csv\", row.names = FALSE)\nwrite.csv(p108_betas_imp_expanded, \"p108_betas_merged_typed_imp_expanded_Part3.csv\", row.names = FALSE)\nwrite.csv(p109_betas_imp_expanded, \"p109_betas_merged_typed_imp_expanded_Part3.csv\", row.names = FALSE)\nwrite.csv(p110_betas_imp_expanded, \"p110_betas_merged_typed_imp_expanded_Part3.csv\", row.names = FALSE)\nwrite.csv(p111_betas_imp_expanded, \"p111_betas_merged_typed_imp_expanded_Part3.csv\", row.names = FALSE)",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>PBMCs: Determine IMP Expanded Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part3.html#save-the-invitro-expansion-cutoff-values-per-patient",
    "href": "PBMC_bulkTCR_Part3.html#save-the-invitro-expansion-cutoff-values-per-patient",
    "title": "6  PBMCs: Determine IMP Expanded Clones",
    "section": "6.16 Save the invitro-expansion cutoff values per patient",
    "text": "6.16 Save the invitro-expansion cutoff values per patient\n\npt_vec &lt;- c(\"P101\", \"P103\", \"P104\", \"P105\", \"P106\", \"P108\", \"P109\", \"P110\", \"P111\")\ncutoff_vec &lt;- c(p101_min_x, p103_min_x, p104_min_x, p105_min_x, p106_min_x, p108_min_x, p109_min_x, p110_min_x, p111_min_x)\ncutoff_df &lt;- data.frame(Patient = pt_vec, invitro_exp_cutoff = cutoff_vec)\n\nwrite.csv(cutoff_df, \"IMP_expanded_cuotff_Part3.csv\", row.names = FALSE)",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>PBMCs: Determine IMP Expanded Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part3.html#get-session-info",
    "href": "PBMC_bulkTCR_Part3.html#get-session-info",
    "title": "6  PBMCs: Determine IMP Expanded Clones",
    "section": "6.17 Get session info",
    "text": "6.17 Get session info\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Rocky Linux 8.10 (Green Obsidian)\n\nMatrix products: default\nBLAS/LAPACK: /usr/lib64/libopenblasp-r0.3.15.so;  LAPACK version 3.9.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: America/New_York\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] scales_1.3.0     webr_0.1.5       ggridges_0.5.6   fossil_0.4.0    \n [5] shapefiles_0.7.2 foreign_0.8-90   maps_3.4.2.1     sp_2.2-0        \n [9] patchwork_1.3.0  lubridate_1.9.4  forcats_1.0.0    stringr_1.5.1   \n[13] purrr_1.0.4      readr_2.1.5      tidyr_1.3.1      tibble_3.2.1    \n[17] ggplot2_3.5.1    tidyverse_2.0.0  dplyr_1.1.4     \n\nloaded via a namespace (and not attached):\n [1] mnormt_2.1.1            rlang_1.1.5             magrittr_2.0.3         \n [4] rio_1.2.3               compiler_4.3.2          systemfonts_1.2.2      \n [7] vctrs_0.6.5             devEMF_4.5              pkgconfig_2.0.3        \n[10] crayon_1.5.3            fastmap_1.2.0           backports_1.5.0        \n[13] labeling_0.4.3          promises_1.3.2          rmarkdown_2.29         \n[16] tzdb_0.5.0              ragg_1.3.3              xfun_0.50              \n[19] cachem_1.1.0            jsonlite_1.8.9          later_1.4.1            \n[22] sjmisc_2.8.10           uuid_1.2-1              tweenr_2.0.3           \n[25] psych_2.5.3             broom_1.0.8             parallel_4.3.2         \n[28] R6_2.6.1                vcd_1.4-13              RColorBrewer_1.1-3     \n[31] bslib_0.8.0             stringi_1.8.4           car_3.1-3              \n[34] lmtest_0.9-40           jquerylib_0.1.4         Rcpp_1.0.14            \n[37] knitr_1.49              zoo_1.8-13              httpuv_1.6.15          \n[40] timechange_0.3.0        tidyselect_1.2.1        rstudioapi_0.17.1      \n[43] abind_1.4-8             moonBook_0.3.1          miniUI_0.1.1.1         \n[46] sjlabelled_1.2.0        lattice_0.22-7          shiny_1.9.1            \n[49] rrtable_0.3.0           withr_3.0.2             flextable_0.9.7        \n[52] askpass_1.2.1           evaluate_1.0.1          polyclip_1.10-7        \n[55] zip_2.3.2               xml2_1.3.8              pillar_1.10.1          \n[58] ggpubr_0.6.0            carData_3.0-5           DT_0.33                \n[61] insight_0.20.3          generics_0.1.3          hms_1.1.3              \n[64] munsell_0.5.1           xtable_1.8-4            glue_1.8.0             \n[67] gdtools_0.4.2           tools_4.3.2             data.table_1.15.4      \n[70] openxlsx_4.2.8          ggsignif_0.6.4          grid_4.3.2             \n[73] editData_0.1.8          colorspace_2.1-1        nlme_3.1-168           \n[76] ggforce_0.4.2           Formula_1.2-5           cli_3.6.3              \n[79] textshaping_1.0.0       rvg_0.3.3               officer_0.6.8          \n[82] fontBitstreamVera_0.1.1 ztable_0.2.3            gtable_0.3.6           \n[85] rstatix_0.7.2           sass_0.4.9              digest_0.6.37          \n[88] fontquiver_0.2.1        htmlwidgets_1.6.4       farver_2.1.2           \n[91] htmltools_0.5.8.1       lifecycle_1.0.4         shinyWidgets_0.9.0     \n[94] mime_0.13               fontLiberation_0.1.0    openssl_2.3.1          \n[97] MASS_7.3-60.0.1",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>PBMCs: Determine IMP Expanded Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part4_3A.html",
    "href": "PBMC_bulkTCR_Part4_3A.html",
    "title": "7  PBMCs: Determine Significantly Expanded Clones",
    "section": "",
    "text": "7.1 Set up workspace\n# Load libraries\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.5\n✔ ggplot2   3.5.1     ✔ stringr   1.5.1\n✔ lubridate 1.9.4     ✔ tibble    3.2.1\n✔ purrr     1.0.4     ✔ tidyr     1.3.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggplot2)\nlibrary(patchwork)\nlibrary(ggprism)\n\n# Load colors\npt_cols &lt;- readRDS(\"Part0_Patient_Color.rds\")\npt_fill &lt;- readRDS(\"Part0_Patient_Fill.rds\")\n\n# Functions\n\n# Create contingency table of reads\n#                   TP1    TP2\n# Clone1\n# AllOtherClones\n\ncreate_contingency_table &lt;- function(betas_df, timepoint1, timepoint2, clone_i){\n  # Get number of reads of clone at time point 1\n  tp1_df &lt;- betas_df[,c(\"Beta_clonotype\", timepoint1)]\n  clone_tp1_umi &lt;- as.numeric(tp1_df[clone_i,2])\n  # If the clone isn't present, set its value to 0\n  if(is.na(clone_tp1_umi)){\n    clone_tp1_umi &lt;- 0\n  }\n  # Get number of reads of all other clones at time point 1\n  allotherclones_tp1_umi &lt;- sum(tp1_df[,2], na.rm = TRUE) - clone_tp1_umi\n  \n  # Get number of reads of clone at time point 2\n  tp2_df &lt;- betas_df[,c(\"Beta_clonotype\", timepoint2)]\n  clone_tp2_umi &lt;- as.numeric(tp2_df[clone_i,2])\n  # If the clone isn't present, set its value to 0\n  if(is.na(clone_tp2_umi)){\n    clone_tp2_umi &lt;- 0\n  }\n  # Get number of reads of all other clones at time point 2\n  allotherclones_tp2_umi &lt;- sum(tp2_df[,2], na.rm = TRUE) - clone_tp2_umi\n  \n  contingency_table &lt;- data.frame(\n    \"tp1\" = c(clone_tp1_umi, allotherclones_tp1_umi),\n    \"tp2\" = c(clone_tp2_umi, allotherclones_tp2_umi),\n    row.names = c(\"clone1\", \"all_other_clones\"),\n    stringsAsFactors = FALSE\n  )\n  \n  return(contingency_table)\n}\n\nrun_fishers_test &lt;- function(betas_df, timepoint_prevax, timepoint_postvax, test = \"two.sided\", correction = \"fdr\"){\n  pval_df &lt;- data.frame()\n  for(i in c(1:nrow(betas_df))){\n    # Print every 100 clones\n    if(i %% 100 == 0){\n      print(i)\n    }\n    contingency_i &lt;- create_contingency_table(betas_df, timepoint_prevax, timepoint_postvax, i)\n    # Fisher's exact test asking if pre-vax reads are less than post-vax reads\n    pval &lt;- fisher.test(contingency_i, alternative = test)$p.value\n    # # Update direction if more reads in Prevax compared to Postvax\n      # if(contingency_i[1,\"tp1\"] &gt; contingency_i[1,\"tp2\"]) {\n      #   direction &lt;- \"More_in_prevax\"\n      # }\n      # # Update direction if more reads in Prevax compared to Postvax\n      # if(contingency_i[1,\"tp2\"] &gt; contingency_i[1,\"tp1\"]) {\n      #   direction &lt;- \"More_in_postvax\"\n      # }\n      # }\n    # pval_df &lt;- rbind(pval_df, c(pval, direction))\n    pval_df &lt;- rbind(pval_df, pval)\n  }\n  pval_df$Beta_clonotype &lt;- betas_df$Beta_clonotype\n  # colnames(pval_df) &lt;- c(\"pval\", \"direction\", \"Beta_clonotype\")\n  colnames(pval_df) &lt;- c(\"pval\", \"Beta_clonotype\")\n  \n  pval_df &lt;- pval_df %&gt;%\n    mutate(padj = p.adjust(pval, method = correction),\n           sig = case_when(padj &lt; 0.05 ~ \"Sig\",\n                         padj &gt;= 0.05 ~ \"Not sig\"))\n  \n  return(pval_df)\n}",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>PBMCs: Determine Significantly Expanded Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part4_3A.html#load-all-clones",
    "href": "PBMC_bulkTCR_Part4_3A.html#load-all-clones",
    "title": "7  PBMCs: Determine Significantly Expanded Clones",
    "section": "7.2 Load all clones",
    "text": "7.2 Load all clones\n\np101_betas &lt;- read.csv(\"p101_betas_merged_Part1.csv\")\np103_betas &lt;- read.csv(\"p103_betas_merged_Part1.csv\")\np104_betas &lt;- read.csv(\"p104_betas_merged_Part1.csv\")\np105_betas &lt;- read.csv(\"p105_betas_merged_Part1.csv\")\np106_betas &lt;- read.csv(\"p106_betas_merged_Part1.csv\")\np108_betas &lt;- read.csv(\"p108_betas_merged_Part1.csv\")\np109_betas &lt;- read.csv(\"p109_betas_merged_Part1.csv\")\np110_betas &lt;- read.csv(\"p110_betas_merged_Part1.csv\")\np111_betas &lt;- read.csv(\"p111_betas_merged_Part1.csv\")",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>PBMCs: Determine Significantly Expanded Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part4_3A.html#calculate-number-of-clones-significantly-expanded-post-vax-compared-to-pre-vax",
    "href": "PBMC_bulkTCR_Part4_3A.html#calculate-number-of-clones-significantly-expanded-post-vax-compared-to-pre-vax",
    "title": "7  PBMCs: Determine Significantly Expanded Clones",
    "section": "7.3 Calculate number of clones significantly expanded post-vax compared to pre-vax",
    "text": "7.3 Calculate number of clones significantly expanded post-vax compared to pre-vax\n\n# Filter for clones with at least 3 reads post-vax or prevax\np101_betas_postvax_vs_prevax &lt;- p101_betas %&gt;%\n  filter(p101_postvax_umi &gt;= 3 | p101_prevax_umi &gt;= 3) %&gt;%\n  ungroup()\np103_betas_postvax_vs_prevax &lt;- p103_betas %&gt;%\n  filter(p103_postvax_umi &gt;= 3 | p103_prevax_umi &gt;= 3) %&gt;%\n  ungroup()\np104_betas_postvax_vs_prevax &lt;- p104_betas %&gt;%\n  filter(p104_postvax_umi &gt;= 3 | p104_prevax_umi &gt;= 3) %&gt;%\n  ungroup()\np105_betas_postvax_vs_prevax &lt;- p105_betas %&gt;%\n  filter(p105_postvax_umi &gt;= 3 | p105_prevax_umi &gt;= 3) %&gt;%\n  ungroup()\np106_betas_postvax_vs_prevax &lt;- p106_betas %&gt;%\n  filter(p106_postvax_umi &gt;= 3 | p106_prevax_umi &gt;= 3) %&gt;%\n  ungroup()\np108_betas_postvax_vs_prevax &lt;- p108_betas %&gt;%\n  filter(p108_postvax_umi &gt;= 3 | p108_prevax_umi &gt;= 3) %&gt;%\n  ungroup()\np109_betas_postvax_vs_prevax &lt;- p109_betas %&gt;%\n  filter(p109_postvax_umi &gt;= 3 | p109_prevax_umi &gt;= 3) %&gt;%\n  ungroup()\np110_betas_postvax_vs_prevax &lt;- p110_betas %&gt;%\n  filter(p110_postvax_umi &gt;= 3 | p110_prevax_umi &gt;= 3) %&gt;%\n  ungroup()\np111_betas_postvax_vs_prevax &lt;- p111_betas %&gt;%\n  filter(p111_postvax_umi &gt;= 3 | p111_prevax_umi &gt;= 3) %&gt;%\n  ungroup()\n\n# Calculate pval\np101_pval_postvax_vs_prevax &lt;- run_fishers_test(p101_betas_postvax_vs_prevax, \"p101_prevax_umi\", \"p101_postvax_umi\", test = \"less\", correction = \"BY\")\n\n[1] 100\n[1] 200\n[1] 300\n[1] 400\n[1] 500\n[1] 600\n[1] 700\n[1] 800\n[1] 900\n[1] 1000\n[1] 1100\n[1] 1200\n[1] 1300\n[1] 1400\n[1] 1500\n[1] 1600\n[1] 1700\n[1] 1800\n[1] 1900\n[1] 2000\n[1] 2100\n[1] 2200\n[1] 2300\n[1] 2400\n[1] 2500\n[1] 2600\n[1] 2700\n[1] 2800\n[1] 2900\n[1] 3000\n[1] 3100\n[1] 3200\n[1] 3300\n[1] 3400\n[1] 3500\n[1] 3600\n[1] 3700\n[1] 3800\n[1] 3900\n[1] 4000\n[1] 4100\n[1] 4200\n[1] 4300\n[1] 4400\n[1] 4500\n[1] 4600\n[1] 4700\n[1] 4800\n[1] 4900\n[1] 5000\n[1] 5100\n[1] 5200\n[1] 5300\n[1] 5400\n[1] 5500\n[1] 5600\n[1] 5700\n[1] 5800\n[1] 5900\n[1] 6000\n[1] 6100\n[1] 6200\n[1] 6300\n[1] 6400\n[1] 6500\n[1] 6600\n[1] 6700\n[1] 6800\n[1] 6900\n[1] 7000\n[1] 7100\n[1] 7200\n[1] 7300\n[1] 7400\n[1] 7500\n[1] 7600\n[1] 7700\n[1] 7800\n[1] 7900\n[1] 8000\n[1] 8100\n[1] 8200\n[1] 8300\n[1] 8400\n[1] 8500\n[1] 8600\n[1] 8700\n[1] 8800\n[1] 8900\n[1] 9000\n[1] 9100\n[1] 9200\n[1] 9300\n[1] 9400\n[1] 9500\n[1] 9600\n[1] 9700\n[1] 9800\n[1] 9900\n[1] 10000\n[1] 10100\n[1] 10200\n[1] 10300\n[1] 10400\n[1] 10500\n[1] 10600\n[1] 10700\n[1] 10800\n[1] 10900\n[1] 11000\n[1] 11100\n[1] 11200\n[1] 11300\n[1] 11400\n[1] 11500\n[1] 11600\n[1] 11700\n[1] 11800\n[1] 11900\n[1] 12000\n[1] 12100\n[1] 12200\n[1] 12300\n[1] 12400\n[1] 12500\n[1] 12600\n[1] 12700\n[1] 12800\n[1] 12900\n[1] 13000\n[1] 13100\n[1] 13200\n[1] 13300\n[1] 13400\n[1] 13500\n[1] 13600\n[1] 13700\n[1] 13800\n[1] 13900\n[1] 14000\n[1] 14100\n[1] 14200\n[1] 14300\n[1] 14400\n[1] 14500\n[1] 14600\n[1] 14700\n[1] 14800\n[1] 14900\n[1] 15000\n[1] 15100\n[1] 15200\n[1] 15300\n[1] 15400\n[1] 15500\n[1] 15600\n[1] 15700\n[1] 15800\n[1] 15900\n[1] 16000\n[1] 16100\n[1] 16200\n[1] 16300\n[1] 16400\n[1] 16500\n[1] 16600\n[1] 16700\n\np103_pval_postvax_vs_prevax &lt;- run_fishers_test(p103_betas_postvax_vs_prevax, \"p103_prevax_umi\", \"p103_postvax_umi\", test = \"less\", correction = \"BY\")\n\n[1] 100\n[1] 200\n[1] 300\n[1] 400\n[1] 500\n[1] 600\n[1] 700\n[1] 800\n[1] 900\n[1] 1000\n[1] 1100\n[1] 1200\n[1] 1300\n[1] 1400\n[1] 1500\n[1] 1600\n[1] 1700\n[1] 1800\n[1] 1900\n[1] 2000\n[1] 2100\n[1] 2200\n[1] 2300\n[1] 2400\n[1] 2500\n[1] 2600\n[1] 2700\n[1] 2800\n[1] 2900\n[1] 3000\n[1] 3100\n[1] 3200\n[1] 3300\n[1] 3400\n[1] 3500\n[1] 3600\n[1] 3700\n[1] 3800\n[1] 3900\n[1] 4000\n[1] 4100\n[1] 4200\n[1] 4300\n[1] 4400\n[1] 4500\n[1] 4600\n[1] 4700\n[1] 4800\n[1] 4900\n[1] 5000\n[1] 5100\n[1] 5200\n[1] 5300\n[1] 5400\n[1] 5500\n[1] 5600\n[1] 5700\n[1] 5800\n[1] 5900\n[1] 6000\n[1] 6100\n[1] 6200\n[1] 6300\n[1] 6400\n[1] 6500\n[1] 6600\n[1] 6700\n[1] 6800\n[1] 6900\n[1] 7000\n[1] 7100\n[1] 7200\n[1] 7300\n[1] 7400\n[1] 7500\n[1] 7600\n[1] 7700\n[1] 7800\n[1] 7900\n[1] 8000\n[1] 8100\n[1] 8200\n[1] 8300\n[1] 8400\n[1] 8500\n[1] 8600\n[1] 8700\n[1] 8800\n[1] 8900\n[1] 9000\n[1] 9100\n[1] 9200\n[1] 9300\n[1] 9400\n[1] 9500\n[1] 9600\n[1] 9700\n[1] 9800\n[1] 9900\n[1] 10000\n[1] 10100\n[1] 10200\n[1] 10300\n[1] 10400\n[1] 10500\n[1] 10600\n[1] 10700\n[1] 10800\n[1] 10900\n[1] 11000\n[1] 11100\n[1] 11200\n[1] 11300\n[1] 11400\n[1] 11500\n[1] 11600\n[1] 11700\n[1] 11800\n[1] 11900\n[1] 12000\n[1] 12100\n[1] 12200\n[1] 12300\n[1] 12400\n[1] 12500\n[1] 12600\n[1] 12700\n[1] 12800\n[1] 12900\n[1] 13000\n[1] 13100\n[1] 13200\n[1] 13300\n[1] 13400\n[1] 13500\n[1] 13600\n[1] 13700\n[1] 13800\n[1] 13900\n[1] 14000\n[1] 14100\n[1] 14200\n[1] 14300\n[1] 14400\n[1] 14500\n[1] 14600\n[1] 14700\n[1] 14800\n[1] 14900\n[1] 15000\n[1] 15100\n[1] 15200\n[1] 15300\n[1] 15400\n[1] 15500\n[1] 15600\n[1] 15700\n[1] 15800\n[1] 15900\n[1] 16000\n[1] 16100\n[1] 16200\n[1] 16300\n[1] 16400\n[1] 16500\n[1] 16600\n[1] 16700\n[1] 16800\n[1] 16900\n[1] 17000\n[1] 17100\n[1] 17200\n[1] 17300\n[1] 17400\n[1] 17500\n[1] 17600\n[1] 17700\n[1] 17800\n[1] 17900\n[1] 18000\n[1] 18100\n[1] 18200\n[1] 18300\n[1] 18400\n[1] 18500\n[1] 18600\n[1] 18700\n[1] 18800\n[1] 18900\n[1] 19000\n[1] 19100\n[1] 19200\n[1] 19300\n[1] 19400\n[1] 19500\n[1] 19600\n[1] 19700\n[1] 19800\n[1] 19900\n[1] 20000\n[1] 20100\n[1] 20200\n[1] 20300\n[1] 20400\n[1] 20500\n[1] 20600\n\np104_pval_postvax_vs_prevax &lt;- run_fishers_test(p104_betas_postvax_vs_prevax, \"p104_prevax_umi\", \"p104_postvax_umi\", test = \"less\", correction = \"BY\")\n\n[1] 100\n[1] 200\n[1] 300\n[1] 400\n[1] 500\n[1] 600\n[1] 700\n[1] 800\n[1] 900\n[1] 1000\n[1] 1100\n[1] 1200\n[1] 1300\n[1] 1400\n[1] 1500\n[1] 1600\n[1] 1700\n[1] 1800\n[1] 1900\n[1] 2000\n[1] 2100\n[1] 2200\n[1] 2300\n[1] 2400\n[1] 2500\n[1] 2600\n[1] 2700\n[1] 2800\n[1] 2900\n[1] 3000\n[1] 3100\n[1] 3200\n[1] 3300\n[1] 3400\n[1] 3500\n[1] 3600\n[1] 3700\n[1] 3800\n[1] 3900\n[1] 4000\n[1] 4100\n[1] 4200\n[1] 4300\n[1] 4400\n[1] 4500\n[1] 4600\n[1] 4700\n[1] 4800\n[1] 4900\n[1] 5000\n[1] 5100\n[1] 5200\n[1] 5300\n[1] 5400\n[1] 5500\n[1] 5600\n[1] 5700\n[1] 5800\n[1] 5900\n[1] 6000\n[1] 6100\n[1] 6200\n[1] 6300\n[1] 6400\n[1] 6500\n[1] 6600\n[1] 6700\n[1] 6800\n[1] 6900\n[1] 7000\n[1] 7100\n[1] 7200\n[1] 7300\n[1] 7400\n[1] 7500\n[1] 7600\n[1] 7700\n[1] 7800\n[1] 7900\n[1] 8000\n[1] 8100\n[1] 8200\n[1] 8300\n[1] 8400\n[1] 8500\n[1] 8600\n[1] 8700\n[1] 8800\n[1] 8900\n[1] 9000\n[1] 9100\n[1] 9200\n[1] 9300\n[1] 9400\n[1] 9500\n[1] 9600\n[1] 9700\n[1] 9800\n[1] 9900\n[1] 10000\n[1] 10100\n[1] 10200\n[1] 10300\n[1] 10400\n[1] 10500\n[1] 10600\n[1] 10700\n[1] 10800\n[1] 10900\n[1] 11000\n[1] 11100\n[1] 11200\n[1] 11300\n[1] 11400\n[1] 11500\n[1] 11600\n[1] 11700\n[1] 11800\n[1] 11900\n[1] 12000\n[1] 12100\n[1] 12200\n[1] 12300\n[1] 12400\n[1] 12500\n[1] 12600\n[1] 12700\n[1] 12800\n[1] 12900\n[1] 13000\n[1] 13100\n[1] 13200\n[1] 13300\n[1] 13400\n[1] 13500\n[1] 13600\n[1] 13700\n[1] 13800\n[1] 13900\n[1] 14000\n[1] 14100\n[1] 14200\n[1] 14300\n[1] 14400\n[1] 14500\n[1] 14600\n[1] 14700\n[1] 14800\n[1] 14900\n[1] 15000\n[1] 15100\n[1] 15200\n[1] 15300\n[1] 15400\n[1] 15500\n[1] 15600\n[1] 15700\n[1] 15800\n[1] 15900\n[1] 16000\n[1] 16100\n[1] 16200\n[1] 16300\n[1] 16400\n[1] 16500\n[1] 16600\n[1] 16700\n[1] 16800\n[1] 16900\n[1] 17000\n[1] 17100\n[1] 17200\n[1] 17300\n[1] 17400\n[1] 17500\n[1] 17600\n[1] 17700\n[1] 17800\n[1] 17900\n[1] 18000\n[1] 18100\n[1] 18200\n[1] 18300\n[1] 18400\n[1] 18500\n[1] 18600\n[1] 18700\n[1] 18800\n[1] 18900\n[1] 19000\n[1] 19100\n[1] 19200\n[1] 19300\n[1] 19400\n[1] 19500\n[1] 19600\n[1] 19700\n[1] 19800\n[1] 19900\n[1] 20000\n[1] 20100\n[1] 20200\n[1] 20300\n[1] 20400\n[1] 20500\n[1] 20600\n[1] 20700\n[1] 20800\n[1] 20900\n[1] 21000\n[1] 21100\n[1] 21200\n[1] 21300\n[1] 21400\n[1] 21500\n[1] 21600\n[1] 21700\n[1] 21800\n[1] 21900\n[1] 22000\n[1] 22100\n[1] 22200\n[1] 22300\n[1] 22400\n[1] 22500\n[1] 22600\n[1] 22700\n[1] 22800\n[1] 22900\n[1] 23000\n[1] 23100\n[1] 23200\n[1] 23300\n[1] 23400\n[1] 23500\n[1] 23600\n[1] 23700\n[1] 23800\n[1] 23900\n[1] 24000\n[1] 24100\n[1] 24200\n[1] 24300\n[1] 24400\n[1] 24500\n[1] 24600\n[1] 24700\n[1] 24800\n[1] 24900\n[1] 25000\n[1] 25100\n[1] 25200\n[1] 25300\n[1] 25400\n[1] 25500\n\np105_pval_postvax_vs_prevax &lt;- run_fishers_test(p105_betas_postvax_vs_prevax, \"p105_prevax_umi\", \"p105_postvax_umi\", test = \"less\", correction = \"BY\")\n\n[1] 100\n[1] 200\n[1] 300\n[1] 400\n[1] 500\n[1] 600\n[1] 700\n[1] 800\n[1] 900\n[1] 1000\n[1] 1100\n[1] 1200\n[1] 1300\n[1] 1400\n[1] 1500\n[1] 1600\n[1] 1700\n[1] 1800\n[1] 1900\n[1] 2000\n[1] 2100\n[1] 2200\n[1] 2300\n[1] 2400\n[1] 2500\n[1] 2600\n[1] 2700\n[1] 2800\n[1] 2900\n[1] 3000\n[1] 3100\n[1] 3200\n[1] 3300\n[1] 3400\n[1] 3500\n[1] 3600\n[1] 3700\n[1] 3800\n[1] 3900\n[1] 4000\n[1] 4100\n[1] 4200\n[1] 4300\n[1] 4400\n[1] 4500\n[1] 4600\n[1] 4700\n[1] 4800\n[1] 4900\n[1] 5000\n[1] 5100\n[1] 5200\n[1] 5300\n[1] 5400\n[1] 5500\n[1] 5600\n[1] 5700\n[1] 5800\n[1] 5900\n[1] 6000\n[1] 6100\n[1] 6200\n[1] 6300\n[1] 6400\n[1] 6500\n[1] 6600\n[1] 6700\n[1] 6800\n[1] 6900\n[1] 7000\n[1] 7100\n[1] 7200\n[1] 7300\n[1] 7400\n[1] 7500\n[1] 7600\n[1] 7700\n[1] 7800\n[1] 7900\n[1] 8000\n[1] 8100\n[1] 8200\n[1] 8300\n[1] 8400\n[1] 8500\n[1] 8600\n[1] 8700\n[1] 8800\n[1] 8900\n[1] 9000\n[1] 9100\n[1] 9200\n[1] 9300\n[1] 9400\n[1] 9500\n[1] 9600\n[1] 9700\n[1] 9800\n[1] 9900\n[1] 10000\n[1] 10100\n[1] 10200\n[1] 10300\n[1] 10400\n[1] 10500\n[1] 10600\n[1] 10700\n[1] 10800\n[1] 10900\n[1] 11000\n[1] 11100\n[1] 11200\n[1] 11300\n[1] 11400\n[1] 11500\n[1] 11600\n[1] 11700\n[1] 11800\n[1] 11900\n[1] 12000\n[1] 12100\n[1] 12200\n[1] 12300\n[1] 12400\n[1] 12500\n[1] 12600\n[1] 12700\n[1] 12800\n[1] 12900\n[1] 13000\n[1] 13100\n[1] 13200\n[1] 13300\n[1] 13400\n[1] 13500\n[1] 13600\n[1] 13700\n[1] 13800\n[1] 13900\n[1] 14000\n[1] 14100\n[1] 14200\n[1] 14300\n[1] 14400\n[1] 14500\n[1] 14600\n[1] 14700\n[1] 14800\n[1] 14900\n[1] 15000\n[1] 15100\n[1] 15200\n[1] 15300\n[1] 15400\n[1] 15500\n[1] 15600\n[1] 15700\n[1] 15800\n[1] 15900\n[1] 16000\n[1] 16100\n[1] 16200\n[1] 16300\n[1] 16400\n[1] 16500\n[1] 16600\n[1] 16700\n[1] 16800\n[1] 16900\n[1] 17000\n[1] 17100\n[1] 17200\n[1] 17300\n[1] 17400\n[1] 17500\n[1] 17600\n[1] 17700\n[1] 17800\n[1] 17900\n[1] 18000\n[1] 18100\n[1] 18200\n[1] 18300\n[1] 18400\n[1] 18500\n[1] 18600\n[1] 18700\n[1] 18800\n[1] 18900\n[1] 19000\n[1] 19100\n[1] 19200\n[1] 19300\n[1] 19400\n[1] 19500\n[1] 19600\n[1] 19700\n[1] 19800\n[1] 19900\n[1] 20000\n[1] 20100\n[1] 20200\n[1] 20300\n[1] 20400\n[1] 20500\n[1] 20600\n[1] 20700\n[1] 20800\n[1] 20900\n[1] 21000\n[1] 21100\n[1] 21200\n[1] 21300\n[1] 21400\n[1] 21500\n[1] 21600\n[1] 21700\n[1] 21800\n[1] 21900\n[1] 22000\n[1] 22100\n[1] 22200\n[1] 22300\n[1] 22400\n[1] 22500\n[1] 22600\n\np106_pval_postvax_vs_prevax &lt;- run_fishers_test(p106_betas_postvax_vs_prevax, \"p106_prevax_umi\", \"p106_postvax_umi\", test = \"less\", correction = \"BY\")\n\n[1] 100\n[1] 200\n[1] 300\n[1] 400\n[1] 500\n[1] 600\n[1] 700\n[1] 800\n[1] 900\n[1] 1000\n[1] 1100\n[1] 1200\n[1] 1300\n[1] 1400\n[1] 1500\n[1] 1600\n[1] 1700\n[1] 1800\n[1] 1900\n[1] 2000\n[1] 2100\n[1] 2200\n[1] 2300\n[1] 2400\n[1] 2500\n[1] 2600\n[1] 2700\n[1] 2800\n[1] 2900\n[1] 3000\n[1] 3100\n[1] 3200\n[1] 3300\n[1] 3400\n[1] 3500\n[1] 3600\n[1] 3700\n[1] 3800\n[1] 3900\n[1] 4000\n[1] 4100\n[1] 4200\n[1] 4300\n[1] 4400\n[1] 4500\n[1] 4600\n[1] 4700\n[1] 4800\n[1] 4900\n[1] 5000\n[1] 5100\n[1] 5200\n[1] 5300\n[1] 5400\n[1] 5500\n[1] 5600\n[1] 5700\n[1] 5800\n[1] 5900\n[1] 6000\n[1] 6100\n[1] 6200\n[1] 6300\n[1] 6400\n[1] 6500\n[1] 6600\n[1] 6700\n[1] 6800\n[1] 6900\n[1] 7000\n[1] 7100\n[1] 7200\n[1] 7300\n[1] 7400\n[1] 7500\n[1] 7600\n[1] 7700\n[1] 7800\n[1] 7900\n[1] 8000\n[1] 8100\n[1] 8200\n[1] 8300\n[1] 8400\n[1] 8500\n[1] 8600\n[1] 8700\n[1] 8800\n[1] 8900\n[1] 9000\n[1] 9100\n[1] 9200\n[1] 9300\n[1] 9400\n[1] 9500\n[1] 9600\n[1] 9700\n[1] 9800\n[1] 9900\n[1] 10000\n[1] 10100\n[1] 10200\n[1] 10300\n[1] 10400\n[1] 10500\n[1] 10600\n[1] 10700\n[1] 10800\n[1] 10900\n[1] 11000\n[1] 11100\n[1] 11200\n[1] 11300\n[1] 11400\n[1] 11500\n[1] 11600\n[1] 11700\n[1] 11800\n[1] 11900\n[1] 12000\n[1] 12100\n[1] 12200\n[1] 12300\n[1] 12400\n[1] 12500\n[1] 12600\n[1] 12700\n[1] 12800\n[1] 12900\n[1] 13000\n[1] 13100\n[1] 13200\n[1] 13300\n[1] 13400\n[1] 13500\n[1] 13600\n[1] 13700\n[1] 13800\n[1] 13900\n[1] 14000\n[1] 14100\n[1] 14200\n[1] 14300\n[1] 14400\n[1] 14500\n[1] 14600\n[1] 14700\n[1] 14800\n[1] 14900\n[1] 15000\n[1] 15100\n[1] 15200\n[1] 15300\n[1] 15400\n[1] 15500\n[1] 15600\n[1] 15700\n[1] 15800\n[1] 15900\n[1] 16000\n[1] 16100\n[1] 16200\n[1] 16300\n[1] 16400\n[1] 16500\n[1] 16600\n[1] 16700\n[1] 16800\n[1] 16900\n[1] 17000\n[1] 17100\n[1] 17200\n[1] 17300\n[1] 17400\n[1] 17500\n[1] 17600\n[1] 17700\n[1] 17800\n[1] 17900\n[1] 18000\n[1] 18100\n[1] 18200\n[1] 18300\n[1] 18400\n[1] 18500\n[1] 18600\n[1] 18700\n[1] 18800\n[1] 18900\n[1] 19000\n[1] 19100\n[1] 19200\n[1] 19300\n[1] 19400\n[1] 19500\n[1] 19600\n[1] 19700\n[1] 19800\n[1] 19900\n[1] 20000\n[1] 20100\n[1] 20200\n[1] 20300\n[1] 20400\n[1] 20500\n[1] 20600\n[1] 20700\n[1] 20800\n[1] 20900\n[1] 21000\n[1] 21100\n[1] 21200\n[1] 21300\n[1] 21400\n[1] 21500\n[1] 21600\n[1] 21700\n[1] 21800\n[1] 21900\n[1] 22000\n[1] 22100\n[1] 22200\n[1] 22300\n[1] 22400\n[1] 22500\n[1] 22600\n[1] 22700\n[1] 22800\n[1] 22900\n[1] 23000\n[1] 23100\n[1] 23200\n[1] 23300\n[1] 23400\n[1] 23500\n[1] 23600\n[1] 23700\n[1] 23800\n[1] 23900\n[1] 24000\n[1] 24100\n[1] 24200\n[1] 24300\n[1] 24400\n[1] 24500\n[1] 24600\n[1] 24700\n[1] 24800\n[1] 24900\n[1] 25000\n[1] 25100\n[1] 25200\n[1] 25300\n[1] 25400\n\np108_pval_postvax_vs_prevax &lt;- run_fishers_test(p108_betas_postvax_vs_prevax, \"p108_prevax_umi\", \"p108_postvax_umi\", test = \"less\", correction = \"BY\")\n\n[1] 100\n[1] 200\n[1] 300\n[1] 400\n[1] 500\n[1] 600\n[1] 700\n[1] 800\n[1] 900\n[1] 1000\n[1] 1100\n[1] 1200\n[1] 1300\n[1] 1400\n[1] 1500\n[1] 1600\n[1] 1700\n[1] 1800\n[1] 1900\n[1] 2000\n[1] 2100\n[1] 2200\n[1] 2300\n[1] 2400\n[1] 2500\n[1] 2600\n[1] 2700\n[1] 2800\n[1] 2900\n[1] 3000\n[1] 3100\n[1] 3200\n[1] 3300\n[1] 3400\n[1] 3500\n[1] 3600\n[1] 3700\n[1] 3800\n[1] 3900\n[1] 4000\n[1] 4100\n[1] 4200\n[1] 4300\n[1] 4400\n[1] 4500\n[1] 4600\n[1] 4700\n[1] 4800\n[1] 4900\n[1] 5000\n[1] 5100\n[1] 5200\n[1] 5300\n[1] 5400\n[1] 5500\n[1] 5600\n[1] 5700\n[1] 5800\n[1] 5900\n[1] 6000\n[1] 6100\n[1] 6200\n[1] 6300\n[1] 6400\n[1] 6500\n[1] 6600\n[1] 6700\n[1] 6800\n[1] 6900\n[1] 7000\n[1] 7100\n[1] 7200\n[1] 7300\n[1] 7400\n[1] 7500\n[1] 7600\n[1] 7700\n[1] 7800\n[1] 7900\n[1] 8000\n[1] 8100\n[1] 8200\n[1] 8300\n[1] 8400\n[1] 8500\n[1] 8600\n[1] 8700\n[1] 8800\n[1] 8900\n[1] 9000\n[1] 9100\n[1] 9200\n[1] 9300\n[1] 9400\n[1] 9500\n[1] 9600\n[1] 9700\n[1] 9800\n[1] 9900\n[1] 10000\n[1] 10100\n[1] 10200\n[1] 10300\n[1] 10400\n[1] 10500\n[1] 10600\n[1] 10700\n[1] 10800\n[1] 10900\n[1] 11000\n[1] 11100\n[1] 11200\n[1] 11300\n[1] 11400\n[1] 11500\n[1] 11600\n[1] 11700\n[1] 11800\n[1] 11900\n[1] 12000\n[1] 12100\n[1] 12200\n[1] 12300\n[1] 12400\n[1] 12500\n[1] 12600\n[1] 12700\n[1] 12800\n[1] 12900\n[1] 13000\n[1] 13100\n[1] 13200\n[1] 13300\n[1] 13400\n[1] 13500\n[1] 13600\n[1] 13700\n[1] 13800\n[1] 13900\n[1] 14000\n[1] 14100\n[1] 14200\n[1] 14300\n[1] 14400\n[1] 14500\n[1] 14600\n[1] 14700\n[1] 14800\n[1] 14900\n[1] 15000\n[1] 15100\n[1] 15200\n[1] 15300\n[1] 15400\n[1] 15500\n[1] 15600\n[1] 15700\n[1] 15800\n[1] 15900\n[1] 16000\n[1] 16100\n[1] 16200\n[1] 16300\n[1] 16400\n[1] 16500\n[1] 16600\n[1] 16700\n[1] 16800\n[1] 16900\n[1] 17000\n[1] 17100\n[1] 17200\n[1] 17300\n[1] 17400\n[1] 17500\n[1] 17600\n[1] 17700\n[1] 17800\n[1] 17900\n[1] 18000\n[1] 18100\n[1] 18200\n[1] 18300\n[1] 18400\n[1] 18500\n[1] 18600\n[1] 18700\n[1] 18800\n[1] 18900\n[1] 19000\n[1] 19100\n[1] 19200\n[1] 19300\n[1] 19400\n[1] 19500\n[1] 19600\n[1] 19700\n[1] 19800\n[1] 19900\n[1] 20000\n[1] 20100\n[1] 20200\n[1] 20300\n[1] 20400\n[1] 20500\n[1] 20600\n[1] 20700\n[1] 20800\n[1] 20900\n[1] 21000\n[1] 21100\n[1] 21200\n[1] 21300\n[1] 21400\n[1] 21500\n[1] 21600\n[1] 21700\n[1] 21800\n[1] 21900\n[1] 22000\n[1] 22100\n[1] 22200\n[1] 22300\n[1] 22400\n[1] 22500\n[1] 22600\n[1] 22700\n[1] 22800\n[1] 22900\n[1] 23000\n[1] 23100\n[1] 23200\n[1] 23300\n[1] 23400\n[1] 23500\n[1] 23600\n[1] 23700\n[1] 23800\n[1] 23900\n[1] 24000\n[1] 24100\n[1] 24200\n[1] 24300\n[1] 24400\n[1] 24500\n[1] 24600\n[1] 24700\n[1] 24800\n[1] 24900\n[1] 25000\n[1] 25100\n[1] 25200\n[1] 25300\n[1] 25400\n[1] 25500\n[1] 25600\n[1] 25700\n[1] 25800\n[1] 25900\n[1] 26000\n[1] 26100\n[1] 26200\n[1] 26300\n[1] 26400\n[1] 26500\n[1] 26600\n[1] 26700\n[1] 26800\n[1] 26900\n[1] 27000\n[1] 27100\n[1] 27200\n[1] 27300\n[1] 27400\n[1] 27500\n[1] 27600\n[1] 27700\n[1] 27800\n[1] 27900\n[1] 28000\n[1] 28100\n[1] 28200\n[1] 28300\n[1] 28400\n[1] 28500\n[1] 28600\n[1] 28700\n[1] 28800\n[1] 28900\n[1] 29000\n[1] 29100\n\np109_pval_postvax_vs_prevax &lt;- run_fishers_test(p109_betas_postvax_vs_prevax, \"p109_prevax_umi\", \"p109_postvax_umi\", test = \"less\", correction = \"BY\")\n\n[1] 100\n[1] 200\n[1] 300\n[1] 400\n[1] 500\n[1] 600\n[1] 700\n[1] 800\n[1] 900\n[1] 1000\n[1] 1100\n[1] 1200\n[1] 1300\n[1] 1400\n[1] 1500\n[1] 1600\n[1] 1700\n[1] 1800\n[1] 1900\n[1] 2000\n[1] 2100\n[1] 2200\n[1] 2300\n[1] 2400\n[1] 2500\n[1] 2600\n[1] 2700\n[1] 2800\n[1] 2900\n[1] 3000\n[1] 3100\n[1] 3200\n[1] 3300\n[1] 3400\n[1] 3500\n[1] 3600\n[1] 3700\n[1] 3800\n[1] 3900\n[1] 4000\n[1] 4100\n[1] 4200\n[1] 4300\n[1] 4400\n[1] 4500\n[1] 4600\n[1] 4700\n[1] 4800\n[1] 4900\n[1] 5000\n[1] 5100\n[1] 5200\n[1] 5300\n[1] 5400\n[1] 5500\n[1] 5600\n[1] 5700\n[1] 5800\n[1] 5900\n[1] 6000\n[1] 6100\n[1] 6200\n[1] 6300\n[1] 6400\n[1] 6500\n[1] 6600\n[1] 6700\n[1] 6800\n[1] 6900\n[1] 7000\n[1] 7100\n[1] 7200\n[1] 7300\n[1] 7400\n[1] 7500\n[1] 7600\n[1] 7700\n[1] 7800\n[1] 7900\n[1] 8000\n[1] 8100\n[1] 8200\n[1] 8300\n[1] 8400\n[1] 8500\n[1] 8600\n[1] 8700\n[1] 8800\n[1] 8900\n[1] 9000\n[1] 9100\n[1] 9200\n[1] 9300\n[1] 9400\n[1] 9500\n[1] 9600\n[1] 9700\n[1] 9800\n[1] 9900\n[1] 10000\n[1] 10100\n[1] 10200\n[1] 10300\n[1] 10400\n[1] 10500\n[1] 10600\n[1] 10700\n[1] 10800\n[1] 10900\n[1] 11000\n[1] 11100\n[1] 11200\n[1] 11300\n[1] 11400\n[1] 11500\n[1] 11600\n[1] 11700\n[1] 11800\n[1] 11900\n[1] 12000\n[1] 12100\n[1] 12200\n[1] 12300\n[1] 12400\n[1] 12500\n[1] 12600\n[1] 12700\n[1] 12800\n[1] 12900\n[1] 13000\n[1] 13100\n[1] 13200\n[1] 13300\n[1] 13400\n[1] 13500\n[1] 13600\n[1] 13700\n[1] 13800\n\np110_pval_postvax_vs_prevax &lt;- run_fishers_test(p110_betas_postvax_vs_prevax, \"p110_prevax_umi\", \"p110_postvax_umi\", test = \"less\", correction = \"BY\")\n\n[1] 100\n[1] 200\n[1] 300\n[1] 400\n[1] 500\n[1] 600\n[1] 700\n[1] 800\n[1] 900\n[1] 1000\n[1] 1100\n[1] 1200\n[1] 1300\n[1] 1400\n[1] 1500\n[1] 1600\n[1] 1700\n[1] 1800\n[1] 1900\n[1] 2000\n[1] 2100\n[1] 2200\n[1] 2300\n[1] 2400\n[1] 2500\n[1] 2600\n[1] 2700\n[1] 2800\n[1] 2900\n[1] 3000\n[1] 3100\n[1] 3200\n[1] 3300\n[1] 3400\n[1] 3500\n[1] 3600\n[1] 3700\n[1] 3800\n[1] 3900\n[1] 4000\n[1] 4100\n[1] 4200\n[1] 4300\n[1] 4400\n[1] 4500\n[1] 4600\n[1] 4700\n[1] 4800\n[1] 4900\n[1] 5000\n[1] 5100\n[1] 5200\n[1] 5300\n[1] 5400\n[1] 5500\n[1] 5600\n[1] 5700\n[1] 5800\n[1] 5900\n[1] 6000\n[1] 6100\n[1] 6200\n[1] 6300\n[1] 6400\n[1] 6500\n[1] 6600\n[1] 6700\n[1] 6800\n[1] 6900\n[1] 7000\n[1] 7100\n[1] 7200\n[1] 7300\n[1] 7400\n[1] 7500\n[1] 7600\n[1] 7700\n[1] 7800\n[1] 7900\n[1] 8000\n[1] 8100\n[1] 8200\n[1] 8300\n[1] 8400\n[1] 8500\n[1] 8600\n[1] 8700\n[1] 8800\n[1] 8900\n[1] 9000\n[1] 9100\n[1] 9200\n[1] 9300\n[1] 9400\n[1] 9500\n[1] 9600\n[1] 9700\n[1] 9800\n[1] 9900\n[1] 10000\n[1] 10100\n[1] 10200\n[1] 10300\n[1] 10400\n[1] 10500\n[1] 10600\n[1] 10700\n[1] 10800\n[1] 10900\n[1] 11000\n[1] 11100\n[1] 11200\n[1] 11300\n[1] 11400\n[1] 11500\n[1] 11600\n[1] 11700\n[1] 11800\n[1] 11900\n[1] 12000\n[1] 12100\n[1] 12200\n[1] 12300\n[1] 12400\n[1] 12500\n[1] 12600\n[1] 12700\n[1] 12800\n[1] 12900\n[1] 13000\n[1] 13100\n[1] 13200\n[1] 13300\n[1] 13400\n[1] 13500\n[1] 13600\n[1] 13700\n[1] 13800\n[1] 13900\n[1] 14000\n[1] 14100\n[1] 14200\n[1] 14300\n[1] 14400\n[1] 14500\n[1] 14600\n[1] 14700\n[1] 14800\n[1] 14900\n[1] 15000\n[1] 15100\n[1] 15200\n[1] 15300\n[1] 15400\n[1] 15500\n[1] 15600\n[1] 15700\n[1] 15800\n[1] 15900\n[1] 16000\n[1] 16100\n[1] 16200\n[1] 16300\n[1] 16400\n[1] 16500\n[1] 16600\n[1] 16700\n[1] 16800\n[1] 16900\n[1] 17000\n[1] 17100\n[1] 17200\n[1] 17300\n[1] 17400\n[1] 17500\n[1] 17600\n[1] 17700\n[1] 17800\n[1] 17900\n[1] 18000\n[1] 18100\n[1] 18200\n[1] 18300\n[1] 18400\n[1] 18500\n[1] 18600\n[1] 18700\n[1] 18800\n[1] 18900\n[1] 19000\n[1] 19100\n[1] 19200\n[1] 19300\n[1] 19400\n[1] 19500\n[1] 19600\n[1] 19700\n[1] 19800\n[1] 19900\n[1] 20000\n[1] 20100\n[1] 20200\n[1] 20300\n[1] 20400\n[1] 20500\n[1] 20600\n[1] 20700\n[1] 20800\n[1] 20900\n[1] 21000\n[1] 21100\n[1] 21200\n[1] 21300\n[1] 21400\n[1] 21500\n[1] 21600\n[1] 21700\n[1] 21800\n[1] 21900\n[1] 22000\n[1] 22100\n[1] 22200\n[1] 22300\n[1] 22400\n[1] 22500\n[1] 22600\n[1] 22700\n[1] 22800\n[1] 22900\n[1] 23000\n[1] 23100\n[1] 23200\n[1] 23300\n[1] 23400\n[1] 23500\n[1] 23600\n[1] 23700\n[1] 23800\n[1] 23900\n[1] 24000\n[1] 24100\n[1] 24200\n[1] 24300\n[1] 24400\n[1] 24500\n[1] 24600\n[1] 24700\n[1] 24800\n[1] 24900\n[1] 25000\n[1] 25100\n[1] 25200\n[1] 25300\n[1] 25400\n[1] 25500\n[1] 25600\n[1] 25700\n[1] 25800\n[1] 25900\n[1] 26000\n[1] 26100\n[1] 26200\n[1] 26300\n[1] 26400\n[1] 26500\n[1] 26600\n[1] 26700\n[1] 26800\n[1] 26900\n[1] 27000\n[1] 27100\n[1] 27200\n[1] 27300\n[1] 27400\n[1] 27500\n[1] 27600\n[1] 27700\n[1] 27800\n[1] 27900\n[1] 28000\n[1] 28100\n[1] 28200\n[1] 28300\n[1] 28400\n[1] 28500\n[1] 28600\n[1] 28700\n[1] 28800\n[1] 28900\n[1] 29000\n[1] 29100\n[1] 29200\n[1] 29300\n[1] 29400\n[1] 29500\n[1] 29600\n[1] 29700\n[1] 29800\n[1] 29900\n[1] 30000\n[1] 30100\n[1] 30200\n[1] 30300\n[1] 30400\n[1] 30500\n[1] 30600\n[1] 30700\n[1] 30800\n[1] 30900\n\np111_pval_postvax_vs_prevax &lt;- run_fishers_test(p111_betas_postvax_vs_prevax, \"p111_prevax_umi\", \"p111_postvax_umi\", test = \"less\", correction = \"BY\")\n\n[1] 100\n[1] 200\n[1] 300\n[1] 400\n[1] 500\n[1] 600\n[1] 700\n[1] 800\n[1] 900\n[1] 1000\n[1] 1100\n[1] 1200\n[1] 1300\n[1] 1400\n[1] 1500\n[1] 1600\n[1] 1700\n[1] 1800\n[1] 1900\n[1] 2000\n[1] 2100\n[1] 2200\n[1] 2300\n[1] 2400\n[1] 2500\n[1] 2600\n[1] 2700\n[1] 2800\n[1] 2900\n[1] 3000\n[1] 3100\n[1] 3200\n[1] 3300\n[1] 3400\n[1] 3500\n[1] 3600\n[1] 3700\n[1] 3800\n[1] 3900\n[1] 4000\n[1] 4100\n[1] 4200\n[1] 4300\n[1] 4400\n[1] 4500\n[1] 4600\n[1] 4700\n[1] 4800\n[1] 4900\n[1] 5000\n[1] 5100\n[1] 5200\n[1] 5300\n[1] 5400\n[1] 5500\n[1] 5600\n[1] 5700\n[1] 5800\n[1] 5900\n[1] 6000\n[1] 6100\n[1] 6200\n[1] 6300\n[1] 6400\n[1] 6500\n[1] 6600\n[1] 6700\n[1] 6800\n[1] 6900\n[1] 7000\n[1] 7100\n[1] 7200\n[1] 7300\n[1] 7400\n[1] 7500\n[1] 7600\n[1] 7700\n[1] 7800\n[1] 7900\n[1] 8000\n[1] 8100\n[1] 8200\n[1] 8300\n[1] 8400\n[1] 8500\n[1] 8600\n[1] 8700\n[1] 8800\n[1] 8900\n[1] 9000\n[1] 9100\n[1] 9200\n[1] 9300\n[1] 9400\n[1] 9500\n[1] 9600\n[1] 9700\n[1] 9800\n[1] 9900\n[1] 10000\n[1] 10100\n[1] 10200\n[1] 10300\n[1] 10400\n[1] 10500\n[1] 10600\n[1] 10700\n[1] 10800\n[1] 10900\n[1] 11000\n[1] 11100\n[1] 11200\n[1] 11300\n[1] 11400\n[1] 11500\n[1] 11600\n[1] 11700\n[1] 11800\n[1] 11900\n[1] 12000\n[1] 12100\n[1] 12200\n[1] 12300\n[1] 12400\n[1] 12500\n[1] 12600\n[1] 12700\n[1] 12800\n[1] 12900\n[1] 13000\n[1] 13100\n[1] 13200\n[1] 13300\n[1] 13400\n[1] 13500\n[1] 13600\n[1] 13700\n[1] 13800\n[1] 13900\n[1] 14000\n[1] 14100\n[1] 14200\n[1] 14300\n[1] 14400\n[1] 14500\n[1] 14600\n[1] 14700\n[1] 14800\n[1] 14900\n[1] 15000\n[1] 15100\n[1] 15200\n[1] 15300\n[1] 15400\n[1] 15500\n[1] 15600\n[1] 15700\n[1] 15800\n[1] 15900\n[1] 16000\n[1] 16100\n[1] 16200\n[1] 16300\n[1] 16400\n[1] 16500\n[1] 16600\n[1] 16700\n[1] 16800\n[1] 16900\n[1] 17000\n[1] 17100\n[1] 17200\n[1] 17300\n[1] 17400\n[1] 17500\n[1] 17600\n[1] 17700\n[1] 17800\n[1] 17900\n[1] 18000\n[1] 18100\n[1] 18200\n[1] 18300\n[1] 18400\n[1] 18500\n[1] 18600\n[1] 18700\n[1] 18800\n[1] 18900\n[1] 19000\n[1] 19100\n[1] 19200\n[1] 19300\n[1] 19400\n[1] 19500\n[1] 19600\n[1] 19700\n[1] 19800\n[1] 19900\n[1] 20000\n[1] 20100\n[1] 20200\n[1] 20300\n[1] 20400\n[1] 20500\n[1] 20600\n[1] 20700\n[1] 20800\n[1] 20900\n[1] 21000\n[1] 21100\n[1] 21200\n[1] 21300\n[1] 21400\n[1] 21500\n[1] 21600\n[1] 21700\n[1] 21800\n[1] 21900\n[1] 22000\n[1] 22100\n[1] 22200\n[1] 22300\n[1] 22400\n[1] 22500\n[1] 22600\n[1] 22700\n[1] 22800\n[1] 22900\n[1] 23000\n[1] 23100\n[1] 23200",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>PBMCs: Determine Significantly Expanded Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part4_3A.html#count-how-many-clones-are-significantly-expanded-post-vax",
    "href": "PBMC_bulkTCR_Part4_3A.html#count-how-many-clones-are-significantly-expanded-post-vax",
    "title": "7  PBMCs: Determine Significantly Expanded Clones",
    "section": "7.4 Count how many clones are significantly expanded post-vax",
    "text": "7.4 Count how many clones are significantly expanded post-vax\n\np101_pval_postvax_vs_prevax &lt;- p101_pval_postvax_vs_prevax %&gt;%\n  mutate(Patient = \"P101\")\np103_pval_postvax_vs_prevax &lt;- p103_pval_postvax_vs_prevax %&gt;%\n  mutate(Patient = \"P103\")\np104_pval_postvax_vs_prevax &lt;- p104_pval_postvax_vs_prevax %&gt;%\n  mutate(Patient = \"P104\")\np105_pval_postvax_vs_prevax &lt;- p105_pval_postvax_vs_prevax %&gt;%\n  mutate(Patient = \"P105\")\np106_pval_postvax_vs_prevax &lt;- p106_pval_postvax_vs_prevax %&gt;%\n  mutate(Patient = \"P106\")\np108_pval_postvax_vs_prevax &lt;- p108_pval_postvax_vs_prevax %&gt;%\n  mutate(Patient = \"P108\")\np109_pval_postvax_vs_prevax &lt;- p109_pval_postvax_vs_prevax %&gt;%\n  mutate(Patient = \"P109\")\np110_pval_postvax_vs_prevax &lt;- p110_pval_postvax_vs_prevax %&gt;%\n  mutate(Patient = \"P110\")\np111_pval_postvax_vs_prevax &lt;- p111_pval_postvax_vs_prevax %&gt;%\n  mutate(Patient = \"P111\")\n\npval_postvax_vs_prevax &lt;- do.call(rbind, list(p101_pval_postvax_vs_prevax,\n                                              p103_pval_postvax_vs_prevax,\n                                              p104_pval_postvax_vs_prevax,\n                                              p105_pval_postvax_vs_prevax,\n                                              p106_pval_postvax_vs_prevax,\n                                              p108_pval_postvax_vs_prevax,\n                                              p109_pval_postvax_vs_prevax,\n                                              p110_pval_postvax_vs_prevax,\n                                              p111_pval_postvax_vs_prevax))",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>PBMCs: Determine Significantly Expanded Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part4_3A.html#calculate-number-of-clones-significantly-expanded-post-nivo-compared-to-pre-nivo",
    "href": "PBMC_bulkTCR_Part4_3A.html#calculate-number-of-clones-significantly-expanded-post-nivo-compared-to-pre-nivo",
    "title": "7  PBMCs: Determine Significantly Expanded Clones",
    "section": "7.5 Calculate number of clones significantly expanded post-nivo compared to pre-nivo",
    "text": "7.5 Calculate number of clones significantly expanded post-nivo compared to pre-nivo\n\n# Filter for clones with at least 3 reads in prevax or pretreatment\np101_betas_prevax_vs_pretreatment &lt;- p101_betas %&gt;%\n  filter(p101_pretreatment_umi &gt;= 3 | p101_prevax_umi &gt;= 3) %&gt;%\n  ungroup()\np103_betas_prevax_vs_pretreatment &lt;- p103_betas %&gt;%\n  filter(p103_pretreatment_umi &gt;= 3 | p103_prevax_umi &gt;= 3) %&gt;%\n  ungroup()\np104_betas_prevax_vs_pretreatment &lt;- p104_betas %&gt;%\n  filter(p104_pretreatment_umi &gt;= 3 | p104_prevax_umi &gt;= 3) %&gt;%\n  ungroup()\np105_betas_prevax_vs_pretreatment &lt;- p105_betas %&gt;%\n  filter(p105_pretreatment_umi &gt;= 3 | p105_prevax_umi &gt;= 3) %&gt;%\n  ungroup()\np106_betas_prevax_vs_pretreatment &lt;- p106_betas %&gt;%\n  filter(p106_pretreatment_umi &gt;= 3 | p106_prevax_umi &gt;= 3) %&gt;%\n  ungroup()\np108_betas_prevax_vs_pretreatment &lt;- p108_betas %&gt;%\n  filter(p108_pretreatment_umi &gt;= 3 | p108_prevax_umi &gt;= 3) %&gt;%\n  ungroup()\np109_betas_prevax_vs_pretreatment &lt;- p109_betas %&gt;%\n  filter(p109_pretreatment_umi &gt;= 3 | p109_prevax_umi &gt;= 3) %&gt;%\n  ungroup()\np110_betas_prevax_vs_pretreatment &lt;- p110_betas %&gt;%\n  filter(p110_pretreatment_umi &gt;= 3 | p110_prevax_umi &gt;= 3) %&gt;%\n  ungroup()\np111_betas_prevax_vs_pretreatment &lt;- p111_betas %&gt;%\n  filter(p111_pretreatment_umi &gt;= 3 | p111_prevax_umi &gt;= 3) %&gt;%\n  ungroup()\n\n# Calculate pval\np101_pval_prevax_vs_pretreatment &lt;- run_fishers_test(p101_betas_prevax_vs_pretreatment, \"p101_pretreatment_umi\", \"p101_prevax_umi\", test = \"less\", correction = \"BY\")\n\n[1] 100\n[1] 200\n[1] 300\n[1] 400\n[1] 500\n[1] 600\n[1] 700\n[1] 800\n[1] 900\n[1] 1000\n[1] 1100\n[1] 1200\n[1] 1300\n[1] 1400\n[1] 1500\n[1] 1600\n[1] 1700\n[1] 1800\n[1] 1900\n[1] 2000\n[1] 2100\n[1] 2200\n[1] 2300\n[1] 2400\n[1] 2500\n[1] 2600\n[1] 2700\n[1] 2800\n[1] 2900\n[1] 3000\n[1] 3100\n[1] 3200\n[1] 3300\n[1] 3400\n[1] 3500\n[1] 3600\n[1] 3700\n[1] 3800\n[1] 3900\n[1] 4000\n[1] 4100\n[1] 4200\n[1] 4300\n[1] 4400\n[1] 4500\n[1] 4600\n[1] 4700\n[1] 4800\n[1] 4900\n[1] 5000\n[1] 5100\n[1] 5200\n[1] 5300\n[1] 5400\n[1] 5500\n[1] 5600\n[1] 5700\n[1] 5800\n[1] 5900\n[1] 6000\n[1] 6100\n[1] 6200\n[1] 6300\n[1] 6400\n[1] 6500\n[1] 6600\n[1] 6700\n[1] 6800\n[1] 6900\n[1] 7000\n[1] 7100\n[1] 7200\n[1] 7300\n[1] 7400\n[1] 7500\n[1] 7600\n[1] 7700\n[1] 7800\n[1] 7900\n[1] 8000\n[1] 8100\n[1] 8200\n[1] 8300\n[1] 8400\n[1] 8500\n[1] 8600\n[1] 8700\n[1] 8800\n[1] 8900\n[1] 9000\n[1] 9100\n[1] 9200\n[1] 9300\n[1] 9400\n[1] 9500\n[1] 9600\n[1] 9700\n[1] 9800\n[1] 9900\n[1] 10000\n[1] 10100\n[1] 10200\n[1] 10300\n[1] 10400\n[1] 10500\n[1] 10600\n[1] 10700\n[1] 10800\n[1] 10900\n[1] 11000\n[1] 11100\n[1] 11200\n[1] 11300\n[1] 11400\n[1] 11500\n[1] 11600\n[1] 11700\n[1] 11800\n[1] 11900\n[1] 12000\n[1] 12100\n[1] 12200\n[1] 12300\n[1] 12400\n[1] 12500\n[1] 12600\n[1] 12700\n[1] 12800\n[1] 12900\n[1] 13000\n[1] 13100\n[1] 13200\n[1] 13300\n[1] 13400\n[1] 13500\n\np103_pval_prevax_vs_pretreatment &lt;- run_fishers_test(p103_betas_prevax_vs_pretreatment, \"p103_pretreatment_umi\", \"p103_prevax_umi\", test = \"less\", correction = \"BY\")\n\n[1] 100\n[1] 200\n[1] 300\n[1] 400\n[1] 500\n[1] 600\n[1] 700\n[1] 800\n[1] 900\n[1] 1000\n[1] 1100\n[1] 1200\n[1] 1300\n[1] 1400\n[1] 1500\n[1] 1600\n[1] 1700\n[1] 1800\n[1] 1900\n[1] 2000\n[1] 2100\n[1] 2200\n[1] 2300\n[1] 2400\n[1] 2500\n[1] 2600\n[1] 2700\n[1] 2800\n[1] 2900\n[1] 3000\n[1] 3100\n[1] 3200\n[1] 3300\n[1] 3400\n[1] 3500\n[1] 3600\n[1] 3700\n[1] 3800\n[1] 3900\n[1] 4000\n[1] 4100\n[1] 4200\n[1] 4300\n[1] 4400\n[1] 4500\n[1] 4600\n[1] 4700\n[1] 4800\n[1] 4900\n[1] 5000\n[1] 5100\n[1] 5200\n[1] 5300\n[1] 5400\n[1] 5500\n[1] 5600\n[1] 5700\n[1] 5800\n[1] 5900\n[1] 6000\n[1] 6100\n[1] 6200\n[1] 6300\n[1] 6400\n[1] 6500\n[1] 6600\n[1] 6700\n[1] 6800\n[1] 6900\n[1] 7000\n[1] 7100\n[1] 7200\n[1] 7300\n[1] 7400\n[1] 7500\n[1] 7600\n[1] 7700\n[1] 7800\n[1] 7900\n[1] 8000\n[1] 8100\n[1] 8200\n[1] 8300\n[1] 8400\n[1] 8500\n[1] 8600\n[1] 8700\n[1] 8800\n[1] 8900\n[1] 9000\n[1] 9100\n[1] 9200\n[1] 9300\n[1] 9400\n[1] 9500\n[1] 9600\n[1] 9700\n[1] 9800\n[1] 9900\n[1] 10000\n[1] 10100\n[1] 10200\n[1] 10300\n[1] 10400\n[1] 10500\n[1] 10600\n[1] 10700\n[1] 10800\n[1] 10900\n[1] 11000\n[1] 11100\n[1] 11200\n[1] 11300\n[1] 11400\n[1] 11500\n[1] 11600\n[1] 11700\n[1] 11800\n[1] 11900\n[1] 12000\n[1] 12100\n[1] 12200\n[1] 12300\n[1] 12400\n[1] 12500\n[1] 12600\n[1] 12700\n[1] 12800\n[1] 12900\n[1] 13000\n[1] 13100\n[1] 13200\n[1] 13300\n[1] 13400\n[1] 13500\n[1] 13600\n[1] 13700\n[1] 13800\n[1] 13900\n[1] 14000\n[1] 14100\n[1] 14200\n[1] 14300\n[1] 14400\n[1] 14500\n[1] 14600\n[1] 14700\n[1] 14800\n[1] 14900\n[1] 15000\n[1] 15100\n[1] 15200\n[1] 15300\n[1] 15400\n[1] 15500\n[1] 15600\n[1] 15700\n[1] 15800\n[1] 15900\n[1] 16000\n[1] 16100\n[1] 16200\n[1] 16300\n[1] 16400\n[1] 16500\n[1] 16600\n[1] 16700\n[1] 16800\n[1] 16900\n[1] 17000\n[1] 17100\n[1] 17200\n[1] 17300\n[1] 17400\n[1] 17500\n[1] 17600\n[1] 17700\n[1] 17800\n[1] 17900\n[1] 18000\n[1] 18100\n[1] 18200\n[1] 18300\n[1] 18400\n[1] 18500\n[1] 18600\n[1] 18700\n[1] 18800\n[1] 18900\n[1] 19000\n[1] 19100\n[1] 19200\n[1] 19300\n[1] 19400\n[1] 19500\n[1] 19600\n[1] 19700\n[1] 19800\n[1] 19900\n[1] 20000\n[1] 20100\n[1] 20200\n[1] 20300\n[1] 20400\n[1] 20500\n[1] 20600\n[1] 20700\n[1] 20800\n\np104_pval_prevax_vs_pretreatment &lt;- run_fishers_test(p104_betas_prevax_vs_pretreatment, \"p104_pretreatment_umi\", \"p104_prevax_umi\", test = \"less\", correction = \"BY\")\n\n[1] 100\n[1] 200\n[1] 300\n[1] 400\n[1] 500\n[1] 600\n[1] 700\n[1] 800\n[1] 900\n[1] 1000\n[1] 1100\n[1] 1200\n[1] 1300\n[1] 1400\n[1] 1500\n[1] 1600\n[1] 1700\n[1] 1800\n[1] 1900\n[1] 2000\n[1] 2100\n[1] 2200\n[1] 2300\n[1] 2400\n[1] 2500\n[1] 2600\n[1] 2700\n[1] 2800\n[1] 2900\n[1] 3000\n[1] 3100\n[1] 3200\n[1] 3300\n[1] 3400\n[1] 3500\n[1] 3600\n[1] 3700\n[1] 3800\n[1] 3900\n[1] 4000\n[1] 4100\n[1] 4200\n[1] 4300\n[1] 4400\n[1] 4500\n[1] 4600\n[1] 4700\n[1] 4800\n[1] 4900\n[1] 5000\n[1] 5100\n[1] 5200\n[1] 5300\n[1] 5400\n[1] 5500\n[1] 5600\n[1] 5700\n[1] 5800\n[1] 5900\n[1] 6000\n[1] 6100\n[1] 6200\n[1] 6300\n[1] 6400\n[1] 6500\n[1] 6600\n[1] 6700\n[1] 6800\n[1] 6900\n[1] 7000\n[1] 7100\n[1] 7200\n[1] 7300\n[1] 7400\n[1] 7500\n[1] 7600\n[1] 7700\n[1] 7800\n[1] 7900\n[1] 8000\n[1] 8100\n[1] 8200\n[1] 8300\n[1] 8400\n[1] 8500\n[1] 8600\n[1] 8700\n[1] 8800\n[1] 8900\n[1] 9000\n[1] 9100\n[1] 9200\n[1] 9300\n[1] 9400\n[1] 9500\n[1] 9600\n[1] 9700\n[1] 9800\n[1] 9900\n[1] 10000\n[1] 10100\n[1] 10200\n[1] 10300\n[1] 10400\n[1] 10500\n[1] 10600\n[1] 10700\n[1] 10800\n[1] 10900\n[1] 11000\n[1] 11100\n[1] 11200\n[1] 11300\n[1] 11400\n[1] 11500\n[1] 11600\n[1] 11700\n[1] 11800\n[1] 11900\n[1] 12000\n[1] 12100\n[1] 12200\n[1] 12300\n[1] 12400\n[1] 12500\n[1] 12600\n[1] 12700\n[1] 12800\n[1] 12900\n[1] 13000\n[1] 13100\n[1] 13200\n[1] 13300\n[1] 13400\n[1] 13500\n[1] 13600\n[1] 13700\n[1] 13800\n[1] 13900\n[1] 14000\n[1] 14100\n[1] 14200\n[1] 14300\n[1] 14400\n[1] 14500\n[1] 14600\n[1] 14700\n[1] 14800\n[1] 14900\n[1] 15000\n[1] 15100\n[1] 15200\n[1] 15300\n[1] 15400\n[1] 15500\n[1] 15600\n[1] 15700\n[1] 15800\n[1] 15900\n[1] 16000\n[1] 16100\n[1] 16200\n[1] 16300\n[1] 16400\n[1] 16500\n[1] 16600\n[1] 16700\n[1] 16800\n[1] 16900\n[1] 17000\n[1] 17100\n[1] 17200\n[1] 17300\n[1] 17400\n[1] 17500\n[1] 17600\n[1] 17700\n[1] 17800\n[1] 17900\n[1] 18000\n[1] 18100\n[1] 18200\n[1] 18300\n[1] 18400\n[1] 18500\n[1] 18600\n[1] 18700\n[1] 18800\n[1] 18900\n[1] 19000\n[1] 19100\n[1] 19200\n[1] 19300\n[1] 19400\n[1] 19500\n[1] 19600\n[1] 19700\n[1] 19800\n[1] 19900\n[1] 20000\n[1] 20100\n[1] 20200\n[1] 20300\n[1] 20400\n[1] 20500\n[1] 20600\n[1] 20700\n[1] 20800\n[1] 20900\n[1] 21000\n[1] 21100\n[1] 21200\n[1] 21300\n[1] 21400\n[1] 21500\n[1] 21600\n[1] 21700\n[1] 21800\n[1] 21900\n[1] 22000\n[1] 22100\n[1] 22200\n[1] 22300\n[1] 22400\n[1] 22500\n[1] 22600\n[1] 22700\n[1] 22800\n[1] 22900\n[1] 23000\n[1] 23100\n[1] 23200\n[1] 23300\n[1] 23400\n[1] 23500\n[1] 23600\n[1] 23700\n[1] 23800\n[1] 23900\n[1] 24000\n[1] 24100\n[1] 24200\n[1] 24300\n[1] 24400\n[1] 24500\n[1] 24600\n[1] 24700\n[1] 24800\n[1] 24900\n[1] 25000\n[1] 25100\n[1] 25200\n[1] 25300\n[1] 25400\n[1] 25500\n[1] 25600\n[1] 25700\n[1] 25800\n[1] 25900\n[1] 26000\n[1] 26100\n[1] 26200\n[1] 26300\n[1] 26400\n[1] 26500\n[1] 26600\n[1] 26700\n[1] 26800\n[1] 26900\n[1] 27000\n[1] 27100\n[1] 27200\n[1] 27300\n[1] 27400\n[1] 27500\n[1] 27600\n[1] 27700\n[1] 27800\n[1] 27900\n[1] 28000\n[1] 28100\n[1] 28200\n[1] 28300\n[1] 28400\n[1] 28500\n\np105_pval_prevax_vs_pretreatment &lt;- run_fishers_test(p105_betas_prevax_vs_pretreatment, \"p105_pretreatment_umi\", \"p105_prevax_umi\", test = \"less\", correction = \"BY\")\n\n[1] 100\n[1] 200\n[1] 300\n[1] 400\n[1] 500\n[1] 600\n[1] 700\n[1] 800\n[1] 900\n[1] 1000\n[1] 1100\n[1] 1200\n[1] 1300\n[1] 1400\n[1] 1500\n[1] 1600\n[1] 1700\n[1] 1800\n[1] 1900\n[1] 2000\n[1] 2100\n[1] 2200\n[1] 2300\n[1] 2400\n[1] 2500\n[1] 2600\n[1] 2700\n[1] 2800\n[1] 2900\n[1] 3000\n[1] 3100\n[1] 3200\n[1] 3300\n[1] 3400\n[1] 3500\n[1] 3600\n[1] 3700\n[1] 3800\n[1] 3900\n[1] 4000\n[1] 4100\n[1] 4200\n[1] 4300\n[1] 4400\n[1] 4500\n[1] 4600\n[1] 4700\n[1] 4800\n[1] 4900\n[1] 5000\n[1] 5100\n[1] 5200\n[1] 5300\n[1] 5400\n[1] 5500\n[1] 5600\n[1] 5700\n[1] 5800\n[1] 5900\n[1] 6000\n[1] 6100\n[1] 6200\n[1] 6300\n[1] 6400\n[1] 6500\n[1] 6600\n[1] 6700\n[1] 6800\n[1] 6900\n[1] 7000\n[1] 7100\n[1] 7200\n[1] 7300\n[1] 7400\n[1] 7500\n[1] 7600\n[1] 7700\n[1] 7800\n[1] 7900\n[1] 8000\n[1] 8100\n[1] 8200\n[1] 8300\n[1] 8400\n[1] 8500\n[1] 8600\n[1] 8700\n[1] 8800\n[1] 8900\n[1] 9000\n[1] 9100\n[1] 9200\n[1] 9300\n[1] 9400\n[1] 9500\n[1] 9600\n[1] 9700\n[1] 9800\n[1] 9900\n[1] 10000\n[1] 10100\n[1] 10200\n[1] 10300\n[1] 10400\n[1] 10500\n[1] 10600\n[1] 10700\n[1] 10800\n[1] 10900\n[1] 11000\n[1] 11100\n[1] 11200\n[1] 11300\n[1] 11400\n[1] 11500\n[1] 11600\n[1] 11700\n[1] 11800\n[1] 11900\n[1] 12000\n[1] 12100\n[1] 12200\n[1] 12300\n[1] 12400\n[1] 12500\n[1] 12600\n[1] 12700\n[1] 12800\n[1] 12900\n[1] 13000\n[1] 13100\n[1] 13200\n[1] 13300\n[1] 13400\n[1] 13500\n[1] 13600\n[1] 13700\n[1] 13800\n[1] 13900\n[1] 14000\n[1] 14100\n[1] 14200\n[1] 14300\n[1] 14400\n[1] 14500\n[1] 14600\n[1] 14700\n[1] 14800\n[1] 14900\n[1] 15000\n[1] 15100\n[1] 15200\n[1] 15300\n[1] 15400\n[1] 15500\n[1] 15600\n[1] 15700\n[1] 15800\n[1] 15900\n[1] 16000\n[1] 16100\n[1] 16200\n[1] 16300\n[1] 16400\n[1] 16500\n[1] 16600\n[1] 16700\n[1] 16800\n[1] 16900\n[1] 17000\n[1] 17100\n[1] 17200\n[1] 17300\n[1] 17400\n[1] 17500\n[1] 17600\n[1] 17700\n[1] 17800\n[1] 17900\n[1] 18000\n[1] 18100\n[1] 18200\n[1] 18300\n[1] 18400\n[1] 18500\n[1] 18600\n[1] 18700\n[1] 18800\n[1] 18900\n[1] 19000\n[1] 19100\n[1] 19200\n[1] 19300\n[1] 19400\n[1] 19500\n[1] 19600\n[1] 19700\n[1] 19800\n[1] 19900\n[1] 20000\n[1] 20100\n[1] 20200\n[1] 20300\n[1] 20400\n[1] 20500\n[1] 20600\n[1] 20700\n[1] 20800\n[1] 20900\n[1] 21000\n[1] 21100\n[1] 21200\n[1] 21300\n[1] 21400\n[1] 21500\n[1] 21600\n[1] 21700\n[1] 21800\n[1] 21900\n[1] 22000\n[1] 22100\n[1] 22200\n[1] 22300\n[1] 22400\n[1] 22500\n[1] 22600\n[1] 22700\n[1] 22800\n[1] 22900\n[1] 23000\n[1] 23100\n[1] 23200\n[1] 23300\n[1] 23400\n[1] 23500\n[1] 23600\n[1] 23700\n[1] 23800\n[1] 23900\n\np106_pval_prevax_vs_pretreatment &lt;- run_fishers_test(p106_betas_prevax_vs_pretreatment, \"p106_pretreatment_umi\", \"p106_prevax_umi\", test = \"less\", correction = \"BY\")\n\n[1] 100\n[1] 200\n[1] 300\n[1] 400\n[1] 500\n[1] 600\n[1] 700\n[1] 800\n[1] 900\n[1] 1000\n[1] 1100\n[1] 1200\n[1] 1300\n[1] 1400\n[1] 1500\n[1] 1600\n[1] 1700\n[1] 1800\n[1] 1900\n[1] 2000\n[1] 2100\n[1] 2200\n[1] 2300\n[1] 2400\n[1] 2500\n[1] 2600\n[1] 2700\n[1] 2800\n[1] 2900\n[1] 3000\n[1] 3100\n[1] 3200\n[1] 3300\n[1] 3400\n[1] 3500\n[1] 3600\n[1] 3700\n[1] 3800\n[1] 3900\n[1] 4000\n[1] 4100\n[1] 4200\n[1] 4300\n[1] 4400\n[1] 4500\n[1] 4600\n[1] 4700\n[1] 4800\n[1] 4900\n[1] 5000\n[1] 5100\n[1] 5200\n[1] 5300\n[1] 5400\n[1] 5500\n[1] 5600\n[1] 5700\n[1] 5800\n[1] 5900\n[1] 6000\n[1] 6100\n[1] 6200\n[1] 6300\n[1] 6400\n[1] 6500\n[1] 6600\n[1] 6700\n[1] 6800\n[1] 6900\n[1] 7000\n[1] 7100\n[1] 7200\n[1] 7300\n[1] 7400\n[1] 7500\n[1] 7600\n[1] 7700\n[1] 7800\n[1] 7900\n[1] 8000\n[1] 8100\n[1] 8200\n[1] 8300\n[1] 8400\n[1] 8500\n[1] 8600\n[1] 8700\n[1] 8800\n[1] 8900\n[1] 9000\n[1] 9100\n[1] 9200\n[1] 9300\n[1] 9400\n[1] 9500\n[1] 9600\n[1] 9700\n[1] 9800\n[1] 9900\n[1] 10000\n[1] 10100\n[1] 10200\n[1] 10300\n[1] 10400\n[1] 10500\n[1] 10600\n[1] 10700\n[1] 10800\n[1] 10900\n[1] 11000\n[1] 11100\n[1] 11200\n[1] 11300\n[1] 11400\n[1] 11500\n[1] 11600\n[1] 11700\n[1] 11800\n[1] 11900\n[1] 12000\n[1] 12100\n[1] 12200\n[1] 12300\n[1] 12400\n[1] 12500\n[1] 12600\n[1] 12700\n[1] 12800\n[1] 12900\n[1] 13000\n[1] 13100\n[1] 13200\n[1] 13300\n[1] 13400\n[1] 13500\n[1] 13600\n[1] 13700\n[1] 13800\n[1] 13900\n[1] 14000\n[1] 14100\n[1] 14200\n[1] 14300\n[1] 14400\n[1] 14500\n[1] 14600\n[1] 14700\n[1] 14800\n[1] 14900\n[1] 15000\n[1] 15100\n[1] 15200\n[1] 15300\n[1] 15400\n[1] 15500\n[1] 15600\n[1] 15700\n[1] 15800\n[1] 15900\n[1] 16000\n[1] 16100\n[1] 16200\n[1] 16300\n[1] 16400\n[1] 16500\n[1] 16600\n[1] 16700\n[1] 16800\n[1] 16900\n[1] 17000\n[1] 17100\n[1] 17200\n[1] 17300\n[1] 17400\n[1] 17500\n[1] 17600\n[1] 17700\n[1] 17800\n[1] 17900\n[1] 18000\n[1] 18100\n[1] 18200\n[1] 18300\n[1] 18400\n[1] 18500\n[1] 18600\n[1] 18700\n[1] 18800\n[1] 18900\n[1] 19000\n[1] 19100\n[1] 19200\n[1] 19300\n[1] 19400\n[1] 19500\n[1] 19600\n[1] 19700\n[1] 19800\n[1] 19900\n[1] 20000\n[1] 20100\n[1] 20200\n[1] 20300\n[1] 20400\n[1] 20500\n[1] 20600\n[1] 20700\n[1] 20800\n[1] 20900\n[1] 21000\n[1] 21100\n[1] 21200\n[1] 21300\n[1] 21400\n[1] 21500\n[1] 21600\n[1] 21700\n[1] 21800\n[1] 21900\n[1] 22000\n[1] 22100\n[1] 22200\n[1] 22300\n[1] 22400\n[1] 22500\n[1] 22600\n[1] 22700\n[1] 22800\n[1] 22900\n[1] 23000\n[1] 23100\n[1] 23200\n[1] 23300\n[1] 23400\n[1] 23500\n[1] 23600\n[1] 23700\n[1] 23800\n[1] 23900\n[1] 24000\n[1] 24100\n[1] 24200\n[1] 24300\n[1] 24400\n[1] 24500\n[1] 24600\n[1] 24700\n\np108_pval_prevax_vs_pretreatment &lt;- run_fishers_test(p108_betas_prevax_vs_pretreatment, \"p108_pretreatment_umi\", \"p108_prevax_umi\", test = \"less\", correction = \"BY\")\n\n[1] 100\n[1] 200\n[1] 300\n[1] 400\n[1] 500\n[1] 600\n[1] 700\n[1] 800\n[1] 900\n[1] 1000\n[1] 1100\n[1] 1200\n[1] 1300\n[1] 1400\n[1] 1500\n[1] 1600\n[1] 1700\n[1] 1800\n[1] 1900\n[1] 2000\n[1] 2100\n[1] 2200\n[1] 2300\n[1] 2400\n[1] 2500\n[1] 2600\n[1] 2700\n[1] 2800\n[1] 2900\n[1] 3000\n[1] 3100\n[1] 3200\n[1] 3300\n[1] 3400\n[1] 3500\n[1] 3600\n[1] 3700\n[1] 3800\n[1] 3900\n[1] 4000\n[1] 4100\n[1] 4200\n[1] 4300\n[1] 4400\n[1] 4500\n[1] 4600\n[1] 4700\n[1] 4800\n[1] 4900\n[1] 5000\n[1] 5100\n[1] 5200\n[1] 5300\n[1] 5400\n[1] 5500\n[1] 5600\n[1] 5700\n[1] 5800\n[1] 5900\n[1] 6000\n[1] 6100\n[1] 6200\n[1] 6300\n[1] 6400\n[1] 6500\n[1] 6600\n[1] 6700\n[1] 6800\n[1] 6900\n[1] 7000\n[1] 7100\n[1] 7200\n[1] 7300\n[1] 7400\n[1] 7500\n[1] 7600\n[1] 7700\n[1] 7800\n[1] 7900\n[1] 8000\n[1] 8100\n[1] 8200\n[1] 8300\n[1] 8400\n[1] 8500\n[1] 8600\n[1] 8700\n[1] 8800\n[1] 8900\n[1] 9000\n[1] 9100\n[1] 9200\n[1] 9300\n[1] 9400\n[1] 9500\n[1] 9600\n[1] 9700\n[1] 9800\n[1] 9900\n[1] 10000\n[1] 10100\n[1] 10200\n[1] 10300\n[1] 10400\n[1] 10500\n[1] 10600\n[1] 10700\n[1] 10800\n[1] 10900\n[1] 11000\n[1] 11100\n[1] 11200\n[1] 11300\n[1] 11400\n[1] 11500\n[1] 11600\n[1] 11700\n[1] 11800\n[1] 11900\n[1] 12000\n[1] 12100\n[1] 12200\n[1] 12300\n[1] 12400\n[1] 12500\n[1] 12600\n[1] 12700\n[1] 12800\n[1] 12900\n[1] 13000\n[1] 13100\n[1] 13200\n[1] 13300\n[1] 13400\n[1] 13500\n[1] 13600\n[1] 13700\n[1] 13800\n[1] 13900\n[1] 14000\n[1] 14100\n[1] 14200\n[1] 14300\n[1] 14400\n[1] 14500\n[1] 14600\n[1] 14700\n[1] 14800\n[1] 14900\n[1] 15000\n[1] 15100\n[1] 15200\n[1] 15300\n[1] 15400\n[1] 15500\n[1] 15600\n[1] 15700\n[1] 15800\n[1] 15900\n[1] 16000\n[1] 16100\n[1] 16200\n[1] 16300\n[1] 16400\n[1] 16500\n[1] 16600\n[1] 16700\n[1] 16800\n[1] 16900\n[1] 17000\n[1] 17100\n[1] 17200\n[1] 17300\n[1] 17400\n[1] 17500\n[1] 17600\n[1] 17700\n[1] 17800\n[1] 17900\n[1] 18000\n[1] 18100\n[1] 18200\n[1] 18300\n[1] 18400\n[1] 18500\n[1] 18600\n[1] 18700\n[1] 18800\n[1] 18900\n[1] 19000\n[1] 19100\n[1] 19200\n[1] 19300\n[1] 19400\n[1] 19500\n[1] 19600\n[1] 19700\n[1] 19800\n[1] 19900\n[1] 20000\n[1] 20100\n[1] 20200\n[1] 20300\n[1] 20400\n[1] 20500\n[1] 20600\n[1] 20700\n[1] 20800\n[1] 20900\n[1] 21000\n[1] 21100\n[1] 21200\n[1] 21300\n[1] 21400\n[1] 21500\n[1] 21600\n[1] 21700\n[1] 21800\n[1] 21900\n[1] 22000\n[1] 22100\n[1] 22200\n[1] 22300\n[1] 22400\n[1] 22500\n[1] 22600\n[1] 22700\n[1] 22800\n[1] 22900\n[1] 23000\n[1] 23100\n[1] 23200\n[1] 23300\n[1] 23400\n[1] 23500\n[1] 23600\n[1] 23700\n[1] 23800\n[1] 23900\n[1] 24000\n[1] 24100\n[1] 24200\n[1] 24300\n[1] 24400\n[1] 24500\n[1] 24600\n[1] 24700\n[1] 24800\n[1] 24900\n[1] 25000\n[1] 25100\n[1] 25200\n[1] 25300\n[1] 25400\n[1] 25500\n[1] 25600\n[1] 25700\n[1] 25800\n[1] 25900\n[1] 26000\n[1] 26100\n[1] 26200\n[1] 26300\n[1] 26400\n[1] 26500\n[1] 26600\n[1] 26700\n[1] 26800\n[1] 26900\n[1] 27000\n[1] 27100\n[1] 27200\n[1] 27300\n[1] 27400\n[1] 27500\n[1] 27600\n[1] 27700\n[1] 27800\n[1] 27900\n[1] 28000\n\np109_pval_prevax_vs_pretreatment &lt;- run_fishers_test(p109_betas_prevax_vs_pretreatment, \"p109_pretreatment_umi\", \"p109_prevax_umi\", test = \"less\", correction = \"BY\")\n\n[1] 100\n[1] 200\n[1] 300\n[1] 400\n[1] 500\n[1] 600\n[1] 700\n[1] 800\n[1] 900\n[1] 1000\n[1] 1100\n[1] 1200\n[1] 1300\n[1] 1400\n[1] 1500\n[1] 1600\n[1] 1700\n[1] 1800\n[1] 1900\n[1] 2000\n[1] 2100\n[1] 2200\n[1] 2300\n[1] 2400\n[1] 2500\n[1] 2600\n[1] 2700\n[1] 2800\n[1] 2900\n[1] 3000\n[1] 3100\n[1] 3200\n[1] 3300\n[1] 3400\n[1] 3500\n[1] 3600\n[1] 3700\n[1] 3800\n[1] 3900\n[1] 4000\n[1] 4100\n[1] 4200\n[1] 4300\n[1] 4400\n[1] 4500\n[1] 4600\n[1] 4700\n[1] 4800\n[1] 4900\n[1] 5000\n[1] 5100\n[1] 5200\n[1] 5300\n[1] 5400\n[1] 5500\n[1] 5600\n[1] 5700\n[1] 5800\n[1] 5900\n[1] 6000\n[1] 6100\n[1] 6200\n[1] 6300\n[1] 6400\n[1] 6500\n[1] 6600\n[1] 6700\n[1] 6800\n[1] 6900\n[1] 7000\n[1] 7100\n[1] 7200\n[1] 7300\n[1] 7400\n[1] 7500\n[1] 7600\n[1] 7700\n[1] 7800\n[1] 7900\n[1] 8000\n[1] 8100\n[1] 8200\n[1] 8300\n[1] 8400\n[1] 8500\n[1] 8600\n[1] 8700\n[1] 8800\n[1] 8900\n[1] 9000\n[1] 9100\n[1] 9200\n[1] 9300\n[1] 9400\n[1] 9500\n[1] 9600\n[1] 9700\n[1] 9800\n[1] 9900\n[1] 10000\n[1] 10100\n[1] 10200\n[1] 10300\n[1] 10400\n[1] 10500\n[1] 10600\n[1] 10700\n[1] 10800\n[1] 10900\n[1] 11000\n[1] 11100\n[1] 11200\n[1] 11300\n[1] 11400\n[1] 11500\n[1] 11600\n[1] 11700\n[1] 11800\n[1] 11900\n[1] 12000\n[1] 12100\n[1] 12200\n[1] 12300\n[1] 12400\n[1] 12500\n[1] 12600\n[1] 12700\n[1] 12800\n[1] 12900\n\np110_pval_prevax_vs_pretreatment &lt;- run_fishers_test(p110_betas_prevax_vs_pretreatment, \"p110_pretreatment_umi\", \"p110_prevax_umi\", test = \"less\", correction = \"BY\")\n\n[1] 100\n[1] 200\n[1] 300\n[1] 400\n[1] 500\n[1] 600\n[1] 700\n[1] 800\n[1] 900\n[1] 1000\n[1] 1100\n[1] 1200\n[1] 1300\n[1] 1400\n[1] 1500\n[1] 1600\n[1] 1700\n[1] 1800\n[1] 1900\n[1] 2000\n[1] 2100\n[1] 2200\n[1] 2300\n[1] 2400\n[1] 2500\n[1] 2600\n[1] 2700\n[1] 2800\n[1] 2900\n[1] 3000\n[1] 3100\n[1] 3200\n[1] 3300\n[1] 3400\n[1] 3500\n[1] 3600\n[1] 3700\n[1] 3800\n[1] 3900\n[1] 4000\n[1] 4100\n[1] 4200\n[1] 4300\n[1] 4400\n[1] 4500\n[1] 4600\n[1] 4700\n[1] 4800\n[1] 4900\n[1] 5000\n[1] 5100\n[1] 5200\n[1] 5300\n[1] 5400\n[1] 5500\n[1] 5600\n[1] 5700\n[1] 5800\n[1] 5900\n[1] 6000\n[1] 6100\n[1] 6200\n[1] 6300\n[1] 6400\n[1] 6500\n[1] 6600\n[1] 6700\n[1] 6800\n[1] 6900\n[1] 7000\n[1] 7100\n[1] 7200\n[1] 7300\n[1] 7400\n[1] 7500\n[1] 7600\n[1] 7700\n[1] 7800\n[1] 7900\n[1] 8000\n[1] 8100\n[1] 8200\n[1] 8300\n[1] 8400\n[1] 8500\n[1] 8600\n[1] 8700\n[1] 8800\n[1] 8900\n[1] 9000\n[1] 9100\n[1] 9200\n[1] 9300\n[1] 9400\n[1] 9500\n[1] 9600\n[1] 9700\n[1] 9800\n[1] 9900\n[1] 10000\n[1] 10100\n[1] 10200\n[1] 10300\n[1] 10400\n[1] 10500\n[1] 10600\n[1] 10700\n[1] 10800\n[1] 10900\n[1] 11000\n[1] 11100\n[1] 11200\n[1] 11300\n[1] 11400\n[1] 11500\n[1] 11600\n[1] 11700\n[1] 11800\n[1] 11900\n[1] 12000\n[1] 12100\n[1] 12200\n[1] 12300\n[1] 12400\n[1] 12500\n[1] 12600\n[1] 12700\n[1] 12800\n[1] 12900\n[1] 13000\n[1] 13100\n[1] 13200\n[1] 13300\n[1] 13400\n[1] 13500\n[1] 13600\n[1] 13700\n[1] 13800\n[1] 13900\n[1] 14000\n[1] 14100\n[1] 14200\n[1] 14300\n[1] 14400\n[1] 14500\n[1] 14600\n[1] 14700\n[1] 14800\n[1] 14900\n[1] 15000\n[1] 15100\n[1] 15200\n[1] 15300\n[1] 15400\n[1] 15500\n[1] 15600\n[1] 15700\n[1] 15800\n[1] 15900\n[1] 16000\n[1] 16100\n[1] 16200\n[1] 16300\n[1] 16400\n[1] 16500\n[1] 16600\n[1] 16700\n[1] 16800\n[1] 16900\n[1] 17000\n[1] 17100\n[1] 17200\n[1] 17300\n[1] 17400\n[1] 17500\n[1] 17600\n[1] 17700\n[1] 17800\n[1] 17900\n[1] 18000\n[1] 18100\n[1] 18200\n[1] 18300\n[1] 18400\n[1] 18500\n[1] 18600\n[1] 18700\n[1] 18800\n[1] 18900\n[1] 19000\n[1] 19100\n[1] 19200\n[1] 19300\n[1] 19400\n[1] 19500\n[1] 19600\n[1] 19700\n[1] 19800\n[1] 19900\n[1] 20000\n[1] 20100\n[1] 20200\n[1] 20300\n[1] 20400\n[1] 20500\n[1] 20600\n[1] 20700\n[1] 20800\n[1] 20900\n[1] 21000\n[1] 21100\n[1] 21200\n[1] 21300\n[1] 21400\n[1] 21500\n[1] 21600\n[1] 21700\n[1] 21800\n[1] 21900\n[1] 22000\n[1] 22100\n[1] 22200\n[1] 22300\n[1] 22400\n[1] 22500\n[1] 22600\n[1] 22700\n[1] 22800\n[1] 22900\n[1] 23000\n[1] 23100\n[1] 23200\n[1] 23300\n[1] 23400\n[1] 23500\n[1] 23600\n[1] 23700\n[1] 23800\n[1] 23900\n[1] 24000\n[1] 24100\n[1] 24200\n[1] 24300\n[1] 24400\n[1] 24500\n[1] 24600\n[1] 24700\n[1] 24800\n[1] 24900\n[1] 25000\n[1] 25100\n[1] 25200\n[1] 25300\n[1] 25400\n[1] 25500\n[1] 25600\n[1] 25700\n[1] 25800\n[1] 25900\n[1] 26000\n[1] 26100\n[1] 26200\n[1] 26300\n[1] 26400\n[1] 26500\n[1] 26600\n[1] 26700\n[1] 26800\n[1] 26900\n[1] 27000\n[1] 27100\n[1] 27200\n[1] 27300\n[1] 27400\n[1] 27500\n[1] 27600\n[1] 27700\n[1] 27800\n[1] 27900\n[1] 28000\n[1] 28100\n[1] 28200\n[1] 28300\n[1] 28400\n[1] 28500\n[1] 28600\n[1] 28700\n[1] 28800\n[1] 28900\n[1] 29000\n[1] 29100\n[1] 29200\n[1] 29300\n[1] 29400\n[1] 29500\n[1] 29600\n[1] 29700\n[1] 29800\n[1] 29900\n[1] 30000\n[1] 30100\n[1] 30200\n[1] 30300\n[1] 30400\n[1] 30500\n[1] 30600\n[1] 30700\n[1] 30800\n[1] 30900\n[1] 31000\n[1] 31100\n[1] 31200\n[1] 31300\n[1] 31400\n[1] 31500\n[1] 31600\n[1] 31700\n[1] 31800\n[1] 31900\n[1] 32000\n[1] 32100\n[1] 32200\n[1] 32300\n[1] 32400\n[1] 32500\n[1] 32600\n[1] 32700\n[1] 32800\n[1] 32900\n[1] 33000\n[1] 33100\n[1] 33200\n[1] 33300\n[1] 33400\n[1] 33500\n[1] 33600\n[1] 33700\n[1] 33800\n[1] 33900\n[1] 34000\n[1] 34100\n[1] 34200\n[1] 34300\n[1] 34400\n[1] 34500\n[1] 34600\n[1] 34700\n[1] 34800\n[1] 34900\n[1] 35000\n[1] 35100\n[1] 35200\n[1] 35300\n[1] 35400\n[1] 35500\n[1] 35600\n[1] 35700\n[1] 35800\n[1] 35900\n[1] 36000\n[1] 36100\n[1] 36200\n[1] 36300\n[1] 36400\n[1] 36500\n[1] 36600\n[1] 36700\n[1] 36800\n[1] 36900\n[1] 37000\n[1] 37100\n[1] 37200\n[1] 37300\n[1] 37400\n[1] 37500\n[1] 37600\n[1] 37700\n[1] 37800\n[1] 37900\n[1] 38000\n[1] 38100\n[1] 38200\n[1] 38300\n[1] 38400\n[1] 38500\n[1] 38600\n[1] 38700\n[1] 38800\n[1] 38900\n[1] 39000\n[1] 39100\n[1] 39200\n[1] 39300\n[1] 39400\n\np111_pval_prevax_vs_pretreatment &lt;- run_fishers_test(p111_betas_prevax_vs_pretreatment, \"p111_pretreatment_umi\", \"p111_prevax_umi\", test = \"less\", correction = \"BY\")\n\n[1] 100\n[1] 200\n[1] 300\n[1] 400\n[1] 500\n[1] 600\n[1] 700\n[1] 800\n[1] 900\n[1] 1000\n[1] 1100\n[1] 1200\n[1] 1300\n[1] 1400\n[1] 1500\n[1] 1600\n[1] 1700\n[1] 1800\n[1] 1900\n[1] 2000\n[1] 2100\n[1] 2200\n[1] 2300\n[1] 2400\n[1] 2500\n[1] 2600\n[1] 2700\n[1] 2800\n[1] 2900\n[1] 3000\n[1] 3100\n[1] 3200\n[1] 3300\n[1] 3400\n[1] 3500\n[1] 3600\n[1] 3700\n[1] 3800\n[1] 3900\n[1] 4000\n[1] 4100\n[1] 4200\n[1] 4300\n[1] 4400\n[1] 4500\n[1] 4600\n[1] 4700\n[1] 4800\n[1] 4900\n[1] 5000\n[1] 5100\n[1] 5200\n[1] 5300\n[1] 5400\n[1] 5500\n[1] 5600\n[1] 5700\n[1] 5800\n[1] 5900\n[1] 6000\n[1] 6100\n[1] 6200\n[1] 6300\n[1] 6400\n[1] 6500\n[1] 6600\n[1] 6700\n[1] 6800\n[1] 6900\n[1] 7000\n[1] 7100\n[1] 7200\n[1] 7300\n[1] 7400\n[1] 7500\n[1] 7600\n[1] 7700\n[1] 7800\n[1] 7900\n[1] 8000\n[1] 8100\n[1] 8200\n[1] 8300\n[1] 8400\n[1] 8500\n[1] 8600\n[1] 8700\n[1] 8800\n[1] 8900\n[1] 9000\n[1] 9100\n[1] 9200\n[1] 9300\n[1] 9400\n[1] 9500\n[1] 9600\n[1] 9700\n[1] 9800\n[1] 9900\n[1] 10000\n[1] 10100\n[1] 10200\n[1] 10300\n[1] 10400\n[1] 10500\n[1] 10600\n[1] 10700\n[1] 10800\n[1] 10900\n[1] 11000\n[1] 11100\n[1] 11200\n[1] 11300\n[1] 11400\n[1] 11500\n[1] 11600\n[1] 11700\n[1] 11800\n[1] 11900\n[1] 12000\n[1] 12100\n[1] 12200\n[1] 12300\n[1] 12400\n[1] 12500\n[1] 12600\n[1] 12700\n[1] 12800\n[1] 12900\n[1] 13000\n[1] 13100\n[1] 13200\n[1] 13300\n[1] 13400\n[1] 13500\n[1] 13600\n[1] 13700\n[1] 13800\n[1] 13900\n[1] 14000\n[1] 14100\n[1] 14200\n[1] 14300\n[1] 14400\n[1] 14500\n[1] 14600\n[1] 14700\n[1] 14800\n[1] 14900\n[1] 15000\n[1] 15100\n[1] 15200\n[1] 15300\n[1] 15400\n[1] 15500\n[1] 15600\n[1] 15700\n[1] 15800\n[1] 15900\n[1] 16000\n[1] 16100\n[1] 16200\n[1] 16300\n[1] 16400\n[1] 16500\n[1] 16600\n[1] 16700\n[1] 16800\n[1] 16900\n[1] 17000\n[1] 17100\n[1] 17200\n[1] 17300\n[1] 17400\n[1] 17500\n[1] 17600\n[1] 17700\n[1] 17800\n[1] 17900\n[1] 18000\n[1] 18100\n[1] 18200\n[1] 18300\n[1] 18400\n[1] 18500\n[1] 18600\n[1] 18700\n[1] 18800\n[1] 18900\n[1] 19000\n[1] 19100\n[1] 19200\n[1] 19300\n[1] 19400\n[1] 19500\n[1] 19600\n[1] 19700\n[1] 19800\n[1] 19900\n[1] 20000\n[1] 20100\n[1] 20200",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>PBMCs: Determine Significantly Expanded Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part4_3A.html#count-how-many-clones-are-expanded-prevax-compared-to-pretreatment",
    "href": "PBMC_bulkTCR_Part4_3A.html#count-how-many-clones-are-expanded-prevax-compared-to-pretreatment",
    "title": "7  PBMCs: Determine Significantly Expanded Clones",
    "section": "7.6 Count how many clones are expanded prevax compared to pretreatment",
    "text": "7.6 Count how many clones are expanded prevax compared to pretreatment\n\np101_pval_prevax_vs_pretreatment &lt;- p101_pval_prevax_vs_pretreatment %&gt;%\n  mutate(Patient = \"P101\")\np103_pval_prevax_vs_pretreatment &lt;- p103_pval_prevax_vs_pretreatment %&gt;%\n  mutate(Patient = \"P103\")\np104_pval_prevax_vs_pretreatment &lt;- p104_pval_prevax_vs_pretreatment %&gt;%\n  mutate(Patient = \"P104\")\np105_pval_prevax_vs_pretreatment &lt;- p105_pval_prevax_vs_pretreatment %&gt;%\n  mutate(Patient = \"P105\")\np106_pval_prevax_vs_pretreatment &lt;- p106_pval_prevax_vs_pretreatment %&gt;%\n  mutate(Patient = \"P106\")\np108_pval_prevax_vs_pretreatment &lt;- p108_pval_prevax_vs_pretreatment %&gt;%\n  mutate(Patient = \"P108\")\np109_pval_prevax_vs_pretreatment &lt;- p109_pval_prevax_vs_pretreatment %&gt;%\n  mutate(Patient = \"P109\")\np110_pval_prevax_vs_pretreatment &lt;- p110_pval_prevax_vs_pretreatment %&gt;%\n  mutate(Patient = \"P110\")\np111_pval_prevax_vs_pretreatment &lt;- p111_pval_prevax_vs_pretreatment %&gt;%\n  mutate(Patient = \"P111\")\n\npval_prevax_vs_pretreatment &lt;- do.call(rbind, list(p101_pval_prevax_vs_pretreatment,\n                                              p103_pval_prevax_vs_pretreatment,\n                                              p104_pval_prevax_vs_pretreatment,\n                                              p105_pval_prevax_vs_pretreatment,\n                                              p106_pval_prevax_vs_pretreatment,\n                                              p108_pval_prevax_vs_pretreatment,\n                                              p109_pval_prevax_vs_pretreatment,\n                                              p110_pval_prevax_vs_pretreatment,\n                                              p111_pval_prevax_vs_pretreatment))",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>PBMCs: Determine Significantly Expanded Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part4_3A.html#join-results-from-the-significance-comparisons-after-nivolumab-vs-after-vaccine",
    "href": "PBMC_bulkTCR_Part4_3A.html#join-results-from-the-significance-comparisons-after-nivolumab-vs-after-vaccine",
    "title": "7  PBMCs: Determine Significantly Expanded Clones",
    "section": "7.7 Join results from the significance comparisons after nivolumab vs after vaccine",
    "text": "7.7 Join results from the significance comparisons after nivolumab vs after vaccine\n\nn_sig_postvax_vs_prevax &lt;- pval_postvax_vs_prevax %&gt;%\n  filter(sig == \"Sig\") %&gt;%\n  dplyr::count(sig, Patient) %&gt;%\n  mutate(category = \"After Vaccine\")\n\nn_sig_prevax_vs_pretreatment &lt;- pval_prevax_vs_pretreatment %&gt;%\n  filter(sig == \"Sig\") %&gt;%\n  dplyr::count(sig, Patient) %&gt;%\n  mutate(category = \"After Nivo\")\n\n# Get order based on vax-expanded counts\npt_order &lt;- n_sig_postvax_vs_prevax %&gt;%\n  arrange(desc(n)) %&gt;%\n  mutate(pt_order = 1:n()) %&gt;%\n  select(Patient, pt_order)\n\nn_sig &lt;- rbind(n_sig_postvax_vs_prevax, n_sig_prevax_vs_pretreatment) %&gt;%\n  # Add a column for ordering\n  left_join(pt_order)\n\nJoining with `by = join_by(Patient)`",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>PBMCs: Determine Significantly Expanded Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part4_3A.html#check-normal-distribution-assumption",
    "href": "PBMC_bulkTCR_Part4_3A.html#check-normal-distribution-assumption",
    "title": "7  PBMCs: Determine Significantly Expanded Clones",
    "section": "7.8 Check normal distribution assumption",
    "text": "7.8 Check normal distribution assumption\nt test: Paired t-test can be used only when the difference d is normally distributed. This can be checked using Shapiro-Wilk test. wilxocon: Differences between paired samples should be distributed symmetrically around the median.\n\ndiff &lt;- n_sig %&gt;%\n  pivot_wider(id_cols = c(\"Patient\"), values_from = \"n\", names_from = \"category\") %&gt;%\n  mutate(diff = `After Nivo` - `After Vaccine`)\n\nmed &lt;- n_sig %&gt;%\n  pivot_wider(id_cols = c(\"Patient\"), values_from = \"n\", names_from = \"category\") %&gt;%\n  mutate(diff = `After Nivo` - `After Vaccine`) %&gt;%\n  summarize(median = median(diff)) %&gt;%\n  pull(median)\n\nn_sig %&gt;%\n  pivot_wider(id_cols = c(\"Patient\"), values_from = \"n\", names_from = \"category\") %&gt;%\n  mutate(diff = `After Nivo` - `After Vaccine`) %&gt;%\n  ggplot(aes(x = diff)) +\n  geom_histogram() +\n  geom_vline(xintercept = -106)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nshapiro.test(diff$diff)\n\n\n    Shapiro-Wilk normality test\n\ndata:  diff$diff\nW = 0.91773, p-value = 0.3737\n\n# p val is above 0.05, can assume normality",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>PBMCs: Determine Significantly Expanded Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part4_3A.html#create-fig-3a",
    "href": "PBMC_bulkTCR_Part4_3A.html#create-fig-3a",
    "title": "7  PBMCs: Determine Significantly Expanded Clones",
    "section": "7.9 Create Fig 3A",
    "text": "7.9 Create Fig 3A\n\nres &lt;- t.test(n ~ category, data = n_sig, paired = TRUE, alternative = \"two.sided\")\nres\n\n\n    Paired t-test\n\ndata:  n by category\nt = -4.4334, df = 8, p-value = 0.002187\nalternative hypothesis: true mean difference is not equal to 0\n95 percent confidence interval:\n -173.63357  -54.81087\nsample estimates:\nmean difference \n      -114.2222 \n\npval_df &lt;- data.frame(\n  group1 = \"After Nivo\",\n  group2 = \"After Vaccine\",\n  label = round(res$p.value, 5),\n  y.position = 350\n)\n\n# Original  \nbp &lt;- n_sig %&gt;%\n  ggplot() +\n  geom_boxplot(aes(x = category, y = n)) +\n  geom_point(aes(x = category, y = n, group = Patient, color = Patient), size = 4) +\n  geom_line(aes(x = category, y = n, group = Patient, color = Patient)) +\n  theme_classic() +\n  ylab(\"Number of significantly expanding clones\") +\n  xlab(\"\") +\n  pt_cols +\n  add_pvalue(pval_df) \n\nbp",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>PBMCs: Determine Significantly Expanded Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part4_3A.html#save-pvals",
    "href": "PBMC_bulkTCR_Part4_3A.html#save-pvals",
    "title": "7  PBMCs: Determine Significantly Expanded Clones",
    "section": "7.10 Save pvals",
    "text": "7.10 Save pvals\n\n# Significantly expanded after vaccine\nwrite.csv(p101_pval_postvax_vs_prevax,\"p101_pval_postvax_vs_prevax_Part4.csv\", row.names = FALSE)\nwrite.csv(p103_pval_postvax_vs_prevax,\"p103_pval_postvax_vs_prevax_Part4.csv\", row.names = FALSE)\nwrite.csv(p104_pval_postvax_vs_prevax,\"p104_pval_postvax_vs_prevax_Part4.csv\", row.names = FALSE)\nwrite.csv(p105_pval_postvax_vs_prevax,\"p105_pval_postvax_vs_prevax_Part4.csv\", row.names = FALSE)\nwrite.csv(p106_pval_postvax_vs_prevax,\"p106_pval_postvax_vs_prevax_Part4.csv\", row.names = FALSE)\nwrite.csv(p108_pval_postvax_vs_prevax,\"p108_pval_postvax_vs_prevax_Part4.csv\", row.names = FALSE)\nwrite.csv(p109_pval_postvax_vs_prevax,\"p109_pval_postvax_vs_prevax_Part4.csv\", row.names = FALSE)\nwrite.csv(p110_pval_postvax_vs_prevax,\"p110_pval_postvax_vs_prevax_Part4.csv\", row.names = FALSE)\nwrite.csv(p111_pval_postvax_vs_prevax,\"p111_pval_postvax_vs_prevax_Part4.csv\", row.names = FALSE)\n\n# Significantly expanded after Nivo\nwrite.csv(p101_pval_prevax_vs_pretreatment,\"p101_pval_prevax_vs_pretreatment_Part4.csv\", row.names = FALSE)\nwrite.csv(p103_pval_prevax_vs_pretreatment,\"p103_pval_prevax_vs_pretreatment_Part4.csv\", row.names = FALSE)\nwrite.csv(p104_pval_prevax_vs_pretreatment,\"p104_pval_prevax_vs_pretreatment_Part4.csv\", row.names = FALSE)\nwrite.csv(p105_pval_prevax_vs_pretreatment,\"p105_pval_prevax_vs_pretreatment_Part4.csv\", row.names = FALSE)\nwrite.csv(p106_pval_prevax_vs_pretreatment,\"p106_pval_prevax_vs_pretreatment_Part4.csv\", row.names = FALSE)\nwrite.csv(p108_pval_prevax_vs_pretreatment,\"p108_pval_prevax_vs_pretreatment_Part4.csv\", row.names = FALSE)\nwrite.csv(p109_pval_prevax_vs_pretreatment,\"p109_pval_prevax_vs_pretreatment_Part4.csv\", row.names = FALSE)\nwrite.csv(p110_pval_prevax_vs_pretreatment,\"p110_pval_prevax_vs_pretreatment_Part4.csv\", row.names = FALSE)\nwrite.csv(p111_pval_prevax_vs_pretreatment,\"p111_pval_prevax_vs_pretreatment_Part4.csv\", row.names = FALSE)",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>PBMCs: Determine Significantly Expanded Clones</span>"
    ]
  },
  {
    "objectID": "PBMC_bulkTCR_Part4_3A.html#get-session-info",
    "href": "PBMC_bulkTCR_Part4_3A.html#get-session-info",
    "title": "7  PBMCs: Determine Significantly Expanded Clones",
    "section": "7.11 Get session info",
    "text": "7.11 Get session info\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Rocky Linux 8.10 (Green Obsidian)\n\nMatrix products: default\nBLAS/LAPACK: /usr/lib64/libopenblasp-r0.3.15.so;  LAPACK version 3.9.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: America/New_York\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] ggprism_1.0.5   patchwork_1.3.0 lubridate_1.9.4 forcats_1.0.0  \n [5] stringr_1.5.1   purrr_1.0.4     readr_2.1.5     tidyr_1.3.1    \n [9] tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0 dplyr_1.1.4    \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6      jsonlite_1.8.9    compiler_4.3.2    tidyselect_1.2.1 \n [5] scales_1.3.0      fastmap_1.2.0     R6_2.6.1          labeling_0.4.3   \n [9] generics_0.1.3    knitr_1.49        htmlwidgets_1.6.4 munsell_0.5.1    \n[13] pillar_1.10.1     tzdb_0.5.0        rlang_1.1.5       stringi_1.8.4    \n[17] xfun_0.50         timechange_0.3.0  cli_3.6.3         withr_3.0.2      \n[21] magrittr_2.0.3    digest_0.6.37     grid_4.3.2        rstudioapi_0.17.1\n[25] hms_1.1.3         lifecycle_1.0.4   vctrs_0.6.5       evaluate_1.0.1   \n[29] glue_1.8.0        farver_2.1.2      colorspace_2.1-1  rmarkdown_2.29   \n[33] tools_4.3.2       pkgconfig_2.0.3   htmltools_0.5.8.1",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>PBMCs: Determine Significantly Expanded Clones</span>"
    ]
  }
]