# Skin: Normalization, doublet discrimination, integration, clustering {#sec-skin-normalizaation-clustering}

## Set up Seurat workspace

```{r }
#| warning: false
#| error: false

# Load libraries
library(data.table)
library(devtools)
library(presto)
library(BiocParallel)
library(glmGamPoi)
library(sctransform)
library(Seurat)
library(tidyverse)
library(miQC)
library(SeuratWrappers)
library(flexmix)
library(SingleCellExperiment)
library(SummarizedExperiment)
library(readxl)
library(fishpond)
library(Matrix)
library(speckle)
library(scater)
library(patchwork)
library(vctrs)
library(alevinQC)
library(harmony)
library(scDblFinder)
library(cellXY)

# Set global options for Seurat v5 objects
options(Seurat.object.assay.version = 'v5')
```

## Load previously saved object

```{r}
merged.18279.skin <- readRDS("Skin_scRNA_Part1.rds")
```

## Normalize and scale data
Regress out mitochondrial contribution

```{r}
#| warning: false
#| error: false
merged.18279.skin <- NormalizeData(merged.18279.skin)
merged.18279.skin <- FindVariableFeatures(merged.18279.skin, 
                                    assay="RNA", 
                                    layer="data", 
                                    selection.method = "vst", 
                                    nfeatures = 5000)
merged.18279.skin <- ScaleData(merged.18279.skin, vars.to.regress = "percent.mt")
```

## Run PCA

```{r}
merged.18279.skin <- RunPCA(merged.18279.skin, npcs = 200, verbose = FALSE)
ElbowPlot(merged.18279.skin, ndims = 200, reduction = "pca")
```

## Plot unintegrated UMAP

```{r}
#| fig-width: 12
merged.18279.skin <- RunUMAP(merged.18279.skin, 
                        reduction = "pca", 
                        dims = 1:50, 
                        reduction.name = "umap.unintegrated")
DimPlot(merged.18279.skin, reduction = "umap.unintegrated", group.by = c("Site", "Patient", "Timepoint"))
```

## Call preliminary clusters for the purposes of doublet discrimination

```{r}
merged.18279.skin <- FindNeighbors(merged.18279.skin, dims = 1:50, reduction = "pca")
merged.18279.skin <- FindClusters(merged.18279.skin, 
                             resolution = 0.4, 
                             algorithm = 2)

DimPlot(merged.18279.skin, reduction = "umap.unintegrated", label = T)
```

## Identify and remove doublets
This uses raw counts as input

### Combine RNA layers

```{r}
merged.18279.skin[['RNA']] <- JoinLayers(merged.18279.skin[['RNA']])
```

### Convert seurat to sce and check colData

```{r}
merged.18279.skin.sce <- as.SingleCellExperiment(merged.18279.skin, assay = "RNA")
merged.18279.skin.sce

colData(merged.18279.skin.sce)
```

### Run scDblFinder

Set the `dbr.sd` very high to better allow thresholds to be set based on misclassification rates per sample

```{r}
merged.18279.skin.sce <- scDblFinder(merged.18279.skin.sce,
					samples = "Sample",
					dbr.sd = 1,
					clusters = "seurat_clusters",
				 	BPPARAM = MulticoreParam(4,RNGseed=123)
				)
```

### Inspect results

```{r}
# Look at the classes
table(merged.18279.skin.sce$seurat_clusters, merged.18279.skin.sce$scDblFinder.class)
table(merged.18279.skin.sce$Sample, merged.18279.skin.sce$scDblFinder.class)

# Look at the scores
summary(merged.18279.skin.sce$scDblFinder.score)
```

### Save doublet classifications into main Seurat object

```{r}
merged.18279.skin$doublet_classification <- merged.18279.skin.sce$scDblFinder.class
```

### Count singlets and doublets

```{r}
table(merged.18279.skin$doublet_classification)

table(merged.18279.skin$doublet_classification, merged.18279.skin$seurat_clusters)
```

### Plot singlets/doublets in UMAP space

```{r}
DimPlot(merged.18279.skin,reduction = "umap.unintegrated", group.by = "doublet_classification")
```

### Subset object to remove doublets and count remaining cells

```{r}
merged.18279.skin.singlets <- subset(merged.18279.skin, doublet_classification %in% c("singlet"))
dim(merged.18279.skin.singlets)

# Count remaining cells per initial cluster
table(merged.18279.skin.singlets$seurat_clusters)
```

## Remove cells with very high nCount_RNA values, set other final QC filters

```{r}
merged.18279.skin.singlets <- subset(merged.18279.skin.singlets,
                                subset = nCount_RNA < 40000 & nCount_RNA > 1500 & nFeature_RNA > 750)
dim(merged.18279.skin.singlets)
```

## Re-compute PCA

Re-scale data now that it has been subset

```{r}
#| warning: false
#| error: false
merged.18279.skin.singlets[["RNA"]] <- split(merged.18279.skin.singlets[["RNA"]], f = merged.18279.skin.singlets$Sample)

merged.18279.skin.singlets <- FindVariableFeatures(merged.18279.skin.singlets, 
                                    assay = "RNA", 
                                    layer = "data", 
                                    selection.method = "vst", 
                                    nfeatures = 5000)
merged.18279.skin.singlets <- ScaleData(merged.18279.skin.singlets, vars.to.regress = "percent.mt")
merged.18279.skin.singlets <- RunPCA(merged.18279.skin.singlets, npcs = 200, verbose = FALSE)
```

## Run Harmony integration

```{r}
merged.18279.skin.singlets <- IntegrateLayers(merged.18279.skin.singlets, 
                                method = HarmonyIntegration, 
                                orig.reduction = "pca",
                                new.reduction = "integrated.harmony"
)
```

# Identify clusters after integration using a range of resolution

```{r}
merged.18279.skin.singlets <- FindNeighbors(merged.18279.skin.singlets, dims = 1:50, reduction = "integrated.harmony")

merged.18279.skin.singlets <- FindClusters(merged.18279.skin.singlets, 
                             resolution = seq(0.1, 2, by = 0.1), 
                             algorithm = 2)

merged.18279.skin.singlets <- RunUMAP(merged.18279.skin.singlets,
                        reduction = "integrated.harmony",
                        dims = 1:50,
                        reduction.name = "umap.harmony")

table(merged.18279.skin.singlets$seurat_clusters)
```

# Plot clusters

```{r}
#| fig-width: 40
#| fig-height: 20
DimPlot(merged.18279.skin.singlets,
        reduction = "umap.harmony", 
        label = TRUE, 
        group.by = paste0("RNA_snn_res.",seq(0.1,2,0.1)))
```

## Plot one as example
```{r}
DimPlot(merged.18279.skin.singlets,
        reduction = "umap.harmony", 
        label = TRUE, 
        group.by = "RNA_snn_res.1")
```

## Plot metadata in UMAP space

```{r}
DimPlot(merged.18279.skin.singlets,reduction = "umap.harmony", group.by = "Patient")
DimPlot(merged.18279.skin.singlets,reduction = "umap.harmony", group.by = "Site")
DimPlot(merged.18279.skin.singlets,reduction = "umap.harmony", group.by = "Timepoint")
DimPlot(merged.18279.skin.singlets,reduction = "umap.harmony", group.by = "IpiCohort")
DimPlot(merged.18279.skin.singlets,reduction = "umap.harmony", group.by = "Sample") + NoLegend()

FeaturePlot(merged.18279.skin.singlets,reduction = "umap.harmony",features="nCount_RNA",order=T)
FeaturePlot(merged.18279.skin.singlets,reduction = "umap.harmony",features="nFeature_RNA",order=T)
FeaturePlot(merged.18279.skin.singlets,reduction = "umap.harmony",features="percent.mt",order=T)
```

## Save clustered object

```{r}
saveRDS(merged.18279.skin.singlets,"Skin_scRNA_Part2.rds")
```

## Get session info

```{r}
sessionInfo()
```
